{\rtf1\ansi\ansicpg1252\cocoartf949\cocoasubrtf420
{\fonttbl\f0\fnil\fcharset0 Monaco;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue191;\red0\green0\blue0;\red0\green115\blue0;
\red96\green96\blue96;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f0\fs18 \cf2 var\cf3  server, paths, count = 0, speakers;\
server = \cf2 Server\cf3 .internal;\
\cf2 Server\cf3 .default = server;\
\
speakers = \cf2 IbiSpeakers\cf3 .quad;\
\
\cf2 SynthDef\cf3 (\cf4 \\fxresynth\cf3 , \{\cf2 |out, efx, buffer, parts, pstart, pskip, rate, efxamp, \
	fmul, fadd, spct, npct, azm, elv, rad, amp, dur|\cf3 \
	\cf2 var\cf3  env, sig, ptr, bf;\
	env = \cf2 Control\cf3 .names([\cf4 \\env\cf3 ]).kr(\cf2 Env\cf3 .newClear(8).asArray);\
	ptr = \cf2 LFSaw\cf3 .kr(rate, 1, 0.5, 0.5);\
	sig = \cf2 AtsNoiSynth\cf3 .ar(buffer, parts, pstart, pskip, ptr, spct, npct, fmul, fadd) \
		* \cf2 EnvGen\cf3 .kr(env, timeScale: dur, doneAction: 2);\
	bf = \cf2 BFEncode1\cf3 .ar(sig, azm, elv, rad);\
	\cf2 Out\cf3 .ar(efx, sig * efxamp);\
	\cf2 Out\cf3 .ar(out, bf * amp)		\
\}).send(server);\
\
\cf2 SynthDef\cf3 (\cf4 \\fxdustspace\cf3 , \{\cf2 |out = 0, in, dust = 10, pow = 1.5, amp = 1.0|\cf3 \
	\cf2 var\cf3  input, l, r, bfl, bfr, azm, wid, rho;\
	input = \cf2 In\cf3 .ar(in);\
	#l, r = \cf2 GVerb\cf3 .ar(input ** pow + \cf2 Dust\cf3 .ar(dust, input), 1000, \
		\cf2 LFNoise2\cf3 .kr(0.05, 10.0, 35.0), 0.31, 0.5, 15, 0.1, 0.4, 1.0, 1000) * amp;\
	wid = \cf2 LFNoise2\cf3 .kr(29.reciprocal, 0.25pi, 0.25pi);\
	azm = \cf2 LFNoise2\cf3 .kr(31.reciprocal, pi);\
	rho = \cf2 LFNoise2\cf3 .kr(23.reciprocal, 0.5, 0.5);\
	bfl = \cf2 BFEncode1\cf3 .ar(l, azm - (wid * 0.5), 0, rho);\
	bfr = \cf2 BFEncode1\cf3 .ar(l, azm + (wid * 0.5), 0, rho);\
	\cf2 Out\cf3 .ar(out, bfl + bfr);\
\}).send(server);	\
\
\cf2 SynthDef\cf3 (\cf4 \\fxdecoder\cf3 , \{\cf2 |in, amp = 1.0|\cf3 \
	\cf2 var\cf3  w, x, y, z, decode;\
	#w, x, y, z = \cf2 In\cf3 .ar(in, 4);\
	decode = \cf2 BFDecode1\cf3 .ar(w, x, y, z, speakers.azimuth, speakers.elevation);\
	\cf2 Out\cf3 .ar(0, decode * amp)\
\}).send(server);\
\
paths = \cf5 "/Users/alo/atsfiles/*"\cf3 .pathMatch;\
\
\cf2 SystemClock\cf3 .sched(0.5, \{\
	~bf = \cf2 Bus\cf3 .audio(server, 4);\
	~fx = \cf2 Bus\cf3 .audio(server);\
	~gr = \cf2 Group\cf3 ();\
	~dec = \cf2 Synth\cf3 .after(~gr, \cf4 \\fxdecoder\cf3 , [\cf4 \\in\cf3 , ~bf]);\
	~rv = \cf2 Synth\cf3 .tail(~gr, \cf4 \\fxdustspace\cf3 , [\cf4 \\out\cf3 , ~bf, \cf4 \\in\cf3 , ~fx]);\
\});\
\
\cf2 Routine\cf3 (\{\
	\cf2 var\cf3  dur, ats;\
	\cf2 inf\cf3 .do(\{\cf2 |i|\cf3 \
		dur = rrand(30, 50);\
		ats = \cf2 AtsFile\cf3 (paths.wrapAt(i)).loadToBuffer;\
		3.wait;\
		\cf2 Synth\cf3 (\cf4 \\fxresynth\cf3 , [\cf4 \\out\cf3 , ~bf, \cf4 \\efx\cf3 , ~fx, \cf4 \\buffer\cf3 , ats.buffer, \
			\cf4 \\parts\cf3 , min(40, ats.numPartials), \cf4 \\pstart\cf3 , 0, \cf4 \\pskip\cf3 , 1, \cf4 \\rate\cf3 , rrand(0.01, 1.0), \
			\cf4 \\efxamp\cf3 , 0.1, \cf4 \\fmul\cf3 , 1.0, \cf4 \\fadd\cf3 , 0.0, \cf4 \\spct\cf3 , 0.5, \cf4 \\npct\cf3 , 0.5, \cf4 \\azm\cf3 , pi.rand2, \
			\cf4 \\elv\cf3 , 0, \cf4 \\rad\cf3 , 0.3, \cf4 \\amp\cf3 , 0.5, \cf4 \\dur\cf3 , dur])\
			.setn(\cf4 \\env\cf3 , \cf2 Env\cf3 ([0.0, 1.0, 1.0, 0.0], [0.3, 0.4, 0.3], \cf4 \\welch\cf3 ));\
		rrand(20, 30).wait;\
	\})\
\}).play}