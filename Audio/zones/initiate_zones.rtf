{\rtf1\ansi\ansicpg1252\cocoartf949\cocoasubrtf540
{\fonttbl\f0\fnil\fcharset238 Inconsolata;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue191;\red96\green96\blue96;\red0\green115\blue0;
\red191\green0\blue0;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f0\fs24 \cf2 var\cf0  atspath = \cf3 "/Users/alo/sounds/ats/*"\cf0 ;\
\cf2 var\cf0  bufpath = \cf3 "/Users/alo/sounds/fx_loops/*"\cf0 ;\
\
~serv = \cf2 Server\cf0 .internal;\
\cf2 Server\cf0 .default = ~serv;\
\
~localDecoder = \cf2 false\cf0 ;\
~stereoOutput = \cf2 false\cf0 ;\
\
~bpm = 140.0;\
~bps = ~bpm / 60.0;\
\
\cf2 Routine\cf0 (\{\
\
	if (~serv.serverRunning)\
	\{\
		\cf3 "QUITTING SERVER..."\cf0 .inform;\
		~serv.quit;\
		1.wait;\
	\};\
	\
	~serv.options.numWireBufs = 512;\
	~serv.options.memSize = 2**16;\
	\
	\cf3 "BOOTING SERVER..."\cf0 .postln;\
	~serv.boot;\
	\
	~serv.doWhenBooted(\{\
\
		~atsfiles = \cf2 Array\cf0 .newClear(atspath.pathMatch.size);\
		~loops = \cf2 Array\cf0 .newClear(bufpath.pathMatch.size);\
		~atsdata = \cf2 Array\cf0 ();\
		\cf2 Routine\cf0 (\{\
			\cf2 var\cf0  prog;\
			\
			if ((~loadAts.isNil).or(~loadAts))\
			\{\
				prog = \cf2 ProgBar\cf0 (atspath.pathMatch.size);\
				atspath.pathMatch.do(\{\cf2 |path, i|\cf0 \
					\cf2 var\cf0  af;\
					af = \cf2 AtsFile\cf0 (path, ~serv);\
					if (af.numPartials > 20)\
					\{ \
						af.loadToBuffer;\
						~serv.sync;\
						~atsfiles.put(i, af);\
						~atsdata = ~atsdata.add( \
							( \
							\cf4 \\buffer\cf0 : af.buffer, \
							\cf4 \\nparts\cf0 : af.numPartials, \
							\cf4 \\dur\cf0 : af.sndDur ,\
							\cf4 \\file\cf0 : af.path\
							) \
						);\
					\};\
					prog.next;\
					0.001.wait;\
				\});\
				prog.close;\
				prog = \cf2 nil\cf0 ;\
			\};\
						\
			prog = \cf2 ProgBar\cf0 (bufpath.pathMatch.size);\
			bufpath.pathMatch.do(\{\cf2 |path, i|\cf0 \
				~loops = ~loops.add( \cf2 Buffer\cf0 .read(~serv, path) );\
				~serv.sync;\
				\cf2 Post\cf0  << path.basename << \cf3 " loaded to buffer.."\cf0  << \cf2 Char\cf0 .nl;\
				prog.next;\
				0.001.wait;\
			\});\
			prog.close;\
			prog = \cf2 nil\cf0 ;\
			\
			~loops = ~loops.select(\cf2 _\cf0 .notNil);\
			\
			~eq = \cf2 MasterEQ\cf0 (4);\
			\
			~eq.window.bounds = \cf2 Rect\cf0 (1000, 600, \
				~eq.window.bounds.width, ~eq.window.bounds.height);\
				\
			~fx = \cf2 Fx3D\cf0 ().makeOglGui;\
			\
			\cf2 SynthDef\cf0 (\cf4 \\verb\cf0 , \{\cf2 |out, in, rtime, damp, inbw, spr, dry, early, tail, amp|\cf0 \
				\cf2 var\cf0  sig, input, actr, fb;\
				input = \cf2 In\cf0 .ar(in);\
				fb = \cf2 LocalIn\cf0 .ar;\
				sig = \cf2 GVerb\cf0 .ar(input + fb, 1500, rtime, damp, inbw, spr, dry, early, tail, 1500);\
				\cf2 LocalOut\cf0 .ar(\cf2 Mix\cf0 (sig) * 0.01);\
\cf5 //				sig = sig + PitchShift.ar(sig * 0.5, 0.1, [36 / 35, 35 / 36], \cf0 \
\cf5 //					timeDispersion: 0.1, mul: 0.1);\cf0 \
				\cf2 Out\cf0 .ar(out, (sig ++ sig) * amp)\
			\}).memStore;\
			\
			\cf2 SynthDef\cf0 (\cf4 \\bf2decode\cf0 , \{\cf2 |bus, amp = 1|\cf0 \
				\cf2 var\cf0  w, x, y, z;\
				#w, x, y, z = \cf2 In\cf0 .ar(bus, 4);\
				\cf2 Out\cf0 .ar( 0, \cf2 BFDecode1\cf0 .ar(w, x, y, z, \cf2 IbiSpeakers\cf0 .quad.azimuth, (0 ! 4) ) * amp )\
			\}).memStore;\
			\
			\cf2 SynthDef\cf0 (\cf4 \\bfcollect\cf0 , \{\cf2 |bus, amp = 1|\cf0 \
				\cf2 Out\cf0 .ar(0, \cf2 In\cf0 .ar(bus, 4) * amp)\
			\}).memStore;\
			\
			\cf2 SynthDef\cf0 (\cf4 \\btoUHJ\cf0 , \{\cf2 |bus, amp = 1|\cf0 \
				\cf2 var\cf0  w, x, y, z;\
				#w, x, y, z = \cf2 In\cf0 .ar(bus, 4);\
				#w, x, y, z = \cf2 Compander\cf0 .ar([w, x, y, z], 0.9, 1, 0.5, 0.01, 0.01);\
				\cf2 Out\cf0 .ar(0, \cf2 B2UHJ\cf0 .ar(w, x, y) * amp)\
			\}).memStore;\
			\
			~serv.sync;\
\
			~abus = \cf2 Bus\cf0 .audio(~serv, 4);\
			~rbus = \cf2 Bus\cf0 .audio(~serv);\
			~rout = \cf2 Bus\cf0 .audio(~serv, 4);\
			~agrp = \cf2 Group\cf0 ();\
			~rev = \cf2 Synth\cf0 .after(~agrp, \cf4 \\verb\cf0 , [\cf4 \\out\cf0 , ~rout, \cf4 \\in\cf0 , ~rbus, \cf4 \\rtime\cf0 , 3, \cf4 \\damp\cf0 , 0.5, \
				\cf4 \\inbw\cf0 , 0.5, \cf4 \\spr\cf0 , 20, \cf4 \\dry\cf0 , 0.0, \cf4 \\early\cf0 , 0.8, \cf4 \\tail\cf0 , 1.5, \cf4 \\amp\cf0 , 0.75]);	\
			if (~stereoOutput)\
			\{\
				~decode = \cf2 Synth\cf0 .after(~rev, \cf4 \\btoUHJ\cf0 , [\cf4 \\bus\cf0 , ~abus, \cf4 \\amp\cf0 , 1.0]);\
				\
			\}\
			\{\
				if (~localDecoder)\
				\{\
					~decode = \cf2 Synth\cf0 .after(~rev, \cf4 \\bf2decode\cf0 , [\cf4 \\bus\cf0 , ~abus, \cf4 \\amp\cf0 , 1.0])\
				\}\
				\{\
					~decode = \cf2 Synth\cf0 .after(~rev, \cf4 \\bfcollect\cf0 , [\cf4 \\bus\cf0 , ~abus, \cf4 \\amp\cf0 , 1.0])\
				\}\
			\};\
						\
			\cf3 "Zones initialized..."\cf0 .inform;\
			\
		\}).play(\cf2 AppClock\cf0 )\
\
	\})\
\}).play(\cf2 AppClock\cf0 );}