{\rtf1\ansi\ansicpg1252\cocoartf949\cocoasubrtf540
{\fonttbl\f0\fnil\fcharset238 Inconsolata;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue191;\red0\green115\blue0;\red96\green96\blue96;
\red191\green0\blue0;\red0\green0\blue0;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f0\fs24 \cf0 (\
\cf2 SynthDef\cf0 (\cf3 \\playb\cf0 , \{\cf2 |out, gate, buffer, del, amp, pch1, pch2, pch3, delg, xang, yang, zang|\cf0   \
	\cf2 var\cf0  sig, env, delay, pitch, w, x, y, z;\
	env = \cf2 EnvGen\cf0 .kr(\cf2 EnvControl\cf0 .kr, gate, doneAction: 2);\
	delay = \cf2 Array\cf0 .geom(4, del, delg);\
	pitch = [0, pch1, pch2, pch3];\
	sig = \cf2 PlayBuf\cf0 .ar(1, buffer, loop: 1) * env;\
	#w, x, y, z = \cf2 A2B\cf0 .ar(\
		*\cf2 Array\cf0 .fill(4, \{\cf2 |i|\cf0 \
			\cf2 DelayC\cf0 .ar(\cf2 PitchShift\cf0 .ar(sig, 0.2, pitch@i), 0.2, delay@i)\
		\})\
	);\
	\cf2 Out\cf0 .ar(out, \cf2 AtkRotateXYZ\cf0 .ar(w, x, y, z, xang, yang, zang) * amp)\
\}).add;\
\
~decoder = \cf2 Decoder\cf0 (isUHJ: \cf2 true\cf0 );\
\
~bufs = \cf4 "/Users/alo/sounds/fx_loops/reloop_*"\cf0 .pathMatch.collect(\{\cf2 |path|\cf0  \cf2 Buffer\cf0 .read(s, path) \});\
\
~weights = [1, 2, 1, 1].mirror2;\
~rule = \cf2 Continuous\cf0 (add: 0.05, wrap: \cf2 false\cf0 ).weights_(~weights);\
~wrld = \cf2 XWorld\cf0 .newSetCells(16, \cf2 XSeeds\cf0 .rect(4, 4, 8, 8), \cf2 Habitat\cf0 .newMoore, ~rule);\
~dsp = \cf2 PenDisplay\cf0 (~wrld, ~rule, \cf2 Array\cf0 .with(\cf2 Color\cf0 .new(0.2, 0.22, 0.25)), 10, 0.1);\
\
~ind = (0..4);\
\
\cf5 //~rule.add_(0.95)\cf6 \
\cf5 //~rule.weights_([1, 2, 1, 1].mirror2)\cf6 \
\cf0 \
~wrld.world[6][6].state = 1.0;\
~wrld.world[6][9].state = 1.0;\
~wrld.world[9][6].state = 1.0;\
~wrld.world[9][9].state = 1.0;\
\
~map = (\
	amp: \cf2 ExponentialWarp\cf0 (\cf2 ControlSpec\cf0 (0.04, 4.0)),\
	pch1: \cf2 CyclicWarp\cf0 (\cf2 ControlSpec\cf0 (35/36, 1.0)),\
	pch2: \cf2 CyclicWarp\cf0 (\cf2 ControlSpec\cf0 (1.0, 36/35)),\
	pch3: \cf2 CyclicWarp\cf0 (\cf2 ControlSpec\cf0 (35/36, 36/35)),\
	delg: \cf2 CosineWarp\cf0 (\cf2 ControlSpec\cf0 (1.01, 1.1)),\
	xang: \cf2 CyclicWarp\cf0 (\cf2 ControlSpec\cf0 (-pi, pi)),\
	yang: \cf2 CyclicWarp\cf0 (\cf2 ControlSpec\cf0 (pi, -pi)),\
	zang: \cf2 CyclicWarp\cf0 (\cf2 ControlSpec\cf0 (-pi, pi))\
);\
\
)\
\
(\
~synths = \cf2 Array\cf0 .newClear(8);\
~group = \cf2 Group\cf0 ();\
\
~decoder.start(~group, \cf3 \\addAfter\cf0 );\
\
8.do(\{\cf2 |i|\cf0 \
	\cf2 var\cf0  states = \cf2 Pseq\cf0 (~wrld.world[i].collect(\cf2 _\cf0 .state), 1).asStream;\
	~synths.put(i, \cf2 Synth\cf0 .tail(~group, \cf3 \\playb\cf0 , [\cf3 \\out\cf0 , ~decoder.bus, \cf3 \\gate\cf0 , 1, \cf3 \\dur\cf0 , 1, \
		\cf3 \\buffer\cf0 , ~bufs[i], \cf3 \\del\cf0 , 0.02 ] ++ \
			~map.collect(\{\cf2 |spec|\cf0  spec.map(states.next) \}).asKeyValuePairs\
		).setn(\cf3 \\env\cf0 , \cf2 Env\cf0 ([0.001, 1.0, 1.0, 0.001], [0.3, 0.4, 0.3], \cf3 \\sine\cf0 , 2, 1) )\
	)\
\});\
\
)\
\
(\
f = \{\
	~synths.do(\{\cf2 |synth, i|\cf0 \
		\cf2 var\cf0  states = \cf2 Pseq\cf0 (~wrld.world[i].collect(\cf2 _\cf0 .state), 1).asStream;\
		synth.set(*~map.collect(\{\cf2 |spec|\cf0  spec.map(states.next) \}).asKeyValuePairs)\
	\})\
\};\
\
r = \cf2 Routine\cf0 (\{\
	0.1.wait;\
	\cf2 inf\cf0 .do(\{\
		\{ ~dsp.next \}.defer;\
		f.value;\
		\{ ~dsp.refresh \}.defer;\
		(1/12).wait\
	\})\
	\
\}).play\
)\
\
r.stop\
\
\
~synths.do(_.free)\
\
\
~bufs.size\
\
\
\
\cf2 SynthDef\cf0 (\cf3 \\zone0_freeze\cf0 , \{\cf2 |out, amp, buf, rate, frz, wid, xang, yang, zang|\cf0 \
	\cf2 var\cf0  dur, fbuf, fft, sig, offs, rates;\
	offs = \cf2 ArrayControl\cf0 .kr(\cf3 \\offsets\cf0 , 4, \{\cf2 |i|\cf0  i * 4410\});\
	rates = \cf2 ArrayControl\cf0 .kr(\cf3 \\rates\cf0 , 4, 1);\
	dur = \cf2 BufDur\cf0 .kr(buf);\
	fbuf = \cf2 Array\cf0 .fill(4, \{ \cf2 LocalBuf\cf0 (1024) \});\
	sig = (\cf2 PlayBuf\cf0 .ar(1, buf, rates, offs)**0.5).clip(-1, 1) * \cf2 LFPulse\cf0 .kr(frz, 0, wid).range(0, 1) \
		* \cf2 EnvGen\cf0 .kr(\cf2 EnvControl\cf0 .kr, timeScale: dur, doneAction: 2);\
	fft = \cf2 Array\cf0 .fill(4, \{\cf2 |i|\cf0  \cf2 FFT\cf0 (fbuf@i, sig@i) \});\
	fft = \cf2 Array\cf0 .fill(4, \{\cf2 |i|\cf0  \cf2 IFFT\cf0 (\cf2 PV_Freeze\cf0 (fft@i, \cf2 LFPulse\cf0 .ar(frz, 0, wid))) \});\
	#w, x, y, z = \cf2 A2B\cf0 .ar(*fft);\
	\cf2 Out\cf0 .ar(out, \cf2 AtkRotateXYZ\cf0 .ar(w, x, y, z, xang, yang, zang) * amp)\
	\
\}).add;\
\
}