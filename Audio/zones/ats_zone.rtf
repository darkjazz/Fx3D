{\rtf1\ansi\ansicpg1252\cocoartf949\cocoasubrtf540
{\fonttbl\f0\fnil\fcharset238 Inconsolata;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red0\green115\blue0;\red0\green0\blue191;
\red191\green0\blue0;\red96\green96\blue96;\red96\green96\blue96;}
\deftab720
\pard\pardeftab720\ql\qnatural

\f0\fs24 \cf2 ~flt = (\
	\cf3 \\bpf\cf2 : \{\cf4 |src, freqs, rq, amps|\cf2  \cf4 BPF\cf2 .ar(src, freqs, rq, amps) \},\
	\cf3 \\eq\cf2 : \{\cf4 |src, freqs, rq, amps|\cf2  \cf4 MidEQ\cf2 .ar(src, freqs, rq, amps.ampdb) \},\
	\cf3 \\rhpf\cf2 : \{\cf4 |src, freqs, rq, amps|\cf2  \cf4 RHPF\cf2 .ar(src, freqs, rq, amps) \}\
);\
\
~nzw = (\
	\cf3 \\gray\cf2 : \{ \cf4 GrayNoise\cf2 .ar(0.01) \}, \
	\cf3 \\logistic\cf2 : \{\cf4 |freq|\cf2  \cf4 Logistic\cf2 .ar(freq.linlin(200.0, 20000.0, 3.5, 4.0, 3.99), freq, \
		freq.linlin(200.0, 20000.0, 0.2, 0.8, 0.8), 0.03) \},\
	\cf3 \\dust\cf2 : \{\cf4 |freq|\cf2  \cf4 Dust2\cf2 .ar(freq, 0.09) \}\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\ql\qnatural\pardirnatural
\cf2 );\
\
\pard\pardeftab720\ql\qnatural
\cf2 ~ndef = \{\cf4 |name, nfunc, ffunc, bFreq = false|\cf2 \
	\cf4 SynthDef\cf2 (name, \{\cf4 |out, efx, aamp, eamp, samp, dur, rate, buffer, rq, clip, doneAction = 2|\cf2 \
		\cf4 var\cf2  env, sig, args, bf, pointer, nsrc, filt, noise, azm, elv, rho;\
		env = \cf4 Control\cf2 .names([\cf3 \\env\cf2 ]).kr(\cf4 Env\cf2 .newClear(8).asArray);\
		azm = \cf4 EnvGen\cf2 .kr(\cf4 Control\cf2 .names([\cf3 \\azm\cf2 ]).kr(\cf4 Env\cf2 .newClear(8).asArray), timeScale: dur);\
		elv = \cf4 EnvGen\cf2 .kr(\cf4 Control\cf2 .names([\cf3 \\elv\cf2 ]).kr(\cf4 Env\cf2 .newClear(8).asArray), timeScale: dur);\
		rho = \cf4 EnvGen\cf2 .kr(\cf4 Control\cf2 .names([\cf3 \\rho\cf2 ]).kr(\cf4 Env\cf2 .newClear(8).asArray), timeScale: dur);\
		pointer = \cf4 LFSaw\cf2 .kr(rate, 1, 0.5, 0.5);\
		noise = \cf4 AtsNoise\cf2 .kr(buffer, (0..24), pointer);\
		if (bFreq)\
		\{\
			nsrc = \cf4 SynthDef\cf2 .wrap(nfunc, \cf4 nil\cf2 , ~cfreqs) * samp;\
		\}\
		\{\
			nsrc = \cf4 SynthDef\cf2 .wrap(nfunc) * samp;\
		\};\
		filt = \cf4 Mix\cf2 (\cf4 SynthDef\cf2 .wrap(ffunc, \cf4 nil\cf2 , [nsrc, ~cfreqs, ~cbands / ~cfreqs, noise]));\
		sig = (filt ** 0.5).clip2(clip) \
			* \cf4 EnvGen\cf2 .kr(env, timeScale: dur, doneAction: doneAction);\
		\cf4 Out\cf2 .ar(efx, sig * eamp);\
		bf = \cf4 BFEncode1\cf2 .ar(sig, azm, elv, rho);\
		\cf4 Out\cf2 .ar(out, bf * aamp);\
	\}).memStore;\
\};\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\ql\qnatural\pardirnatural
\cf2 ~nzw.keysValuesDo(\{\cf4 |skey, sfnc|\cf2 \
	~flt.keysValuesDo(\{\cf4 |fkey, ffnc|\cf2 \
		~noisedefs = ~noisedefs.add((fkey ++ skey).asSymbol);\
		~ndef.value((fkey ++ skey).asSymbol, sfnc, ffnc, (skey == \cf3 \\dust\cf2 ).or(skey == \cf3 \\lf0\cf2 ));\
	\})\
\});\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf2 	\
~triggerGrain = \{\cf4 |x, y, z, phase|\cf2 \
	\cf4 var\cf2  polar;\
	polar = \cf4 ZPoint\cf2 ( x - 8 / 8, y - 8 / 8, z - 8 / 8 ).asZPolar;\
	\cf4 Synth\cf2 .tail(~agrp, ~trigdefs.choose, \
		[\cf3 \\out\cf2 , ~abus, \cf3 \\efx\cf2 , ~rout, \
			\cf3 \\aamp\cf2 , rrand(0.5, 2.0), \
			\cf3 \\eamp\cf2 , 1.0, \cf3 \\samp\cf2 , 0.1, \
\cf5 //				\\dur, [~bps * 0.125, ~bps * 0.5, \\lin, 0.0625].asSpec.map( ~invalues.stddev ), \cf2 \
			\cf3 \\dur\cf2 , rrand(~bps * 0.125, ~bps * 0.5).round(0.0625),\
			\cf3 \\rate\cf2 , 1.0, \
			\cf3 \\buffer\cf2 , ~atsdata.choose.buffer, \cf3 \\rq\cf2 , 0.3, \cf3 \\clip\cf2 , 0.9])\
		.setn(\cf3 \\env\cf2 , \cf4 Env\cf2 ([0, 4, 0.5, 0.5, 0], [0.05, 0.05, 0.8, 0.1]).asArray)\
		.setn(\cf3 \\azm\cf2 , \cf4 Env\cf2 ([polar.theta, polar.theta], [1]).asArray )\
		.setn(\cf3 \\elv\cf2 , \cf4 Env\cf2 ([polar.phi, polar.phi], [1]).asArray )\
		.setn(\cf3 \\rho\cf2 , \cf4 Env\cf2 ([polar.rho, polar.rho], [1]).asArray)\
\};\
\
~trigdefs = ~noisedefs.select(\{\cf4 |def|\cf2  def.asString.contains(\cf6 "dust"\cf2 ).or(\cf0 def.asString.contains(\cf7 "logistic"\cf0 )\cf2 ) \});\
\
~tresp = \cf4 OSCresponderNode\cf2 (\cf4 nil\cf2 , \cf3 '/fx/trigger'\cf2 , \{\cf4 |ti, re, ms|\cf2 \
	~triggerGrain.value(ms[1], ms[2], ms[3], ms[4])\
\}).add;\
\
~tresp.remove\
\
~fx.startFx\
\
~serv.queryAllNodes\
}