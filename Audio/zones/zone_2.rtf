{\rtf1\ansi\ansicpg1252\cocoartf949\cocoasubrtf540
{\fonttbl\f0\fnil\fcharset238 Inconsolata;}
{\colortbl;\red255\green255\blue255;\red191\green0\blue0;\red0\green0\blue0;\red0\green0\blue191;
\red96\green96\blue96;\red0\green115\blue0;\red0\green0\blue191;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f0\fs24 \cf2 //alo allik. f(x).\cf3 \
(\
~loadAts = \cf4 true\cf3 ;\
~localDecoder = \cf4 true\cf3 ;\
~stereoOutput = \cf4 false\cf3 ;\
\cf5 "/Users/alo/Development/Fx3D/Audio/zones/initiate_zones.rtf"\cf3 .loadPath;\
)\
\
(\
\
	\cf4 SynthDef\cf3 (\cf6 \\point\cf3 , \{\cf4 |out, buf, tb, gate, amp, tfr, afr, sln, sfr, sam, rmp, rtm, doneAction|\cf3 \
		\cf4 var\cf3  sig = 0, trg, azm, elv, enc, dst, s_freqs, s_amps, s_sig, env, clk, atrg, rev;\
		env = \cf4 EnvControl\cf3 .kr(\cf6 \\env\cf3 );\
		dst = \cf4 LFTri\cf3 .kr(afr).range(1.0, 2.0);\
		azm = \cf4 Dseq\cf3 ([-0.25, 0.25] * pi, \cf4 inf\cf3 );\
		elv = \cf4 Dstutter\cf3 (2, \cf4 Dseq\cf3 ([0.25, -0.25], \cf4 inf\cf3 ));\
		trg = \cf4 InTrig\cf3 .kr(tb);\
		atrg = \cf4 K2A\cf3 .ar(trg);\
		sig = \cf4 PlayBuf\cf3 .ar(1, buf, trigger: trg) ** dst;\
		clk = \cf4 Mix\cf3 (\
			\cf4 BPF\cf3 .ar(\
			\cf4 PinkNoise\cf3 .ar(\cf4 Decay\cf3 .ar(atrg, 0.001 * \cf4 LFNoise1\cf3 .ar(4).abs)),\
\pard\pardeftab720\ql\qnatural
\cf3 			15000,\'a0\
			0.9,\'a0\
			25 * \cf4 LFNoise1\cf3 .ar(8).range(0, 1)\'a0\
			).fold(-1, 1)\
	     );	\
		s_sig = \cf4 SinOsc\cf3 .ar(sfr, 0, sam) \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf3 			* \cf4 EnvGen\cf3 .kr(\cf4 Env\cf3 ([0.001, 1.0, 1.0, 0.001], [0.0, 0.9, 0.1]), \
				\cf4 PulseDivider\cf3 .ar(trg, 2.0), timeScale: sln);\
		#sig, rev = \cf4 DistAmp\cf3 .ar(sig + s_sig + clk, dst, rmp);\
		sig = sig + \cf4 Reverb\cf3 .ar(rev, rtm);\
		enc = \cf4 BFEncode1\cf3 .ar(sig * amp, \cf4 Demand\cf3 .kr(trg, 0, azm), \cf4 Demand\cf3 .kr(trg, 0, elv) );\
		\cf4 Out\cf3 .ar(out, enc * \cf4 EnvGen\cf3 .kr(env, gate, doneAction: doneAction))\
	\}).memStore;\
\
	\cf4 SynthDef\cf3 (\cf6 \\zone2ats\cf3 , \{\cf4 |out, bufnum, rate, amp, dur, dust, bw, rtime, damp, inbw, early, tail, \
			transpose, xang, yang, zang|\cf3 \
		\cf4 var\cf3  sig, pointer, partials, freqs, amps, src, srcbf, sigbf, rv, rvbf, a, b, c, d, w, x, y, z, env;\
		partials = (0..99);\
		pointer = \cf4 LFNoise2\cf3 .kr(1/\cf4 BufDur\cf3 .kr(bufnum)*rate, 0.5, 0.5);\
		freqs = \cf4 AtsFreq\cf3 .kr(bufnum, partials, pointer);\
		amps = \cf4 AtsAmp\cf3 .kr(bufnum, partials, pointer);\
		env = \cf4 EnvGen\cf3 .kr(\cf4 EnvControl\cf3 .kr, timeScale: dur, doneAction: 2);\
		src = \cf4 Mix\cf3 (\cf4 VarSaw\cf3 .ar(freqs * transpose, amps * 2pi, amps, amps)) * amp ;\
			\cf2 //* LFPulse.kr(LFNoise0.kr(0.5, 4, 5), 0, amp, amp, 1);\cf3 \
\cf2 //		src = Mix(BPF.ar(LFNoise2.ar(freqs, amps), freqs, bw / freqs, amps));\cf3 \
		rv = \cf4 GVerb\cf3 .ar(src + \
			\cf4 Dust2\cf3 .ar(dust, src), 1000.0, rtime, damp, inbw, 15, 0.0, early, tail, 1000.0);\
		a = rv[0] + (src * 0.5);\
		b = src + (rv[1] * 0.5);\
		c = src + (rv[0] * 0.5);\
		d = rv[1] + (src * 0.5);\
		#w, x, y, z = \cf4 A2B\cf3 .ar(a, b, c, d) * env;\
		\cf4 Out\cf3 .ar(out, \cf4 AtkRotateXYZ\cf3 .ar(w, x, y, z, xang, yang, zang))\
	\}).memStore;\
	\
	~zone2map = (\
		\cf6 \\dust\cf3 : \cf4 LinearWarp\cf3 (\cf4 ControlSpec\cf3 (10, 100)),\
		\cf6 \\xang\cf3 : \cf7 LinearWarp\cf0 (\cf7 ControlSpec\cf0 (-pi, pi))\cf3 ,\
		\cf6 \\yang\cf3 : \cf4 LinearWarp\cf3 (\cf4 ControlSpec\cf3 (-pi, pi)),\
		\cf6 \\zang\cf3 : \cf4 LinearWarp\cf3 (\cf4 ControlSpec\cf3 (pi, -pi))\
	);\
	\
	~mapGlobals = \{\
		\cf4 var\cf3  back, front;\
		front = (		\
			\cf6 \\dust\cf3 : ~invalues.avglbf,\
			\cf6 \\xang\cf3 : ~invalues.avgrbf,\
			\cf6 \\yang\cf3 : ~invalues.avgltf,\
			\cf6 \\zang\cf3 : ~invalues.avgrtf\
		);\
		back = (\
			\cf6 \\dust\cf3 : ~invalues.avgrbb,\
			\cf6 \\xang\cf3 : ~invalues.avglbb,\
			\cf6 \\yang\cf3 : ~invalues.avgrtb,\
			\cf6 \\zang\cf3 : ~invalues.avgltb		\
		);\
		~synths[0].set(*~zone2map.collect(\{\cf4 |spec, key|\cf3  spec.map(front[key]) \}).asKeyValuePairs );\
		~synths[1].set(*~zone2map.collect(\{\cf4 |spec, key|\cf3  spec.map(back[key]) \}).asKeyValuePairs );\
	\};	\
)\
\
~fx.startFx\
\
(	\
	if (~invalues.isNil) \{ ~invalues = () \};\
\
	~glresp = \cf4 OSCresponderNode\cf3 (\cf4 nil\cf3 , \cf6 '/fx/globals'\cf3 , \{\cf4 |ti, re, ms|\cf3 \
\pard\tx480\pardeftab480\ql\qnatural\pardirnatural
\cf3 \CocoaLigature0 		\cf4 var\cf3  cmd, avg, sdev, albf, arbf, arbb, albb, altf, artf, artb, altb;\
					\CocoaLigature1 \
		#cmd, \CocoaLigature0 avg, sdev, albf, arbf, arbb, albb, altf, artf, artb, altb\CocoaLigature1  = ms;\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf3 		~invalues.avgstate = avg;\
		~invalues.stddev = sdev;\
	\
		~invalues.avglbf = albf;\
		~invalues.avgrbf = arbf;\
		~invalues.avgrbb = arbb;\
		~invalues.avglbb = albb;\
		~invalues.avgltf = altf;\
		~invalues.avgrtf = artf;\
		~invalues.avgrtb = artb;\
		~invalues.avgltb = altb;\
		\
		~mapGlobals.value;\
	\
	\}).add;\
	\
	~zone2data = ~atsdata.select(\{\cf4 |data|\cf3  data.file.contains(\cf5 "sumeloop"\cf3 ).and(data.nparts > 100) \});\
	\
\cf2 //	~point = Synth(\\point, [\\out, ~abus, \\buf, ~pointbuf, \\tb, ~tr, \\gate, 1.0, \\amp, 8.0, \cf3 \
\cf2 //		\\tfr, 4.0, \\afr, 0.05, \\sln, 0.2, \\sfr, 10000, \\sam, 0.5, \\doneAction, 2])\cf3 \
\cf2 //		.setn(\\env, Env([0.001, 1.0, 1.0, 0.001], [0.3, 0.4, 0.3], \\sine, 2, 1).asArray);\cf3 \
		\
	~synths = \cf4 Array\cf3 .newClear(2);\
	\
	\cf4 Routine\cf3 (\{\
		\cf4 var\cf3  time = \cf4 SystemClock\cf3 .seconds;	\
		~zone2data.do(\{\cf4 |data, i|\cf3 \
			\cf4 var\cf3  synth;\
			~synths.put(i.wrap(0, 1), \
				\cf4 Synth\cf3 (\cf6 \\zone2ats\cf3 , [\cf6 \\out\cf3 , ~abus, \cf6 \\bufnum\cf3 , data.buffer, \cf6 \\rate\cf3 , 0.1, \cf6 \\dust\cf3 , 10,\
				\cf6 \\rtime\cf3 , 10, \cf6 \\damp\cf3 , 0.5, \cf6 \\inbw\cf3 , 0.5, \cf6 \\early\cf3 , 0.2, \cf6 \\tail\cf3 , 1.0, \cf6 \\bw\cf3 , 10,\
				\cf6 \\transpose\cf3 , 1, \cf6 \\xang\cf3 , 0, \cf6 \\yang\cf3 , 0, \cf6 \\zang\cf3 , 0, \cf6 \\amp\cf3 , 0.3, \cf6 \\dur\cf3 , 40\
				]).setn(\cf6 \\env\cf3 , \cf4 Env\cf3 ([0, 1, 1, 0], [0.45, 0.1, 0.45], \cf6 'sine'\cf3 ))\
			);\
			20.wait;\
		\});\
		(\cf5 "Zone 2 will be finished in 10 seconds"\cf3 ).warn;\
	\}).play\
\
)}