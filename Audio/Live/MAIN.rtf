{\rtf1\ansi\ansicpg1252\cocoartf949\cocoasubrtf540
{\fonttbl\f0\fnil\fcharset238 Inconsolata;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red0\green0\blue191;\red96\green96\blue96;
\red0\green115\blue0;\red191\green0\blue0;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f0\fs24 \cf2 (\
~loadAts = \cf3 true\cf2 ;\
~localDecoder = \cf3 true\cf2 ;\
~stereoOutput = \cf3 true\cf2 ;\
~livepath = \cf4 "/Users/alo/Development/Fx3D/Audio/Live/"\cf2 ;\
(~livepath ++ \cf4 "initiate_live.rtf"\cf2 ).load;\
)\
\
~loops.do(\cf3 _\cf2 .postln)\
\
	~fx.startFx\
\
	(~livepath ++ \cf4 "start_live_synths.rtf"\cf2 ).load;\
\
(\
(~livepath ++ \cf4 "synthdefs.rtf"\cf2 ).load;\
\
~fx.initLive;\
\
~fx.addGlobalsResponder;\
~fx.addStatesResponder;\
~fx.addTriggerResponder;\
\
~fx.perfGui.assignPanel(0, \{\cf3 |panel|\cf2 \
	\cf3 var\cf2  colors, fonts;\
	colors = (\
		\cf5 \\blue\cf2 : \cf3 Color\cf2 .new255(28, 134, 238),\
		\cf5 \\orange\cf2 : \cf3 Color\cf2 .new255(184, 134, 11),\
		\cf5 \\steel\cf2 : \cf3 Color\cf2 .new255(4, 50, 89)\
	);\
	fonts = (\
		\cf5 \\lucida9\cf2 : \cf3 Font\cf2 (\cf4 "Lucida Grande"\cf2 , 9),\
		\cf5 \\lucida11\cf2 : \cf3 Font\cf2 (\cf4 "Lucida Grande"\cf2 , 11),\
		\cf5 \\skia\cf2 : \cf3 Font\cf2 (\cf4 "Skia"\cf2 , 9) \
	);\
	\cf3 RoundButton\cf2 (panel, \cf3 Rect\cf2 (5, 5, panel.bounds.width - 10, 25))\
		.states_([[\cf4 "initialize"\cf2 , colors.orange, colors.steel ]])\
		.font_(fonts.lucida11)\
		.action_(\{\
\pard\pardeftab720\ql\qnatural
\cf2 		~z0mapping = (\
		\
			\cf5 \\freeze\cf2  : (\
				\cf5 \\xang\cf2 : \cf3 LinearWarp\cf2 (\cf3 ControlSpec\cf2 (-pi, pi, step: pi/8)),\
				\cf5 \\yang\cf2 : \cf3 LinearWarp\cf2 (\cf3 ControlSpec\cf2 (-pi, pi, step: pi/8)),\
				\cf5 \\zang\cf2 : \cf3 LinearWarp\cf2 (\cf3 ControlSpec\cf2 (-pi, pi, step: pi/8)),\
				\cf5 \\aa\cf2 : \cf3 LinearWarp\cf2 (\cf3 ControlSpec\cf2 (0.5, 1.0, step: 0.1)),\
				\cf5 \\ab\cf2 : \cf3 LinearWarp\cf2 (\cf3 ControlSpec\cf2 (0.5, 1.0, step: 0.1)),\
				\cf5 \\ac\cf2 : \cf3 LinearWarp\cf2 (\cf3 ControlSpec\cf2 (0.5, 1.0, step: 0.1)),\
				\cf5 \\ad\cf2 : \cf3 LinearWarp\cf2 (\cf3 ControlSpec\cf2 (0.5, 1.0, step: 0.1))\
			),\
			\
			\cf5 \\zone0_grain\cf2 : (\
				\cf5 \\tdev\cf2 : \cf3 CyclicWarp\cf2 (\cf3 ControlSpec\cf2 (0.0, 0.01, step: 0.001)),\
				\cf5 \\tfrq\cf2 : \cf3 CyclicWarp\cf2 (\cf3 ControlSpec\cf2 (32, 4, step: 8)),\
				\cf5 \\gdur\cf2 : \cf3 CyclicWarp\cf2 (\cf3 ControlSpec\cf2 (0.004, 0.08, step:0.004)),\
				\cf5 \\pos\cf2 : \cf3 CyclicWarp\cf2 (\cf3 ControlSpec\cf2 (0.0, 1.0, step: 1/16)),\
				\cf5 \\envf\cf2 : \cf3 CyclicWarp\cf2 (\cf3 ControlSpec\cf2 (0.0, 1.0, step: 1/8)),\
				\cf5 \\aamp\cf2 : \cf3 ExponentialWarp\cf2 (\cf3 ControlSpec\cf2 (2.0, 0.6))\
			)\
		);\
		~z0atkspecarrays = (\
			\cf5 \\regionshalf\cf2 : \cf3 Array\cf2 .fill(8, \{\cf3 |i|\cf2  [i*(0.2pi/8)-0.1pi, i*(0.2pi/8)+(0.2pi/8)-0.1pi].asSpec \}),\
			\cf5 \\regionsfull\cf2 : \cf3 Array\cf2 .fill(8, \{\cf3 |i|\cf2  [i*(pi/4)-pi, i*(pi/4)+(pi/4)-pi].asSpec \}),\
			\cf5 \\rangehalf\cf2 : \cf3 Array\cf2 .fill(8, \{\cf3 |i|\cf2  [-0.1pi, 0.1pi].asSpec \}),\
			\cf5 \\rangefull\cf2 : \cf3 Array\cf2 .fill(8, \{\cf3 |i|\cf2  [-pi, pi].asSpec \}),\
			\cf5 \\randregionshalf\cf2 : \cf3 Array\cf2 .fill(8, \{ [0.1pi.rand2, 0.1pi.rand2].asSpec \}), \
			\cf5 \\randregionsfull\cf2 : \cf3 Array\cf2 .fill(8, \{ [pi.rand2, pi.rand2].asSpec \}),\
			\cf5 \\joinregionshalf\cf2 : \cf3 Array\cf2 .fill(8, \{\cf3 |i|\cf2  [i*(0.2pi/9)-0.1pi, i*(0.2pi/9)+(0.2pi/4.5)-0.1pi].asSpec \}),\
			\cf5 \\joinregionsfull\cf2 : \cf3 Array\cf2 .fill(8, \{\cf3 |i|\cf2   [i*(pi/4.5)-pi, i*(pi/4.5)+(pi/2.25)-pi].asSpec \})\
		);\
		~z0atkparams = (\
			\cf5 \\rX\cf2 : ~z0atkspecarrays.joinregionsfull.collect(\{\cf3 |spec|\cf2  \cf3 LinearWarp\cf2 (spec) \}),\
			\cf5 \\rY\cf2 : ~z0atkspecarrays.regionsfull.collect(\{\cf3 |spec|\cf2  \cf3 LinearWarp\cf2 (spec) \}),\
			\cf5 \\rZ\cf2 : ~z0atkspecarrays.rangefull.collect(\{\cf3 |spec|\cf2  \cf3 LinearWarp\cf2 (spec) \}),\
			\cf5 \\pX\cf2 : ~z0atkspecarrays.regionshalf.collect(\{\cf3 |spec|\cf2  \cf3 LinearWarp\cf2 (spec) \}),\
			\cf5 \\pY\cf2 : ~z0atkspecarrays.rangehalf.collect(\{\cf3 |spec|\cf2  \cf3 LinearWarp\cf2 (spec) \}),\
			\cf5 \\pZ\cf2 : ~z0atkspecarrays.joinregionshalf.collect(\{\cf3 |spec|\cf2  \cf3 LinearWarp\cf2 (spec) \})\
		);\
		~z0envs = (\
			\cf5 \\gauss\cf2 : \cf3 Env\cf2 .sine,\
			\cf5 \\quasigauss\cf2 : \cf3 Env\cf2 ([0.001, 1.0, 1.0, 0.001], [0.3, 0.4, 0.3], \cf5 \\sine\cf2 ),\
			\cf5 \\perc\cf2 : \cf3 Env\cf2 .perc,\
			\cf5 \\reversed\cf2 : \cf3 Env\cf2 ([0.001, 1.0, 0.001], [0.95, 0.05], \cf5 \\sine\cf2 ),\
			\cf5 \\triangle\cf2 : \cf3 Env\cf2 .triangle,\
			\cf5 \\linear\cf2 : \cf3 Env\cf2 ([0.001, 1.0, 1.0, 0.001], [0.3, 0.4, 0.3]),\
			\cf5 \\sine\cf2 : \cf3 InterplPairs\cf2 ([[0.0, 0.0], [0.2, 0.1], [0.25, -0.1], [0.5, 1.0], [0.75, -0.1], \
				[0.8, 0.1], [1.0, 0.0]], \cf5 \\sin\cf2 ).asEnv\
		).collect(\{\cf3 |env|\cf2  \cf3 Buffer\cf2 .sendCollection(~serv, env.discretize) \}); \
		\
		~z0loops = ~loops.select(\{\cf3 |buf|\cf2  \
			buf.path.contains(\cf4 "monooop"\cf2 )\
		\});\
		\
\cf6 //		~z0ats = ~atsdata.select(\{|data|\cf2 \
\cf6 //			data.file.contains("monooop")\cf2 \
\cf6 //		\});\cf2 \
\
		~z0ats = ~atsdata;\
				\
		~z0atsbufspec = \cf3 ControlSpec\cf2 (0, ~z0ats.size - 1, step: 1);\
		\
		~trigdefs = ~noisedefs.select(\{\cf3 |def|\cf2  def.asString.contains(\cf4 "dust"\cf2 ) \});	\
		\
		\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf2 			\
		\});\
		\
		\cf3 RoundButton\cf2 (panel, \cf3 Rect\cf2 (5, 35, panel.bounds.width / 2 - 5, 25))\
			.states_([[\cf4 "states OFF"\cf2 , colors.orange, colors.steel ], [\cf4 "states ON"\cf2 , colors.steel, colors.orange ]])\
			.font_(fonts.lucida9)\
			.action_(\{\cf3 |bt|\cf2 \
				if (bt.value == 1)\
				\{\
					~fx.addStatesFunction(\cf5 \\zone0\cf2 , \{\cf3 |invalues|\cf2 \
\pard\pardeftab720\ql\qnatural
\cf2 				\
					\cf3 var\cf2  params = invalues.states.clump(8);\
					~z0synths.do(\{\cf3 |synth, i|\cf2 \
						\cf3 var\cf2  states, args;\
						if (synth.notNil)\
						\{\
							states = \cf3 Pseq\cf2 (params[i], \cf3 inf\cf2 ).asStream;				\
							args = ~z0mapping[synth.defName.asSymbol].collect(\{\cf3 |spec|\cf2  \
								spec.map(states.next) \
							\});\
							synth.set(*args.asKeyValuePairs);						\
						\};\
					\});\
						\
					~z0transforms.do(\{\cf3 |synth, i|\cf2 \
						\cf3 var\cf2  j = 0;\
						synth.set(*~z0atkparams.collect(\{\cf3 |specarr|\cf2  \
								j = j + 1;\
								specarr[i * 2].map(params[i + 4][j]) \
							\}).asKeyValuePairs\
						)					\
					\})\
											\
				\});				\
				\}\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf2 				\{\
					~fx.removeStatesFunction(\cf5 \\zone0\cf2 )	\
				\}\
			\});\
		\
		~z0ns = [0.5, 0.2, \cf5 \\exp\cf2 ].asSpec;\
			\
		\cf3 RoundButton\cf2 (panel, \cf3 Rect\cf2 (panel.bounds.width / 2, 35, panel.bounds.width / 2 - 5, 25))\
			.states_([[\cf4 "trig OFF"\cf2 , colors.orange, colors.steel ], [\cf4 "trig ON"\cf2 , colors.steel, colors.orange ]])\
			.font_(fonts.lucida9)\
			.action_(\{\cf3 |bt|\cf2 \
				if (bt.value == 1)\
				\{\
					~fx.addTriggerFunction(\cf5 \\zone0\cf2 , \{\cf3 |invalues|\cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\ql\qnatural\pardirnatural
\cf2 						\cf3 var\cf2  polar, data;\
						polar = \cf3 ZPoint\cf2 ( invalues.coordX - 8 / 8, invalues.coordY - 8 / 8, \
							invalues.coordZ - 8 / 8 ).asZPolar;\
						data = ~z0ats[~z0atsbufspec.map(1.0 - invalues.states[(4..7)].mean)];\
						\cf3 Synth\cf2 .tail(~agrp, ~trigdefs.choose, \
							[\cf5 \\out\cf2 , ~abus, \cf5 \\efx\cf2 , ~rout, \
								\cf5 \\aamp\cf2 , ~z0ns.map( invalues.states[(0..3)].mean ), \
								\cf5 \\eamp\cf2 , 1.0, \cf5 \\samp\cf2 , 0.1, \
								\cf5 \\dur\cf2 , [0.1, 1.0].asSpec.map(invalues.states[(30..33)].mean),\
								\cf5 \\rate\cf2 , 8.0 , \
								\cf5 \\buffer\cf2 , data.buffer, \cf5 \\rq\cf2 , 0.3, \cf5 \\clip\cf2 , 0.9])\
							.setn(\cf5 \\env\cf2 , \cf3 Env\cf2 ([0, 1, 0.5, 0.5, 0], [0.05, 0.05, 0.8, 0.1]).asArray)\
							.setn(\cf5 \\azm\cf2 , \cf3 Env\cf2 ([polar.theta - 0.1pi, polar.theta + 0.1pi], [1]).asArray )\
							.setn(\cf5 \\elv\cf2 , \cf3 Env\cf2 ([polar.phi + 0.1pi, polar.phi - 0.1pi], [1]).asArray )\
							.setn(\cf5 \\rho\cf2 , \cf3 Env\cf2 ([polar.rho + 0.2, polar.rho - 0.2], [1]).asArray)\
					 \});				\
\pard\pardeftab720\ql\qnatural
\cf2 			\}\
			\{\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf2 					~fx.removeTriggerFunction(\cf5 \\zone0\cf2 )\
\pard\pardeftab720\ql\qnatural
\cf2 			\}\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf2 			\});\
		\
		\cf3 RoundButton\cf2 (panel, \cf3 Rect\cf2 (5, 65, panel.bounds.width / 2 - 5, 25))\
			.states_([[\cf4 "atk OFF"\cf2 , colors.orange, colors.steel ], [\cf4 "atk ON"\cf2 , colors.steel, colors.orange ]])\
			.font_(fonts.lucida9)\
			.action_(\{\cf3 |bt|\cf2 \
				if (bt.value == 1)\
				\{\
					~z0trgroup = \cf3 Group\cf2 .head(~agrp);\
					\
					~z0trbus = \cf3 Array\cf2 .fill(4, \{\cf3 |i|\cf2  \cf3 Bus\cf2 .audio(~serv, 4) \});\
					\
					~z0transforms = \cf3 Array\cf2 .fill(4, \{\cf3 |i|\cf2 \
						\cf3 Synth\cf2 .tail(~z0trgroup, \cf5 \\atk_zone0\cf2 , [\cf5 \\out\cf2 , ~abus, \cf5 \\in\cf2 , ~z0trbus@i])\
					\});\
					\
					~z0synths = \cf3 Array\cf2 .newClear(5);\
\pard\pardeftab720\ql\qnatural
\cf2 			\}\
			\{\
				~z0transforms.do(\cf3 _\cf2 .free);\
				~z0transforms = \cf3 nil\cf2 ;\
				~z0trbus.do(\cf3 _\cf2 .free);\
				~z0trbus = \cf3 nil\cf2 ;\
				~z0trgroup.free;\
				~z0trgroup = \cf3 nil\cf2 ;\
			\}\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf2 			\});\
\
		\cf3 RoundButton\cf2 (panel, \cf3 Rect\cf2 (panel.bounds.width / 2, 65, panel.bounds.width / 2 - 5, 25))\
			.states_([[\cf4 "frz OFF"\cf2 , colors.orange, colors.steel ], [\cf4 "frz ON"\cf2 , colors.steel, colors.orange ]])\
			.font_(fonts.lucida9)\
			.action_(\{\cf3 |bt|\cf2 \
				if (bt.value == 1)\
				\{\
					~z0synths.put(0,\
						\cf3 Synth\cf2 .before(~z0trgroup, \cf5 \\freeze\cf2 , [\cf5 \\out\cf2 , ~z0trbus[0], \cf5 \\gate\cf2 , 1.0, \cf5 \\tgate\cf2 , 1/30, \cf5 \\dur\cf2 , 30, \
							\cf5 \\maxdel\cf2 , 0.1, \cf5 \\room\cf2 , 1500, \cf5 \\damp\cf2 , 0.5, \cf5 \\inbw\cf2 , 0.5, \cf5 \\spr\cf2 , 20, \cf5 \\early\cf2 , 0.2, \cf5 \\tail\cf2 , 1.0, \
							\cf5 \\doneAction\cf2 , 2])\
							 	.setn(\cf5 \\bw\cf2 , \cf3 Env\cf2 ([100.0, 1000.0, 100.0], [20, 0.0], [6, -4]).asArray)\
							 	.setn(\cf5 \\fq\cf2 , \cf3 Env\cf2 ([15000.0, 6000.0, 15000.0], [20, 0.0], [6, -4]).asArray)\
							 	.setn(\cf5 \\amp\cf2 , \cf3 Env\cf2 ([0.01, 0.6, 0.01], [20, 0], [6, -4]).asArray)\
							 	.setn(\cf5 \\rt\cf2 , \cf3 Env\cf2 ([60, 1, 60], [20, 10], [4, -4]).asArray)\
							 	.setn(\cf5 \\env\cf2 , \cf3 Env\cf2 ([0.001, 1.0, 1.0, 0.001], [0.3, 0.4, 0.3], \cf5 \\sine\cf2 , 2, 1).asArray)\
								.setn(\cf5 \\delays\cf2 , \cf3 Array\cf2 .geom(4, 0.01, 1.618).scramble)\
								.setn(\cf5 \\shifts\cf2 , [1.0, 35/36, 16/15, 36/35])\
					);\
\pard\pardeftab720\ql\qnatural
\cf2 			\}\
			\{\
				~z0synths[0].set(\cf5 \\gate\cf2 , -30.0);\
				~z0synths[0] = \cf3 nil\cf2 ;\
			\}\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf2 			\});\
\
		4.do(\{\cf3 |i|\cf2 \
			\cf3 RoundButton\cf2 (panel, \cf3 Rect\cf2 (i * 45 + 5, 95, panel.bounds.width / 4 - 5, 25))\
				.states_([[i.asString ++ \cf4 " off"\cf2 , colors.orange, colors.steel ], \
					[i.asString ++ \cf4 " on"\cf2 , colors.steel, colors.orange ]])\
				.font_(fonts.lucida9)\
				.action_(\{\cf3 |bt|\cf2 \
					if (bt.value == 1)\
					\{\
						~z0synths.put(i + 1,\
							\cf3 Synth\cf2 .before(~z0trgroup, \cf5 \\zone0_grain\cf2 , [\cf5 \\out\cf2 , ~z0trbus@i, \cf5 \\efx\cf2 , 99, \cf5 \\gate\cf2 , 1.0, \
								\cf5 \\dur\cf2 , 10.0, \
								\cf5 \\buffer\cf2 , ~z0loops[i], \cf5 \\maxdel\cf2 , 0.1, \cf5 \\brate\cf2 , 1.0, \cf5 \\envA\cf2 , ~z0envs.perc, \
								\cf5 \\envB\cf2 , ~z0envs.sine])\
									.setn(\cf5 \\env\cf2 , \
										\cf3 Env\cf2 ([0.001, 1.0, 1.0, 0.001], [0.5, 0.2, 0.3], [6, 0, -2], 2, 1).asArray)\
									.setn(\cf5 \\delays\cf2 , ([0.0] ++ \cf3 Array\cf2 .geom(3, 0.01, 1.618)).scramble )\
									.setn(\cf5 \\shifts\cf2 , [1.0, 35/36, 0.5, 36/35])\
						);\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\ql\qnatural\pardirnatural
\cf2 					\}\
					\{\
						~z0synths[i + 1].set(\cf5 \\gate\cf2 , -10.0);\
						~z0synths[i + 1] = \cf3 nil\cf2 ;\
					\}\
\pard\pardeftab720\ql\qnatural
\cf2 			\});		\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf2 		\
		\});\
		\
		~z0items = (\
			\cf5 \\oop_0_3\cf2 : \{  \
				\cf3 Routine\cf2 (\{\
\pard\pardeftab720\ql\qnatural
\cf2 				~z0loops = ~loops.select(\{\cf3 |it|\cf2  it.path.contains(\cf4 "monooop"\cf2 ) \});\
				~z0synths.do(\{\cf3 |syn, i|\cf2 \
					if (syn.notNil)\
					\{\
						syn.set(\cf5 \\buffer\cf2 , ~z0loops[i]);\
						4.wait;\
					\}\
				\});\
				\cf4 "zone 0 loops change complete"\cf2 .postln;		\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf2 				\}).play\
			\},\
			\cf5 \\oop_4_7\cf2 : \{  \
				\cf3 Routine\cf2 (\{\
\pard\pardeftab720\ql\qnatural
\cf2 				~z0loops = ~loops.select(\{\cf3 |it|\cf2  it.path.contains(\cf4 "monooop"\cf2 ) \});\
				~z0synths.do(\{\cf3 |syn, i|\cf2 \
					if (syn.notNil)\
					\{\
						syn.set(\cf5 \\buffer\cf2 , ~z0loops[i + 4]);\
						4.wait;\
					\}\
				\});		\
				\cf4 "zone 0 loops change complete"\cf2 .postln;		\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf2 				\}).play\
			\},\
			\cf5 \\oop_rand\cf2 : \{  \
				\cf3 Routine\cf2 (\{\
\pard\pardeftab720\ql\qnatural
\cf2 				~z0loops = ~loops.select(\{\cf3 |it|\cf2  it.path.contains(\cf4 "monooop"\cf2 ) \});\
				~z0synths.do(\{\cf3 |syn, i|\cf2 \
					if (syn.notNil)\
					\{\
						syn.set(\cf5 \\buffer\cf2 , ~z0loops.choose);\
						4.wait;\
					\}\
				\});		\
				\cf4 "zone 0 loops change complete"\cf2 .postln;		\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf2 				\}).play\
			\},\
			\cf5 \\sum_4_7\cf2 : \{  \
				\cf3 Routine\cf2 (\{\
\pard\pardeftab720\ql\qnatural
\cf2 				~z0loops = ~loops.select(\{\cf3 |it|\cf2  it.path.contains(\cf4 "sumeloop"\cf2 ) \});\
				~z0synths.do(\{\cf3 |syn, i|\cf2 \
					if (syn.notNil)\
					\{\
						syn.set(\cf5 \\buffer\cf2 , ~z0loops[i + 4]);\
						4.wait;\
					\}\
				\});\
				\cf4 "zone 0 loops change complete"\cf2 .postln;		\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf2 				\}).play\
			\},\
			\cf5 \\mem_rand\cf2 : \{  \
				\cf3 Routine\cf2 (\{\
\pard\pardeftab720\ql\qnatural
\cf2 				~z0loops = ~loops.select(\{\cf3 |it|\cf2  it.path.contains(\cf4 "memorloop"\cf2 ) \});\
				~z0synths.do(\{\cf3 |syn, i|\cf2 \
					if (syn.notNil)\
					\{\
						syn.set(\cf5 \\buffer\cf2 , ~z0loops.choose);\
						4.wait;\
					\}\
				\});		\
				\cf4 "zone 0 loops change complete"\cf2 .postln;		\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf2 				\}).play\
			\}\
		);\
		\
		~z0pm = \cf3 SCPopUpMenu\cf2 (panel, \cf3 Rect\cf2 (5, 155, panel.bounds.width / 1.5 - 5, 25))\
			.background_(colors.steel)\
			.font_(fonts.lucida9)			\
			.stringColor_(colors.orange)\
			.items_(~z0items.keys(\cf3 Array\cf2 ).sort);\
		\
		\cf3 RoundButton\cf2 (panel, \cf3 Rect\cf2 (panel.bounds.width / 1.5 + 5, 155, panel.bounds.width / 3 - 10, 25))\
			.font_(fonts.lucida9)\
			.states_([[\cf4 "send"\cf2 , colors.orange, colors.steel]])\
			.action_(\{\
				~z0items[~z0pm.items[~z0pm.value].asSymbol].value\
			\});\
		\
		~z0smspecs = (\
			\cf5 \\tfrq\cf2 : \cf3 LinearWarp\cf2 (\cf3 ControlSpec\cf2 (32, 256, step: 8)),\
			\cf5 \\gdur\cf2 : \cf3 LinearWarp\cf2 (\cf3 ControlSpec\cf2 (0.08, 1.6, step: 0.004)),\
			\cf5 \\aamp\cf2 : \cf3 LinearWarp\cf2 (\cf3 ControlSpec\cf2 (2.0, 4.0)),\
			\cf5 \\z0ns\cf2 : \cf3 LinearWarp\cf2 (\cf3 ControlSpec\cf2 (0.5, 2.0))\
		);\
\
		\cf3 SmoothSlider\cf2 (panel, \cf3 Rect\cf2 (0 * 45 + 5, 215, panel.bounds.width / 4 - 5, 140))\
			.action_(\{\cf3 |sl|\cf2 \
				~z0mapping[\cf5 \\zone0_grain\cf2 ][\cf5 \\tfrq\cf2 ].spec.minval = ~z0smspecs[\cf5 \\tfrq\cf2 ].map(sl.value)\
			\});\
		\cf3 SmoothSlider\cf2 (panel, \cf3 Rect\cf2 (1 * 45 + 5, 215, panel.bounds.width / 4 - 5, 140))\
			.action_(\{\cf3 |sl|\cf2 \
				~z0mapping[\cf5 \\zone0_grain\cf2 ][\cf5 \\gdur\cf2 ].spec.maxval = ~z0smspecs[\cf5 \\gdur\cf2 ].map(sl.value)\
			\});\
		\cf3 SmoothSlider\cf2 (panel, \cf3 Rect\cf2 (2 * 45 + 5, 215, panel.bounds.width / 4 - 5, 140))\
			.action_(\{\cf3 |sl|\cf2 \
				~z0mapping[\cf5 \\zone0_grain\cf2 ][\cf5 \\aamp\cf2 ].spec.minval = ~z0smspecs[\cf5 \\aamp\cf2 ].map(sl.value)\
			\});\
		\cf3 SmoothSlider\cf2 (panel, \cf3 Rect\cf2 (3 * 45 + 5, 215, panel.bounds.width / 4 - 5, 140))\
			.action_(\{\cf3 |sl|\cf2 \
				~z0ns.minval = ~z0smspecs[\cf5 \\z0ns\cf2 ].spec.map(sl.value)\
			\});\
			\
		[\cf4 "tfrq"\cf2 , \cf4 "gdur"\cf2 , \cf4 "aamp"\cf2 , \cf4 "nzamp"\cf2  ].do(\{\cf3 |txt, i|\cf2 \
			\cf3 SCStaticText\cf2 (panel, \cf3 Rect\cf2 (i * 45 + 5, 215, panel.bounds.width / 4 - 5, 25))\
				.font_(fonts.skia)\
				.stringColor_(colors.orange)\
				.align_(\cf5 \\center\cf2 )\
				.string_(txt)\
		\})\
				\
\});\
\
~fx.perfGui.assignPanel(1, \{\cf3 |panel|\cf2 \
	\cf3 var\cf2  colors, fonts;\
	colors = (\
		\cf5 \\blue\cf2 : \cf3 Color\cf2 .new255(28, 134, 238),\
		\cf5 \\orange\cf2 : \cf3 Color\cf2 .new255(184, 134, 11),\
		\cf5 \\steel\cf2 : \cf3 Color\cf2 .new255(4, 50, 89)\
	);\
	fonts = (\
		\cf5 \\lucida9\cf2 : \cf3 Font\cf2 (\cf4 "Lucida Grande"\cf2 , 9),\
		\cf5 \\lucida11\cf2 : \cf3 Font\cf2 (\cf4 "Lucida Grande"\cf2 , 11),\
		\cf5 \\skia\cf2 : \cf3 Font\cf2 (\cf4 "Skia"\cf2 , 9) \
	);\
	\cf3 RoundButton\cf2 (panel, \cf3 Rect\cf2 (5, 5, panel.bounds.width - 10, 25))\
		.states_([[\cf4 "initialize"\cf2 , colors.orange, colors.steel ]])\
		.font_(fonts.lucida11)\
		.action_(\{\
			~z1paramspecs = (\
				\cf5 \\aamp\cf2 : \cf3 Array\cf2 .fill(8, \{\cf3 |i|\cf2  \cf3 CyclicWarp\cf2 ([i * 0.03 + 0.2, 2.0 - (i * 0.1)].asSpec) \}).reverse,\
				\cf5 \\str\cf2 : \cf3 Array\cf2 .fill(8, \{\cf3 |i|\cf2  \cf3 CyclicWarp\cf2 ([0.0, 0.5].asSpec) \}),\
				\cf5 \\end\cf2 : \cf3 Array\cf2 .fill(8, \{\cf3 |i|\cf2  \cf3 CyclicWarp\cf2 ([0.5, 1.0].asSpec) \}),\
				\cf5 \\eamp\cf2 : \cf3 Array\cf2 .fill(8, \{\cf3 |i|\cf2  [4.0 - (i * 0.2), i * 0.1 + 0.2 ].asSpec \}),\
				\cf5 \\xang\cf2 : \cf3 Array\cf2 .fill(8, \{\cf3 |i|\cf2  \cf3 CyclicWarp\cf2 ([i*(pi/4.5)-pi, i*(pi/4.5)+(pi/2.25)-pi].asSpec) \}).scramble,\
				\cf5 \\yang\cf2 : \cf3 Array\cf2 .fill(8, \{\cf3 |i|\cf2  \cf3 CyclicWarp\cf2 ([i*(pi/4.5)-pi, i*(pi/4.5)+(pi/2.25)-pi].asSpec) \}).scramble,\
				\cf5 \\zang\cf2 : \cf3 Array\cf2 .fill(8, \{\cf3 |i|\cf2  \cf3 CyclicWarp\cf2 ([i*(pi/4.5)-pi, i*(pi/4.5)+(pi/2.25)-pi].asSpec) \}).scramble,\
		  		\cf5 \\zoom\cf2 : \cf3 Array\cf2 .fill(8, \{\cf3 |i|\cf2  \cf3 CyclicWarp\cf2 ([i*(pi/8)-0.5pi, i*(pi/8)+(pi/8)-0.5pi].asSpec) \}).reverse,\
				\cf5 \\push\cf2 : \cf3 Array\cf2 .fill(8, \{\cf3 |i|\cf2  \cf3 CyclicWarp\cf2 ([i*(pi/8)-0.5pi, i*(pi/8)+(pi/8)-0.5pi].asSpec) \}),\
				\cf5 \\focus\cf2 : \cf3 Array\cf2 .fill(8, \{\cf3 |i|\cf2  \cf3 CyclicWarp\cf2 ([i + 1 / 8 * -0.49pi, i + 1 / 8 * 0.49pi].asSpec) \})\
			);\
			\
			~z1params = \cf3 Array\cf2 .fill(8, \{\cf3 |i|\cf2 \
				[\
					\cf3 FxParam\cf2 (\cf5 \\aamp\cf2 , \cf5 \\aamp\cf2 , ~z1paramspecs[\cf5 \\aamp\cf2 ][i], \cf3 false\cf2 ),\
					\cf3 FxParam\cf2 (\cf5 \\str\cf2 , \cf5 \\str\cf2 , ~z1paramspecs[\cf5 \\str\cf2 ][i], \cf3 false\cf2 ),\
					\cf3 FxParam\cf2 (\cf5 \\end\cf2 , \cf5 \\end\cf2 , ~z1paramspecs[\cf5 \\end\cf2 ][i], \cf3 false\cf2 ),\
					\cf3 FxParam\cf2 (\cf5 \\eamp\cf2 , \cf5 \\eamp\cf2 , ~z1paramspecs[\cf5 \\eamp\cf2 ][i], \cf3 false\cf2 ),\
					\cf3 FxParam\cf2 (\cf5 \\xang\cf2 , \cf5 \\xsc\cf2 , ~z1paramspecs[\cf5 \\xang\cf2 ][i], \cf3 false\cf2 ),\
					\cf3 FxParam\cf2 (\cf5 \\yang\cf2 , \cf5 \\ysc\cf2 , ~z1paramspecs[\cf5 \\yang\cf2 ][i], \cf3 false\cf2 ),\
					\cf3 FxParam\cf2 (\cf5 \\zang\cf2 , \cf5 \\zsc\cf2 , ~z1paramspecs[\cf5 \\zang\cf2 ][i], \cf3 false\cf2 ),\
					\cf3 FxParam\cf2 (\cf5 \\zoom\cf2 , \cf5 \\zoom\cf2 , ~z1paramspecs[\cf5 \\zoom\cf2 ][i], \cf3 false\cf2 ),\
					\cf3 FxParam\cf2 (\cf5 \\push\cf2 , \cf5 \\push\cf2 , ~z1paramspecs[\cf5 \\push\cf2 ][i], \cf3 false\cf2 ),\
					\cf3 FxParam\cf2 (\cf5 \\focus\cf2 , \cf5 \\focus\cf2 , ~z1paramspecs[\cf5 \\focus\cf2 ][i], \cf3 false\cf2 )\
				];	\
			\});\
		\
				\
			~z1globals = [\
				\cf3 FxParam\cf2 (\cf5 \\rtime\cf2 , \cf5 \\rtime\cf2 , \cf3 ControlSpec\cf2 (10.0, 5.0), \cf3 false\cf2 ),\
				\cf3 FxParam\cf2 (\cf5 \\damp\cf2 , \cf5 \\damp\cf2 , \cf3 ControlSpec\cf2 (0.0, 1.0), \cf3 false\cf2 ),\
				\cf3 FxParam\cf2 (\cf5 \\inbw\cf2 , \cf5 \\inbw\cf2 , \cf3 ControlSpec\cf2 (0.0, 1.0), \cf3 false\cf2 ),\
				\cf3 FxParam\cf2 (\cf5 \\spr\cf2 , \cf5 \\spr\cf2 , \cf3 ControlSpec\cf2 (5, 20), \cf3 false\cf2 ),\
				\cf3 FxParam\cf2 (\cf5 \\dry\cf2 , \cf5 \\dry\cf2 , \cf3 ControlSpec\cf2 (0.0, 0.1), \cf3 false\cf2 ),\
				\cf3 FxParam\cf2 (\cf5 \\early\cf2 , \cf5 \\early\cf2 , \cf3 ControlSpec\cf2 (0.0, 0.1), \cf3 false\cf2 ),\
				\cf3 FxParam\cf2 (\cf5 \\tail\cf2 , \cf5 \\tail\cf2 , \cf3 ControlSpec\cf2 (1.0, 0.2), \cf3 false\cf2 ),\
				\cf3 FxParam\cf2 (\cf5 \\amp\cf2 , \cf5 \\amp\cf2 , \cf3 ControlSpec\cf2 (0.0, 1.0), \cf3 false\cf2 ),\
				\cf3 FxParam\cf2 (\cf5 \\line\cf2 , \cf5 \\line\cf2 , \cf3 ControlSpec\cf2 (0.4, 2.0, \cf5 'lin'\cf2 , 0.1), \cf3 false\cf2 )\
			];\
			\
			~subloops = ~loops.select(\{\cf3 |loop|\cf2  loop.path.contains(\cf4 "detloop_"\cf2 ) \});\
\
			~b_bus = \cf3 Array\cf2 .fill(8, \{ \cf3 Bus\cf2 .audio(~serv) \});\
			~t_bus = \cf3 Array\cf2 .fill(8, \{ \cf3 Bus\cf2 .audio(~serv, 4) \});\
\
			~freqs = \cf3 Array\cf2 .geom(8, 0.125, 1.5);\
			~dist = \cf3 Array\cf2 .series(8, 0.0, 0.375).reverse;\
		\
			~z1synths = \cf3 Array\cf2 .newClear(8);\
\
			~orient = \cf3 Orientation\cf2 ();\
		\
		\});\
\
		\cf3 RoundButton\cf2 (panel, \cf3 Rect\cf2 (5, 35, panel.bounds.width / 2 - 5, 25))\
			.states_([[\cf4 "states OFF"\cf2 , colors.orange, colors.steel ], [\cf4 "states ON"\cf2 , colors.steel, colors.orange ]])\
			.font_(fonts.lucida9)\
			.action_(\{\cf3 |bt|\cf2 \
				if (bt.value == 1)\
				\{\
					~fx.addStatesFunction(\cf5 \\zone1\cf2 , \{\cf3 |invalues|\cf2 \
\pard\pardeftab720\ql\qnatural
\cf2 				\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf2 						\cf3 var\cf2  states;\
							\
						if (~z1synths.notNil)\
						\{\
							states = invalues.states.clump(8);\
							~z1synths.do(\{\cf3 |active, i|\cf2 \
								\cf3 var\cf2  map, params;\
								if (active.notNil)\
								\{\
									params = \cf3 Array\cf2 .newClear(~z1params[0].size);\
									~z1params[i].do(\{\cf3 |param, j|\cf2 \
										params[j] = (\
											name: ~z1params[i].wrapAt(j).name, \
											pvalue: ~z1params[i].wrapAt(j).mapValue(states.wrapAt(i).wrapAt(j))\
										)\
									\});\
									active.src.set(\
										params[0].name, params[0].pvalue,\
										params[1].name, params[1].pvalue,\
										params[2].name, params[2].pvalue,\
										params[3].name, params[3].pvalue\
									);\
									active.trn.set(\
										params[4].name, params[4].pvalue,\
										params[5].name, params[5].pvalue,\
										params[6].name, params[6].pvalue,\
										params[7].name, params[7].pvalue,\
										params[8].name, params[8].pvalue,\
										params[9].name, params[9].pvalue\
									)\
								\}\
							\})\
						\}\
\pard\pardeftab720\ql\qnatural
\cf2 											\
				\});				\
				\}\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf2 				\{\
					~fx.removeStatesFunction(\cf5 \\zone1\cf2 )	\
				\}\
			\});\
			\
		\cf3 RoundButton\cf2 (panel, \cf3 Rect\cf2 (panel.bounds.width / 2, 35, panel.bounds.width / 2 - 5, 25))\
			.states_([[\cf4 "glob OFF"\cf2 , colors.orange, colors.steel ], [\cf4 "glob ON"\cf2 , colors.steel, colors.orange ]])\
			.font_(fonts.lucida9)\
			.action_(\{\cf3 |bt|\cf2 \
				if (bt.value == 1)\
				\{\
					~fx.addGlobalsFunction(\cf5 \\zone1\cf2 , \{\cf3 |invalues|\cf2 \
						~rev.set(\
							~z1globals[0].name, ~z1globals[0].mapValue(invalues.avglbf),\
							~z1globals[1].name, ~z1globals[1].mapValue(invalues.avgrbf),\
							~z1globals[2].name, ~z1globals[2].mapValue(invalues.avgrbb),\
							~z1globals[3].name, ~z1globals[3].mapValue(invalues.avglbb),\
							~z1globals[4].name, ~z1globals[4].mapValue(invalues.avgltf),\
							~z1globals[5].name, ~z1globals[5].mapValue(invalues.avgrtf),\
							~z1globals[6].name, ~z1globals[6].mapValue(invalues.avgrtb),\
							~z1globals[7].name, ~z1globals[7].mapValue(invalues.avgltb)\
						);\
						\
						~line.set(\cf5 \\amp\cf2 , ~z1globals[8].mapValue(invalues.avgstate));\
					\})\
\pard\pardeftab720\ql\qnatural
\cf2 			\}\
			\{\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf2 					~fx.removeGlobalsFunction(\cf5 \\zone1\cf2 )\
\pard\pardeftab720\ql\qnatural
\cf2 			\}\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf2 			\});\
\
		\cf3 RoundButton\cf2 (panel, \cf3 Rect\cf2 (5, 65, panel.bounds.width / 2 - 5, 25))\
			.states_([[\cf4 "line OFF"\cf2 , colors.orange, colors.steel ], [\cf4 "line ON"\cf2 , colors.steel, colors.orange ]])\
			.font_(fonts.lucida9)\
			.action_(\{\cf3 |bt|\cf2 \
				if (bt.value == 1)\
				\{\
					~line = \cf3 Synth\cf2 .after(~rev, \cf5 \\line\cf2 , [\cf5 \\out\cf2 , 0, \cf5 \\in\cf2 , ~rout, \cf5 \\i_wrp\cf2 , 0.1, \cf5 \\frq\cf2 , 1.0, \cf5 \\wsz\cf2 , 0.1, \
						\cf5 \\dns\cf2 , 6, \cf5 \\rnd\cf2 , 0.05, \cf5 \\amp\cf2 , 0.5\
					])\
				\}\
				\{\
					~line.set(\cf5 \\gate\cf2 , -30.0)\
				\}\
			\});\
			\
\
		4.do(\{\cf3 |i|\cf2 \
			\cf3 RoundButton\cf2 (panel, \cf3 Rect\cf2 (i * 45 + 5, 95, panel.bounds.width / 4 - 5, 25))\
				.states_([[i.asString ++ \cf4 " off"\cf2 , colors.orange, colors.steel ], \
					[i.asString ++ \cf4 " on"\cf2 , colors.steel, colors.orange ]])\
				.font_(fonts.lucida9)\
				.action_(\{\cf3 |bt|\cf2 \
					\cf3 var\cf2  trans, grp, s_src, s_enc, s_trn, s_dst, buf;\
					if (bt.value == 1)\
					\{\
						grp = \cf3 Group\cf2 .tail(~agrp);\
						s_src = \cf3 Synth\cf2 .head(grp, \cf5 \\swarpfld\cf2 , [\cf5 \\out\cf2 , ~b_bus[i], \cf5 \\efx\cf2 , ~rbus, \cf5 \\gate\cf2 , 1.0, \cf5 \\aamp\cf2 , 0.5, \
							\cf5 \\eamp\cf2 , 0.1, \cf5 \\dur\cf2 , 1.0, \cf5 \\buf\cf2 , ~subloops[i], \cf5 \\str\cf2 , 0, \cf5 \\end\cf2 , 1.0, \cf5 \\wrp\cf2 , 0.001, \
							\cf5 \\frq\cf2 , ~freqs@i, \cf5 \\wsz\cf2 , 0.1, \cf5 \\dns\cf2 , rrand(2, 10), \cf5 \\rnd\cf2 , 0.01, \cf5 \\doneAction\cf2 , 14])\
							.setn(\cf5 \\env\cf2 , \cf3 Env\cf2 ([0.001, 1.0, 1.0, 0.001], [0.001, 1.0, 0.001], \cf5 \\sine\cf2 , 2, 1).asArray);\
						s_enc = \cf3 Synth\cf2 .tail(grp, \cf5 \\atkencodedel\cf2 , [\cf5 \\out\cf2 , ~t_bus[i], \cf5 \\in\cf2 , ~b_bus[i]])\
							.setn(\cf5 \\del\cf2 , \cf3 Array\cf2 .geom(4, rrand(0.001, 0.003), 1.618))\
							.setn(\cf5 \\azm\cf2 , ~orient.azimuthArray)\
							.setn(\cf5 \\elv\cf2 , ~orient.elevationArray);\
						s_trn = \cf3 Synth\cf2 .tail(grp, \cf5 \\atk_trans\cf2 , [\cf5 \\out\cf2 , ~abus, \cf5 \\in\cf2 , ~t_bus@i, \cf5 \\dist\cf2 , ~dist@i]);\
						~z1synths.put(i, (\cf5 \\src\cf2 : s_src, \cf5 \\enc\cf2 : s_enc, \cf5 \\trn\cf2 : s_trn, \cf5 \\grp\cf2 : grp));\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\ql\qnatural\pardirnatural
\cf2 					\}\
					\{\
						~z1synths[i].src.set(\cf5 \\gate\cf2 , -30.0);\
						\cf3 SystemClock\cf2 .sched(30, \{ ~z1synths[i] = \cf3 nil\cf2 ; \cf3 nil\cf2  \});\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf2 					\}\
\pard\pardeftab720\ql\qnatural
\cf2 			\});		\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf2 		\
		\});\
\
		4.do(\{\cf3 |i|\cf2 	\
			\cf3 RoundButton\cf2 (panel, \cf3 Rect\cf2 (i * 45 + 5, 125, panel.bounds.width / 4 - 5, 25))\
				.states_([[(i + 4).asString ++ \cf4 " off"\cf2 , colors.orange, colors.steel ], \
					[(i + 4).asString ++ \cf4 " on"\cf2 , colors.steel, colors.orange ]])\
				.font_(fonts.lucida9)\
				.action_(\{\cf3 |bt|\cf2 \
					\cf3 var\cf2  trans, grp, s_src, s_enc, s_trn, s_dst, buf;\
					if (bt.value == 1)\
					\{\
						grp = \cf3 Group\cf2 .tail(~agrp);\
						s_src = \cf3 Synth\cf2 .head(grp, \cf5 \\swarpfld\cf2 , [\cf5 \\out\cf2 , ~b_bus[i+4], \cf5 \\efx\cf2 , ~rbus, \cf5 \\gate\cf2 , 1.0, \cf5 \\aamp\cf2 , 0.5, \
							\cf5 \\eamp\cf2 , 0.1, \cf5 \\dur\cf2 , 1.0, \cf5 \\buf\cf2 , ~subloops[i+4], \cf5 \\str\cf2 , 0, \cf5 \\end\cf2 , 1.0, \cf5 \\wrp\cf2 , 0.001, \
							\cf5 \\frq\cf2 , ~freqs@i, \cf5 \\wsz\cf2 , 0.1, \cf5 \\dns\cf2 , rrand(2, 10), \cf5 \\rnd\cf2 , 0.01, \cf5 \\doneAction\cf2 , 14])\
							.setn(\cf5 \\env\cf2 , \cf3 Env\cf2 ([0.001, 1.0, 1.0, 0.001], [0.001, 1.0, 0.001], \cf5 \\sine\cf2 , 2, 1).asArray);\
						s_enc = \cf3 Synth\cf2 .tail(grp, \cf5 \\atkencodedel\cf2 , [\cf5 \\out\cf2 , ~t_bus[i+4], \cf5 \\in\cf2 , ~b_bus[i+4]])\
							.setn(\cf5 \\del\cf2 , \cf3 Array\cf2 .geom(4, rrand(0.001, 0.003), 1.618))\
							.setn(\cf5 \\azm\cf2 , ~orient.azimuthArray)\
							.setn(\cf5 \\elv\cf2 , ~orient.elevationArray);\
						s_trn = \cf3 Synth\cf2 .tail(grp, \cf5 \\atk_trans\cf2 , [\cf5 \\out\cf2 , ~abus, \cf5 \\in\cf2 , ~t_bus[i+4], \cf5 \\dist\cf2 , ~dist[i+4]]);\
						~z1synths.put(i + 4, (\cf5 \\src\cf2 : s_src, \cf5 \\enc\cf2 : s_enc, \cf5 \\trn\cf2 : s_trn, \cf5 \\grp\cf2 : grp));\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\ql\qnatural\pardirnatural
\cf2 					\}\
					\{\
						~z1synths[i+4].src.set(\cf5 \\gate\cf2 , -30.0);\
						\cf3 SystemClock\cf2 .sched(30, \{ ~z1synths[i+4] = \cf3 nil\cf2 ; \cf3 nil\cf2  \});\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf2 					\}\
\pard\pardeftab720\ql\qnatural
\cf2 			\});		\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf2 		\
		\});\
\
		~z1items = (\
			\cf5 \\det_0_7\cf2 : \{  \
				~subloops = ~loops.select(\{\cf3 |loop|\cf2  loop.path.contains(\cf4 "detloop_"\cf2 ) \});\
\pard\pardeftab720\ql\qnatural
\cf2 			~z1synths.do(\{\cf3 |syn, i|\cf2 \
				if (syn.notNil)\
				\{\
					syn.src.set(\cf5 \\buf\cf2 , ~subloops[i]);\
					(\cf4 "loop at "\cf2  ++ i.asString ++ \cf4 " changed"\cf2 ).postln;\
				\}\
			\});	\
			\cf4 "zone 1 loops change complete"\cf2 .postln;						\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf2 			\},\
			\cf5 \\det_8_15\cf2 : \{  \
\pard\pardeftab720\ql\qnatural
\cf2 			~subloops = ~loops.select(\{\cf3 |it|\cf2  it.path.contains(\cf4 "detloop_"\cf2 ) \});\
			~z1synths.do(\{\cf3 |syn, i|\cf2 \
				if (syn.notNil)\
				\{\
					syn.src.set(\cf5 \\buf\cf2 , ~subloops[i + 8]);\
					(\cf4 "loop at "\cf2  ++ i.asString ++ \cf4 " changed"\cf2 ).postln;\
				\}\
			\});		\
			\cf4 "zone 1 loops change complete"\cf2 .postln;		\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf2 			\},\
			\cf5 \\oop_rand\cf2 : \{  \
				\cf3 Routine\cf2 (\{\
\pard\pardeftab720\ql\qnatural
\cf2 				~subloops = ~loops.select(\{\cf3 |it|\cf2  it.path.contains(\cf4 "monooop"\cf2 ) \});\
				~z1synths.do(\{\cf3 |syn, i|\cf2 \
					if (syn.notNil)\
					\{\
						syn.src.set(\cf5 \\buffer\cf2 , ~subloops.choose);\
						(\cf4 "loop at "\cf2  ++ i.asString ++ \cf4 " changed"\cf2 ).postln;\
						2.wait;\
					\}\
				\});		\
				\cf4 "zone 1 loops change complete"\cf2 .postln;		\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf2 				\}).play\
			\},\
			\cf5 \\oop_0_7\cf2 : \{  \
				\cf3 Routine\cf2 (\{\
\pard\pardeftab720\ql\qnatural
\cf2 				~subloops = ~loops.select(\{\cf3 |it|\cf2  it.path.contains(\cf4 "monooop"\cf2 ) \});\
				~z1synths.do(\{\cf3 |syn, i|\cf2 \
					if (syn.notNil)\
					\{\
						syn.src.set(\cf5 \\buffer\cf2 , ~subloops[i]);\
						(\cf4 "loop at "\cf2  ++ i.asString ++ \cf4 " changed"\cf2 ).postln;\
						2.wait;\
					\}\
				\});		\
				\cf4 "zone 1 loops change complete"\cf2 .postln;		\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf2 				\}).play\
			\},\
			\cf5 \\sum_4_11\cf2 : \{  \
				\cf3 Routine\cf2 (\{\
\pard\pardeftab720\ql\qnatural
\cf2 				~subloops = ~loops.select(\{\cf3 |it|\cf2  it.path.contains(\cf4 "sumeloop"\cf2 ) \});\
				~z1synths.do(\{\cf3 |syn, i|\cf2 \
					if (syn.notNil)\
					\{\
						syn.src.set(\cf5 \\buffer\cf2 , ~subloops[i + 4]);\
						(\cf4 "loop at "\cf2  ++ i.asString ++ \cf4 " changed"\cf2 ).postln;\
						2.wait;\
					\}\
				\});\
				\cf4 "zone 1 loops change complete"\cf2 .postln;		\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf2 				\}).play\
			\},\
			\cf5 \\nim_rand\cf2 : \{  \
				\cf3 Routine\cf2 (\{\
\pard\pardeftab720\ql\qnatural
\cf2 				~subloops = ~loops.select(\{\cf3 |it|\cf2  it.path.contains(\cf4 "nimeloop"\cf2 ) \});\
				~z1synths.do(\{\cf3 |syn, i|\cf2 \
					if (syn.notNil)\
					\{\
						syn.src.set(\cf5 \\buffer\cf2 , ~subloops.choose);\
						(\cf4 "loop at "\cf2  ++ i.asString ++ \cf4 " changed"\cf2 ).postln;\
						2.wait;\
					\}\
				\});		\
				\cf4 "zone 1 loops change complete"\cf2 .postln;		\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf2 				\}).play\
			\},\
			\cf5 \\the_rand\cf2 : \{  \
				\cf3 Routine\cf2 (\{\
\pard\pardeftab720\ql\qnatural
\cf2 				~subloops = ~loops.select(\{\cf3 |it|\cf2  it.path.contains(\cf4 "tehisloop"\cf2 ) \});\
				~z1synths.do(\{\cf3 |syn, i|\cf2 \
					if (syn.notNil)\
					\{\
						syn.src.set(\cf5 \\buffer\cf2 , ~subloops.choose);\
						(\cf4 "loop at "\cf2  ++ i.asString ++ \cf4 " changed"\cf2 ).postln;\
						2.wait;\
					\}\
				\});		\
				\cf4 "zone 1 loops change complete"\cf2 .postln;		\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf2 				\}).play\
			\},\
			\cf5 \\fx_rand\cf2 : \{  \
				\cf3 Routine\cf2 (\{\
\pard\pardeftab720\ql\qnatural
\cf2 				~subloops = ~loops.select(\{\cf3 |it|\cf2  it.path.contains(\cf4 "fxloop"\cf2 ) \});\
				~z1synths.do(\{\cf3 |syn, i|\cf2 \
					if (syn.notNil)\
					\{\
						syn.src.set(\cf5 \\buffer\cf2 , ~subloops.choose);\
						(\cf4 "loop at "\cf2  ++ i.asString ++ \cf4 " changed"\cf2 ).postln;\
						2.wait;\
					\}\
				\});		\
				\cf4 "zone 1 loops change complete"\cf2 .postln;		\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf2 				\}).play\
			\}\
		);\
		\
		~z1pm = \cf3 SCPopUpMenu\cf2 (panel, \cf3 Rect\cf2 (5, 155, panel.bounds.width / 1.5 - 5, 25))\
			.background_(colors.steel)\
			.font_(fonts.lucida9)			\
			.stringColor_(colors.orange)\
			.items_(~z1items.keys(\cf3 Array\cf2 ).sort);\
		\
		\cf3 RoundButton\cf2 (panel, \cf3 Rect\cf2 (panel.bounds.width / 1.5 + 5, 155, panel.bounds.width / 3 - 10, 25))\
			.font_(fonts.lucida9)\
			.states_([[\cf4 "send"\cf2 , colors.orange, colors.steel]])\
			.action_(\{\
				~z1items[~z1pm.items[~z1pm.value].asSymbol].value\
			\});				\
\
		~z1smspecs = (\
			\cf5 \\rtime\cf2 : \cf3 LinearWarp\cf2 (\cf3 ControlSpec\cf2 (10.0, 20.0)),\
			\cf5 \\tail\cf2 : \cf3 LinearWarp\cf2 (\cf3 ControlSpec\cf2 (1.0, 2.0)),\
			\cf5 \\aamp\cf2 : \cf3 LinearWarp\cf2 (\cf3 ControlSpec\cf2 (1.0, 4.0)),\
			\cf5 \\line\cf2 : \cf3 LinearWarp\cf2 (\cf3 ControlSpec\cf2 (0.5, 3.0, default: 2.0))\
		);			\
				\
		\cf3 SmoothSlider\cf2 (panel, \cf3 Rect\cf2 (0 * 45 + 5, 215, panel.bounds.width / 4 - 5, 140))\
			.action_(\{\cf3 |sl|\cf2 \
				~z1globals[0].spec.minval = ~z1smspecs[\cf5 \\rtime\cf2 ].map(sl.value)\
			\});\
		\cf3 SmoothSlider\cf2 (panel, \cf3 Rect\cf2 (1 * 45 + 5, 215, panel.bounds.width / 4 - 5, 140))\
			.action_(\{\cf3 |sl|\cf2 \
				~z1globals[6].spec.minval = ~z1smspecs[\cf5 \\tail\cf2 ].map(sl.value)\
			\});\
		\cf3 SmoothSlider\cf2 (panel, \cf3 Rect\cf2 (2 * 45 + 5, 215, panel.bounds.width / 4 - 5, 140))\
			.action_(\{\cf3 |sl|\cf2 \
				~z1globals[7].spec.maxval = ~z1smspecs[\cf5 \\aamp\cf2 ].map(sl.value)\
			\});\
		\cf3 SmoothSlider\cf2 (panel, \cf3 Rect\cf2 (3 * 45 + 5, 215, panel.bounds.width / 4 - 5, 140))\
			.value_(~z1smspecs[\cf5 \\line\cf2 ].spec.unmap(~z1smspecs[\cf5 \\line\cf2 ].spec.default))\
			.action_(\{\cf3 |sl|\cf2 \
				~z1globals[8].spec.maxval = ~z1smspecs[\cf5 \\line\cf2 ].map(sl.value)\
			\});\
\
		[\cf4 "rtime"\cf2 , \cf4 "tail"\cf2 , \cf4 "amp"\cf2 , \cf4 "line"\cf2  ].do(\{\cf3 |txt, i|\cf2 \
			\cf3 SCStaticText\cf2 (panel, \cf3 Rect\cf2 (i * 45 + 5, 215, panel.bounds.width / 4 - 5, 25))\
				.font_(fonts.skia)\
				.stringColor_(colors.orange)\
				.align_(\cf5 \\center\cf2 )\
				.string_(txt)\
		\})\
			\
		\
\
\});\
\
~fx.perfGui.assignPanel(2, \{\cf3 |panel|\cf2 \
	\cf3 var\cf2  colors, fonts;\
	colors = (\
		\cf5 \\blue\cf2 : \cf3 Color\cf2 .new255(28, 134, 238),\
		\cf5 \\orange\cf2 : \cf3 Color\cf2 .new255(184, 134, 11),\
		\cf5 \\steel\cf2 : \cf3 Color\cf2 .new255(4, 50, 89)\
	);\
	fonts = (\
		\cf5 \\lucida9\cf2 : \cf3 Font\cf2 (\cf4 "Lucida Grande"\cf2 , 9),\
		\cf5 \\lucida11\cf2 : \cf3 Font\cf2 (\cf4 "Lucida Grande"\cf2 , 11),\
		\cf5 \\skia\cf2 : \cf3 Font\cf2 (\cf4 "Skia"\cf2 , 9) \
	);\
	\cf3 RoundButton\cf2 (panel, \cf3 Rect\cf2 (5, 5, panel.bounds.width - 10, 25))\
		.states_([[\cf4 "initialize"\cf2 , colors.orange, colors.steel ]])\
		.font_(fonts.lucida11)\
		.action_(\{\
			~loopind = (0..7);\
\
			~indices = (0..63).clump(2).clump(2).flop.flatten(2).clump(4).perfectShuffle\
					.clump(4).flop.flatten(2).clump(8).sort(\{\cf3 |a, b|\cf2  a[0] < b[0] \});\
			\
			~trigmap = [\
				(\cf5 \\on\cf2 : 0.1, \cf5 \\off\cf2 : 0.3, \cf5 \\last\cf2 : 0, \cf5 \\active\cf2 : \cf3 false\cf2  ),\
				(\cf5 \\on\cf2 : 0.2, \cf5 \\off\cf2 : 0.4, \cf5 \\last\cf2 : 0, \cf5 \\active\cf2 : \cf3 false\cf2  ),\
				(\cf5 \\on\cf2 : 0.3, \cf5 \\off\cf2 : 0.5, \cf5 \\last\cf2 : 0, \cf5 \\active\cf2 : \cf3 false\cf2  ),\
				(\cf5 \\on\cf2 : 0.4, \cf5 \\off\cf2 : 0.6, \cf5 \\last\cf2 : 0, \cf5 \\active\cf2 : \cf3 false\cf2  ),\
				(\cf5 \\on\cf2 : 0.9, \cf5 \\off\cf2 : 0.7, \cf5 \\last\cf2 : 0, \cf5 \\active\cf2 : \cf3 false\cf2  ),\
				(\cf5 \\on\cf2 : 0.8, \cf5 \\off\cf2 : 0.6, \cf5 \\last\cf2 : 0, \cf5 \\active\cf2 : \cf3 false\cf2  ),\
				(\cf5 \\on\cf2 : 0.7, \cf5 \\off\cf2 : 0.5, \cf5 \\last\cf2 : 0, \cf5 \\active\cf2 : \cf3 false\cf2  ),\
				(\cf5 \\on\cf2 : 0.6, \cf5 \\off\cf2 : 0.4, \cf5 \\last\cf2 : 0, \cf5 \\active\cf2 : \cf3 false\cf2  )\
			];\
\
			~z3synths = \cf3 Array\cf2 .newClear(8);\
\
			~z3map = (\
				\cf5 \\aamp\cf2 : \cf3 LinearWarp\cf2 (\cf3 ControlSpec\cf2 (0.5, 0.1)),\
				\cf5 \\str\cf2 : \cf3 LinearWarp\cf2 (\cf3 ControlSpec\cf2 (0, 0.5)),\
				\cf5 \\end\cf2 : \cf3 LinearWarp\cf2 (\cf3 ControlSpec\cf2 (0.5, 1.0)),\
				\cf5 \\wrp\cf2 : \cf3 LinearWarp\cf2 (\cf3 ControlSpec\cf2 (0.125/4 , 1.0/4, step: 2**(1/5) )),\
				\cf5 \\frq\cf2 : \cf3 LinearWarp\cf2 (\cf3 ControlSpec\cf2 (1.0, 1.0 )),\
				\cf5 \\wsz\cf2 : \cf3 LinearWarp\cf2 (\cf3 ControlSpec\cf2 (0.0625, 0.5, step: 2**(1/5) )),\
				\cf5 \\dns\cf2 : \cf3 LinearWarp\cf2 (\cf3 ControlSpec\cf2 (4, 32, step: 2**(1/5) )),\
				\cf5 \\rnd\cf2 : \cf3 LinearWarp\cf2 (\cf3 ControlSpec\cf2 (0.1, 0.2)),\
				\cf5 \\xang\cf2 : \cf3 LinearWarp\cf2 (\cf3 ControlSpec\cf2 (pi, -pi, step: 2**(1/5) )),\
				\cf5 \\yang\cf2 : \cf3 LinearWarp\cf2 (\cf3 ControlSpec\cf2 (pi, -pi, step: 2**(1/5) )),\
				\cf5 \\zang\cf2 : \cf3 LinearWarp\cf2 (\cf3 ControlSpec\cf2 (pi, -pi, step: 2**(1/5) ))\
			);\
\
			~z3pmaps = (\
				\cf5 \\kck\cf2 : [\cf5 \\ou\cf2 , ~abus, \cf5 \\ef\cf2 , 99, \cf5 \\fr\cf2 , 50.0, \cf5 \\at\cf2 , 0.1, \cf5 \\dr\cf2 , 0.05, \cf5 \\cr\cf2 , -4, \cf5 \\ea\cf2 , 1, \
					\cf5 \\on\cf2 , 1, \cf5 \\am\cf2 , 1.0],\
				\cf5 \\snr\cf2 : [\cf5 \\ou\cf2 , ~abus, \cf5 \\fr\cf2 , 400, \cf5 \\at\cf2 , 0.008, \cf5 \\dr\cf2 , 0.05, \cf5 \\cr\cf2 , -6, \cf5 \\dc\cf2 , 2, \cf5 \\dl\cf2 , 0.125, \cf5 \\wt\cf2 , 3,\
					\cf5 \\am\cf2 , 12],\
				\cf5 \\hh\cf2 : [\cf5 \\ou\cf2 , ~abus, \cf5 \\dr\cf2 , 0.04, \cf5 \\fr\cf2 , 2500, \cf5 \\am\cf2 , 25.0],\
				\cf5 \\bss\cf2 : [\cf5 \\ou\cf2 , ~abus, \cf5 \\fr\cf2 , 60.0, \cf5 \\dr\cf2 , 0.05, \cf5 \\am\cf2 , 4.0],\
				\cf5 \\clck\cf2 : [\cf5 \\ou\cf2 , ~abus, \cf5 \\ef\cf2 , 99, \cf5 \\am\cf2 , 8.0, \cf5 \\dr\cf2 , 0.2, \cf5 \\bt\cf2 , 1, \cf5 \\ea\cf2 , 1],\
				\cf5 \\nzsnr\cf2 : [\cf5 \\ou\cf2 , ~abus, \cf5 \\am\cf2 , 4, \cf5 \\fr\cf2 , 700, \cf5 \\dr\cf2 , 0.2],\
				\cf5 \\pnk\cf2 : [\cf5 \\ou\cf2 , ~abus, \cf5 \\dr\cf2 , 0.05, \cf5 \\am\cf2 , 4.0],\
				\cf5 \\fmsnth\cf2 : [\cf5 \\ou\cf2 , ~abus, \cf5 \\ef\cf2 , 99, \cf5 \\dr\cf2 , 0.05, \cf5 \\gd\cf2 , 0.015, \cf5 \\cf\cf2 , 500, \cf5 \\mf\cf2 , 0.5, \cf5 \\in\cf2 , 12, \
					\cf5 \\on\cf2 , 1, \cf5 \\am\cf2 , 2]\
			);	\
			\
			~addSynth = \{\cf3 |index, invalues|\cf2 \
				\cf3 var\cf2  states = \cf3 Pseq\cf2 (invalues.states[~indices[index]], 2).asStream;\
				\cf3 Synth\cf2 .head(~agrp, ~z3defs[index].name, ~z3pmaps[~z3defs[index].name.asSymbol] \
					++ [\cf5 \\az\cf2 , [-pi, pi].asSpec.map(states.next)]);\
				~z3synths[index] = \cf3 Synth\cf2 .head(~agrp, \cf5 \\rwarpfldatk\cf2 , \
					[\cf5 \\out\cf2 , ~abus, \cf5 \\efx\cf2 , ~rbus, \cf5 \\gate\cf2 , 1.0, \cf5 \\amp\cf2 , 1.0,\
					\cf5 \\eamp\cf2 , 0.5, \cf5 \\maxdel\cf2 , 0.1, \cf5 \\dur\cf2 , 1, \cf5 \\buf\cf2 , ~loops[~loopind[index]]\
					] ++ ~z3map.collect(\{\cf3 |spec|\cf2  spec.map(states.next) \}).asKeyValuePairs )\
						.setn(\cf5 \\env\cf2 , \cf3 Env\cf2 ([1, 1, 0], [0.8, 0.2], \cf5 \\lin\cf2 , 2, 1).asArray)\
						.setn(\cf5 \\delays\cf2 , \cf3 Array\cf2 .geom(4, [0.005, 0.01].asSpec.map(states.next), 1.618 ))\
						.setn(\cf5 \\shifts\cf2 , [1, 0.5, 0.25, 1])\
						.setn(\cf5 \\wins\cf2 , \cf3 Array\cf2 .geom(4, [0.01, 0.05].asSpec.map(states.next), 1.618 ))\
						.setn(\cf5 \\amps\cf2 , \cf3 Array\cf2 .geom(4, 1.0, 8/13));\
			\};\
			\
			~release = -1.0;\
		\
			~removeSynth = \{\cf3 |index|\cf2 \
				~z3synths[index].set(\cf5 \\gate\cf2 , ~release);\
				~z3synths[index] = \cf3 nil\cf2 ;	\
			\};			\
			\
		\});\
		\
		\cf3 RoundButton\cf2 (panel, \cf3 Rect\cf2 (5, 35, panel.bounds.width / 2 - 5, 25))\
			.states_([[\cf4 "states OFF"\cf2 , colors.orange, colors.steel ], [\cf4 "states ON"\cf2 , colors.steel, colors.orange ]])\
			.font_(fonts.lucida9)\
			.action_(\{\cf3 |bt|\cf2 \
				if (bt.value == 1)\
				\{\
					~fx.addStatesFunction(\cf5 \\zone3\cf2 , \{\cf3 |invalues|\cf2 \
						~indices.do(\{ \cf3 |index, i|\cf2 \
							\cf3 var\cf2  map, states, params = invalues.states[index];\
							map = ~trigmap[i];\
							\
\cf6 //							if (~z3synths[i].notNil)\cf2 \
\cf6 //							\{\cf2 \
\cf6 //								states = Pseq(invalues.states[~indices[i]], 2).asStream;\cf2 \
\cf6 //								~z3synths[i].set(*~z3map.collect(\{|spec| spec.map(states.next) \}).asKeyValuePairs)\cf2 \
\cf6 //							\};\cf2 \
							\
							if (map.on > map.off) \{\
								if ((map.active.not).and(params[0] > map.off).and(params[0] < map.on))\
								\{\
									~addSynth.value(i, invalues);\
									map.active = \cf3 true\cf2 ;\
								\};\
								if ((map.active).and((params[0] < map.off).or(params[0] > map.on) ))\
								\{\
									~removeSynth.value(i);\
									map.active = \cf3 false\cf2 ;\
								\}\
							\}\
							\{\
								if ((map.active.not).and(params[0] < map.off).and(params[0] > map.on))\
								\{\
									~addSynth.value(i, invalues);\
									map.active = \cf3 true\cf2 ;\
								\};\
								if ((map.active).and((params[0] > map.off).or(params[0] < map.on) ))\
								\{\
									~removeSynth.value(i);\
									map.active = \cf3 false\cf2 ;\
								\}\
							\
							\}	\
						\})\
\pard\pardeftab720\ql\qnatural
\cf2 			 	\})\
			 \}\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf2 				\{\
					~fx.removeStatesFunction(\cf5 \\zone3\cf2 )	\
				\}\
			\});\
\
		~z3items = (\
			\cf5 \\det_0_7\cf2 : \{  \
				\cf3 Routine\cf2 (\{				\
					(0..7).do(\{\cf3 |ind, i|\cf2 \
						~loopind[i] = ind;\
						4.wait;\
					\})\
				\}).play\
			\},\
			\cf5 \\det_8_15\cf2 : \{  \
				\cf3 Routine\cf2 (\{\
					(8..15).do(\{\cf3 |ind, i|\cf2 \
						~loopind[i] = ind;\
						4.wait;\
					\})\
				\}).play\
			\},\
			\cf5 \\fx_0_7\cf2 : \{  \
				\cf3 Routine\cf2 (\{\
					(21..28).do(\{\cf3 |ind, i|\cf2 \
						~loopind[i] = ind;\
						4.wait;\
					\})\
				\}).play\
			\},\
			\cf5 \\mem_last\cf2 : \{  \
				\cf3 Routine\cf2 (\{\
					(68..75).do(\{\cf3 |ind, i|\cf2 \
						~loopind[i] = ind;\
						4.wait;\
					\})\
				\}).play\
			\},\
			\cf5 \\misc_0_4\cf2 : \{  \
				\cf3 Routine\cf2 (\{\
					(76..79).do(\{\cf3 |ind, i|\cf2 \
						~loopind[i] = ind;\
						4.wait;\
					\})\
				\}).play\
			\},\
			\cf5 \\oop\cf2 : \{  \
				\cf3 Routine\cf2 (\{\
					(104..111).do(\{\cf3 |ind, i|\cf2 \
						~loopind[i] = ind;\
						4.wait;\
					\})\
				\}).play\
			\},\
			\cf5 \\nim\cf2 : \{\
				\cf3 Routine\cf2 (\{\
					(150..157).do(\{\cf3 |ind, i|\cf2 \
						~loopind[i] = ind;\
						4.wait;\
					\})\
				\}).play			\
			\},\
			\cf5 \\sum\cf2 : \{\
				\cf3 Routine\cf2 (\{\
					(188..195).do(\{\cf3 |ind, i|\cf2 \
						~loopind[i] = ind;\
						4.wait;\
					\})\
				\}).play			\
			\},\
			\cf5 \\teh\cf2 : \{\
				\cf3 Routine\cf2 (\{\
					(230..237).do(\{\cf3 |ind, i|\cf2 \
						~loopind[i] = ind;\
						4.wait;\
					\})\
				\}).play			\
			\}\
			\
		);\
		\
		~z3pm = \cf3 SCPopUpMenu\cf2 (panel, \cf3 Rect\cf2 (5, 155, panel.bounds.width / 1.5 - 5, 25))\
			.background_(colors.steel)\
			.font_(fonts.lucida9)			\
			.stringColor_(colors.orange)\
			.items_(~z3items.keys(\cf3 Array\cf2 ).sort);\
		\
		\cf3 RoundButton\cf2 (panel, \cf3 Rect\cf2 (panel.bounds.width / 1.5 + 5, 155, panel.bounds.width / 3 - 10, 25))\
			.font_(fonts.lucida9)\
			.states_([[\cf4 "send"\cf2 , colors.orange, colors.steel]])\
			.action_(\{\
				~z3items[~z3pm.items[~z3pm.value].asSymbol].value\
			\});	\
			\
		~z3smspecs = (\
			\cf5 \\aamp\cf2 : \cf3 ControlSpec\cf2 (1.0, 2.0),\
			\cf5 \\wrp\cf2 : \cf3 ControlSpec\cf2 (1/4, 1, step: 2**(1/5) ),\
			\cf5 \\wsz\cf2 : \cf3 ControlSpec\cf2 (0.5, 0.125, step: 2**(1/5) )\
		);					\
\
		\cf3 SmoothSlider\cf2 (panel, \cf3 Rect\cf2 (0 * 45 + 5, 215, panel.bounds.width / 4 - 5, 140))\
			.action_(\{\cf3 |sl|\cf2 \
				~release = [-1.0, -4.0].asSpec.map(sl.value)\
			\});\
		\cf3 SmoothSlider\cf2 (panel, \cf3 Rect\cf2 (1 * 45 + 5, 215, panel.bounds.width / 4 - 5, 140))\
			.action_(\{\cf3 |sl|\cf2 \
				~z3map[\cf5 \\aamp\cf2 ].spec.minval = ~z3smspecs[\cf5 \\aamp\cf2 ].map(sl.value)\
			\});\
		\cf3 SmoothSlider\cf2 (panel, \cf3 Rect\cf2 (2 * 45 + 5, 215, panel.bounds.width / 4 - 5, 140))\
			.action_(\{\cf3 |sl|\cf2 \
				~z3map[\cf5 \\wrp\cf2 ].spec.maxval = ~z3smspecs[\cf5 \\wrp\cf2 ].map(sl.value)\
			\});\
		\cf3 SmoothSlider\cf2 (panel, \cf3 Rect\cf2 (3 * 45 + 5, 215, panel.bounds.width / 4 - 5, 140))\
			.action_(\{\cf3 |sl|\cf2 \
				~z3map[\cf5 \\wsz\cf2 ].spec.maxval = ~z3smspecs[\cf5 \\wsz\cf2 ].map(sl.value)\
			\});\
\
		[\cf4 "reltime"\cf2 , \cf4 "aamp"\cf2 , \cf4 "wrp"\cf2 , \cf4 "wsz"\cf2  ].do(\{\cf3 |txt, i|\cf2 \
			\cf3 SCStaticText\cf2 (panel, \cf3 Rect\cf2 (i * 45 + 5, 215, panel.bounds.width / 4 - 5, 25))\
				.font_(fonts.skia)\
				.stringColor_(colors.orange)\
				.align_(\cf5 \\center\cf2 )\
				.string_(txt)\
		\})\
			\
		\
\
\})\
\
)\
}