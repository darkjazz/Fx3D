{\rtf1\ansi\ansicpg1252\cocoartf949\cocoasubrtf420
{\fonttbl\f0\fnil\fcharset238 Inconsolata;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red0\green0\blue191;\red96\green96\blue96;
\red0\green115\blue0;\red191\green0\blue0;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f0\fs24 \cf2 (\
~server = \cf3 Server\cf2 .internal;\
\cf3 Server\cf2 .default = ~server;\
\
if (~server.serverRunning.not) \{ ~server.boot \}\
)\
\
(\
\
\
~buffers = \cf4 "/Users/alo/sounds/fx_loops/*"\cf2 .pathMatch.keep(36).collect(\{\cf3 |path|\cf2 \
	\cf3 Buffer\cf2 .read(~server, path)\
\});\
\
\pard\pardeftab720\ql\qnatural
\cf3 SynthDef\cf2 (\cf5 \\rwarp\cf2 , \{\cf3 |out, efx, amp, dur, buf, str, end, wrp, frq, wsz, dns, rnd, azm, elv, rho, gate=1.0|\cf2 \
	\cf3 var\cf2  ptr, sig, env, bf;\
	env = \cf3 Control\cf2 .names([\cf5 \\env\cf2 ]).kr(\cf3 Env\cf2 .newClear(8).asArray);	\
	ptr = \cf3 LFSaw\cf2 .kr(wrp).range(str, end);\
	sig = \cf3 LeakDC\cf2 .ar(\cf3 Warp1\cf2 .ar(1, buf, ptr, frq, wsz, -1, dns, rnd)) * \
		\cf3 EnvGen\cf2 .kr(env, gate, timeScale: dur, doneAction: 2);\
	sig = sig ** 0.5;\
\cf6 //	Out.ar(efx, sig * eamp);\cf2 \
	bf = \cf3 BFEncode1\cf2 .ar(sig, azm, elv, rho);\
	\cf3 Out\cf2 .ar(out, bf * amp)\
\}).memStore;\
\
~nano = \cf3 NanoKONTROL\cf2 ();\
\
~playing = \cf3 Array\cf2 .newClear(36);\
\
~bseq = \cf3 Pseq\cf2 (~buffers, 1).asStream;\
\
~ambibus = \cf3 Bus\cf2 .audio(~server, 4);\
\
\cf3 SynthDef\cf2 (\cf5 \\decoder\cf2 , \{\
	\cf3 var\cf2  w, x, y, z;\
	#w, x, y, z = \cf3 In\cf2 .ar(~ambibus, 4);\
	\cf3 Out\cf2 .ar(0, \cf3 BFDecode1\cf2 .ar(w, x, y, z, [-0.25, -0.75, 0.75, 0.25] * pi, (0 ! 4)))\
\}).memStore\
\
)\
\
(\
~sgroup = \cf3 Group\cf2 ();\
~decoder = \cf3 Synth\cf2 .after(~sgroup, \cf5 \\decoder\cf2 );\
\
~getenv = \{\
	\cf3 Env\cf2 ([0.001, 1.0, 1.0, 0.001], [0.25, 0.5, 0.25], \cf5 \\welch\cf2 , 2, 1).asArray;\
\};\
\
~getargs = \{\cf3 |scene, i|\cf2 \
	[\
		\cf5 \\out\cf2 , ~ambibus, \cf5 \\amp\cf2 , ~nano.sliders[scene][i].value, \cf5 \\dur\cf2 , 3, \cf5 \\str\cf2 , 0, \cf5 \\end\cf2 , 1, \
		\cf5 \\wrp\cf2 , ~nano.knobs[scene][i].value, \cf5 \\frq\cf2 , \cf3 Array\cf2 .geom(5, 1, 2 ** (1 / 5)).reciprocal.choose,\
		\cf5 \\wsz\cf2 , rrand(0.05, 0.3).round(0.0625), \cf5 \\dns\cf2 , rrand(1, 5), \cf5 \\rnd\cf2 , [0, 0.02, 0.04, 0.08].choose,\
		\cf5 \\azm\cf2 , rrand(pi, -pi), \cf5 \\elv\cf2 , rrand(-0.25pi, 0.25pi), \cf5 \\rho\cf2 , rrand(0.0, 1.0)\
	]\
\};\
\
4.do(\{\cf3 |scene|\cf2 \
	\cf3 var\cf2  startbtns, loopbtns, sliders, knobs, current, ctrbtns;\
	startbtns = ~nano.buttons[scene][0..8];\
	loopbtns = ~nano.buttons[scene][9..17];\
	ctrbtns = ~nano.buttons[scene][18..23];\
	current = \cf3 Pflatten\cf2 (1, \cf3 Pstutter\cf2 (4, \cf3 Pclump\cf2 (9, \cf3 Pseq\cf2 ((0..35), 1)))).asStream;\
	\
	startbtns.do(\{\cf3 |btn|\cf2 \
		\cf3 var\cf2  ind, buf;\
		ind = current.next;\
		buf = ~bseq.next;\
		btn.action = \{\cf3 |btn|\cf2 \
			if (~playing[ind].isNil)\
			\{\
				if (btn.value == 1)\
				\{\
					~playing[ind] = (\
						\cf5 \\synth\cf2 : \cf3 Synth\cf2 .head(~sgroup, \cf5 \\rwarp\cf2 , [\cf5 \\buf\cf2 , buf] ++ \
							~getargs.value(scene, ind) ++ [\cf5 \\env\cf2 , ~getenv.value]),\
						\cf5 \\looping\cf2 : \cf3 false\cf2 \
					)\
				\}\
			\}\
			\{			\
				~playing[ind][\cf5 'synth'\cf2 ].release(3.0);\
				~playing[ind] = \cf3 nil\cf2 \
			\}\
		\}		\
	\});\
	\
	loopbtns.do(\{\cf3 |btn, i|\cf2 \
		\cf3 var\cf2  ind;\
		ind = current.next;\
		btn.action = \{\
			if (startbtns[i].value == 1)\
			\{\
				~playing[ind].looping = \cf3 true\cf2 \
			\}\
			\{\
				if (~playing[ind].notNil)\
				\{\
					~playing[ind][\cf5 'synth'\cf2 ].release(3.0);\
					~playing[ind] = \cf3 nil\cf2 \
				\}\
			\}\
		\}\
	\});\
	\
	~nano.sliders[scene].do(\{\cf3 |slider, i|\cf2 \
		\cf3 var\cf2  ind;\
		ind = current.next;\
		slider.action = \{\
			if (~playing[ind].notNil)\
			\{\
				~playing[ind][\cf5 'synth'\cf2 ].set(\cf5 \\amp\cf2 , slider.value)\
			\}\
		\}\
	\});	\
	\
	~nano.knobs[scene].do(\{\cf3 |knob|\cf2 \
		\cf3 var\cf2  ind;\
		ind = current.next;\
		knob.action = \{\
			if (~playing[ind].notNil)\
			\{\
				~playing[ind][\cf5 'synth'\cf2 ].set(\cf5 \\wrp\cf2 , knob.value)\
			\}		\
		\}\
	\})\
\})\
\
)}