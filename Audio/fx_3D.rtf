{\rtf1\ansi\ansicpg1252\cocoartf949\cocoasubrtf540
{\fonttbl\f0\fnil\fcharset238 Inconsolata;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue191;\red96\green96\blue96;\red0\green115\blue0;
\red191\green0\blue0;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f0\fs24 \cf0 (\
\cf2 var\cf0  atspath = \cf3 "/Users/alo/sounds/ats/*"\cf0 ;\
\cf2 var\cf0  bufpath = \cf3 "/Users/alo/sounds/fx_loops/*"\cf0 ;\
\
~serv = \cf2 Server\cf0 .internal;\
\cf2 Server\cf0 .default = ~serv;\
\
~serv.options.numWireBufs = 512;\
~serv.options.memSize = 2**16;\
\
if (~serv.serverRunning.not)\
\{\
	\cf3 "BOOTING SERVER..."\cf0 .postln;\
	~serv.boot\
\}\
\{\
	~atsfiles = \cf2 Array\cf0 .newClear(atspath.pathMatch.size);\
	~loops = \cf2 Array\cf0 .newClear(bufpath.pathMatch.size);\
	~atsdata = \cf2 Array\cf0 ();\
	\cf2 Routine\cf0 (\{\
		\cf2 var\cf0  prog = \cf2 ProgBar\cf0 (atspath.pathMatch.size);\
		atspath.pathMatch.do(\{\cf2 |path, i|\cf0 \
			\cf2 var\cf0  af;\
			af = \cf2 AtsFile\cf0 (path, ~serv);\
			if (af.numPartials > 20)\
			\{ \
				af.loadToBuffer;\
				~serv.sync;\
				~atsfiles.put(i, af);\
				~atsdata = ~atsdata.add( \
					( \
					\cf4 \\buffer\cf0 : af.buffer, \
					\cf4 \\nparts\cf0 : af.numPartials, \
					\cf4 \\dur\cf0 : af.sndDur ,\
					\cf4 \\file\cf0 : af.path\
					) \
				);\
			\};\
			prog.next;\
			0.001.wait;\
		\});\
		prog.close;\
		prog = \cf2 nil\cf0 ;\
		\
		prog = \cf2 ProgBar\cf0 (bufpath.pathMatch.size);\
		bufpath.pathMatch.do(\{\cf2 |path, i|\cf0 \
			~loops = ~loops.add( \cf2 Buffer\cf0 .read(~serv, path) );\
			~serv.sync;\
			prog.next;\
			0.001.wait;\
		\});\
		prog.close;\
		prog = \cf2 nil\cf0 ;\
		\
		~loops = ~loops.select(\cf2 _\cf0 .notNil);\
		\
	\}).play(\cf2 AppClock\cf0 )\
\}\
)\
\
(\
~bfreqs = [ 20, 100, 200, 300, 400, 510, 630, 770, 920, 1080, 1270, 1480, 1720,\
	  2000, 2320, 2700, 3150, 3700, 4400, 5300, 6400, 7700, 9500, 12000, 15500, 20000 ];\
\
~cfreqs = \cf2 Array\cf0 .newClear(~bfreqs.size - 1);\
~cbands = \cf2 Array\cf0 .newClear(~bfreqs.size - 1);\
~bfreqs.doAdjacentPairs(\{\cf2 |lo, hi, i|\cf0 \
	~cfreqs.put(i, lo + (hi - lo / 2));\
	~cbands.put(i, hi - lo / 2 );\
\});\
\
\pard\pardeftab720\ql\qnatural
\cf0 ~ndef = \{\cf2 |name, nfunc, ffunc, bFreq = false|\cf0 \
	\cf2 SynthDef\cf0 (name, \{\cf2 |out, efx, aamp, eamp, samp, dur, rate, buffer, rq, clip, doneAction = 2|\cf0 \
		\cf2 var\cf0  env, sig, args, bf, pointer, nsrc, filt, noise, azm, elv, rho;\
		env = \cf2 Control\cf0 .names([\cf4 \\env\cf0 ]).kr(\cf2 Env\cf0 .newClear(8).asArray);\
		azm = \cf2 EnvGen\cf0 .kr(\cf2 Control\cf0 .names([\cf4 \\azm\cf0 ]).kr(\cf2 Env\cf0 .newClear(8).asArray), timeScale: dur);\
		elv = \cf2 EnvGen\cf0 .kr(\cf2 Control\cf0 .names([\cf4 \\elv\cf0 ]).kr(\cf2 Env\cf0 .newClear(8).asArray), timeScale: dur);\
		rho = \cf2 EnvGen\cf0 .kr(\cf2 Control\cf0 .names([\cf4 \\rho\cf0 ]).kr(\cf2 Env\cf0 .newClear(8).asArray), timeScale: dur);\
		pointer = \cf2 LFSaw\cf0 .kr(rate, 1, 0.5, 0.5);\
		noise = \cf2 AtsNoise\cf0 .kr(buffer, (0..24), pointer);\
		if (bFreq)\
		\{\
			nsrc = \cf2 SynthDef\cf0 .wrap(nfunc, \cf2 nil\cf0 , ~cfreqs) * samp;\
		\}\
		\{\
			nsrc = \cf2 SynthDef\cf0 .wrap(nfunc) * samp;\
		\};\
		filt = \cf2 Mix\cf0 (\cf2 SynthDef\cf0 .wrap(ffunc, \cf2 nil\cf0 , [nsrc, ~cfreqs, ~cbands / ~cfreqs, noise]));\
		sig = (filt ** 0.5).clip2(clip) \
			* \cf2 EnvGen\cf0 .kr(env, timeScale: dur, doneAction: doneAction);\
		\cf2 Out\cf0 .ar(efx, sig * eamp);\
		bf = \cf2 BFEncode1\cf0 .ar(sig, azm, elv, rho);\
		\cf2 Out\cf0 .ar(out, bf * aamp);\
	\}).add;\
\};\
\
~mdef = \{\cf2 |name, maxpart, func|\cf0 \
	\cf2 SynthDef\cf0 (name, \{\cf2 |out, efx, aamp, eamp, dur, rate, abuffer, wbuffer, wfrq, wsz, dns, rnd, \
		samp, namp, doneAction = 2|\cf0 \
		\cf2 var\cf0  warp, ats, noise, pointer, amps, freqs, parts, sig, env, bf; \
		\cf2 var\cf0  morph, azm, elv, rho;\
		parts = (0..maxpart);\
		morph = \cf2 Control\cf0 .names([\cf4 \\morph\cf0 ]).kr(\cf2 Env\cf0 .newClear(8).asArray);\
		env = \cf2 Control\cf0 .names([\cf4 \\env\cf0 ]).kr(\cf2 Env\cf0 .newClear(8).asArray);\
		azm = \cf2 EnvGen\cf0 .kr(\cf2 Control\cf0 .names([\cf4 \\azm\cf0 ]).kr(\cf2 Env\cf0 .newClear(8).asArray), timeScale: dur);\
		elv = \cf2 EnvGen\cf0 .kr(\cf2 Control\cf0 .names([\cf4 \\elv\cf0 ]).kr(\cf2 Env\cf0 .newClear(8).asArray), timeScale: dur);\
		rho = \cf2 EnvGen\cf0 .kr(\cf2 Control\cf0 .names([\cf4 \\rho\cf0 ]).kr(\cf2 Env\cf0 .newClear(8).asArray), timeScale: dur);\
		pointer = \cf2 LFSaw\cf0 .kr(rate, 1, 0.5, 0.5);\
		amps = \cf2 AtsAmp\cf0 .kr(abuffer, parts, pointer);\
		freqs = \cf2 AtsFreq\cf0 .kr(abuffer, parts, pointer);\
		noise = \cf2 AtsNoise\cf0 .kr(abuffer, (0..24), pointer);\
		warp = \cf2 SndWarp\cf0 .ar(wbuffer, pointer, wfrq, wsz, dns, rnd);\
		ats = \cf2 Mix\cf0 (\cf2 SynthDef\cf0 .wrap(func, \cf2 nil\cf0 , [freqs, amps])) * samp;\
		noise = \cf2 Mix\cf0 (\cf2 BPF\cf0 .ar(\cf2 WhiteNoise\cf0 .ar(0.01), ~cfreqs, ~cbands / ~cfreqs, noise)) * namp;\
		ats = ats + noise;\
		sig = \cf2 XFade2\cf0 .ar(warp, ats, \cf2 EnvGen\cf0 .kr(morph, timeScale: dur)) \
			* \cf2 EnvGen\cf0 .kr(env, timeScale: dur, doneAction: doneAction);		\
		\cf2 Out\cf0 .ar(efx, sig * eamp);\
		bf = \cf2 BFEncode1\cf0 .ar(sig, azm, elv, rho);\
		\cf2 Out\cf0 .ar(out, bf * aamp);\
	\}).add;\
\};\
\
~adef = \{\cf2 |name, afunc, maxpart|\cf0 \
	\cf2 SynthDef\cf0 (name, \{\cf2 |out, efx, aamp, eamp, dur, rate, buffer, doneAction = 2|\cf0 \
		\cf2 var\cf0  env, sig, args, bf, pointer, freqs, amps, parts, azm, elv, rho;\
		env = \cf2 Control\cf0 .names([\cf4 \\env\cf0 ]).kr(\cf2 Env\cf0 .newClear(8).asArray);\
		azm = \cf2 EnvGen\cf0 .kr(\cf2 Control\cf0 .names([\cf4 \\azm\cf0 ]).kr(\cf2 Env\cf0 .newClear(8).asArray), timeScale: dur);\
		elv = \cf2 EnvGen\cf0 .kr(\cf2 Control\cf0 .names([\cf4 \\elv\cf0 ]).kr(\cf2 Env\cf0 .newClear(8).asArray), timeScale: dur);\
		rho = \cf2 EnvGen\cf0 .kr(\cf2 Control\cf0 .names([\cf4 \\rho\cf0 ]).kr(\cf2 Env\cf0 .newClear(8).asArray), timeScale: dur);\
		pointer = \cf2 LFSaw\cf0 .kr(rate, 1, 0.5, 0.5);\
		parts = (0..maxpart);\
		amps = \cf2 AtsAmp\cf0 .kr(buffer, parts, pointer);\
		freqs = \cf2 AtsFreq\cf0 .kr(buffer, parts, pointer);\
		sig = \cf2 Mix\cf0 (\cf2 SynthDef\cf0 .wrap(afunc, \cf2 nil\cf0 , [freqs, amps]))\
			* \cf2 EnvGen\cf0 .kr(env, timeScale: dur, doneAction: doneAction);	\
		\cf2 Out\cf0 .ar(efx, sig * eamp);\
		bf = \cf2 BFEncode1\cf0 .ar(sig, azm, elv, rho);\
		\cf2 Out\cf0 .ar(out, bf * aamp);\
	\}).add;\
	name\
\};\
\
~flt = (\
	\cf4 \\reson\cf0 : \{\cf2 |src, freqs, rq, amps|\cf0  \cf2 Resonz\cf0 .ar(src, freqs, rq, amps) \},\
	\cf4 \\bpf\cf0 : \{\cf2 |src, freqs, rq, amps|\cf0  \cf2 BPF\cf0 .ar(src, freqs, rq, amps) \},\
	\cf4 \\eq\cf0 : \{\cf2 |src, freqs, rq, amps|\cf0  \cf2 MidEQ\cf0 .ar(src, freqs, rq, amps.ampdb) \},\
	\cf4 \\rhpf\cf0 : \{\cf2 |src, freqs, rq, amps|\cf0  \cf2 RHPF\cf0 .ar(src, freqs, rq, amps) \}\
);\
\
~nzw = (\
	\cf4 \\gray\cf0 : \{ \cf2 GrayNoise\cf0 .ar(0.01) \}, \
	\cf4 \\brown\cf0 : \{ \cf2 BrownNoise\cf0 .ar(0.03) \},\
	\cf4 \\crackle\cf0 : \{ \cf2 Crackle\cf0 .ar(1.99, 0.03) \},\
	\cf4 \\logistic\cf0 : \{\cf2 |freq|\cf0  \cf2 Logistic\cf0 .ar(freq.linlin(20.0, 20000.0, 3.5, 4.0, 3.99), freq, \
		freq.linlin(20.0, 20000.0, 0.2, 0.8, 0.8), 0.03) \},\
	\cf4 \\dust\cf0 : \{\cf2 |freq|\cf0  \cf2 Dust2\cf0 .ar(freq, 0.09) \},\
	\cf4 \\lf0\cf0 : \{\cf2 |freq|\cf0  \cf2 LFNoise0\cf0 .ar(freq, 0.03) \}\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf0 );\
\
~awr = (\
	\cf4 \\sine\cf0 : \{\cf2 |freqs, amps|\cf0  \cf2 SinOsc\cf0 .ar(freqs, 0, amps) \},\
	\cf4 \\vsaw\cf0 : \{\cf2 |freqs, amps|\cf0  \cf2 VarSaw\cf0 .ar(freqs, 0, 0.5, amps) \},\
	\cf4 \\plse\cf0 : \{\cf2 |freqs, amps|\cf0  \cf2 Pulse\cf0 .ar(freqs, 0.5, amps) * 0.5 \},\
	\cf4 \\pmsc\cf0 : \{\cf2 |freqs, amps|\cf0  \cf2 PMOsc\cf0 .ar(freqs, freqs, 10.0, 0, amps)\}\
);\
\
~msrc = (\
	\cf4 \\white\cf0 : \{\cf2 |freqs, amps, rq|\cf0  \cf2 BPF\cf0 .ar(\cf2 WhiteNoise\cf0 .ar, freqs, rq, amps) \},\
	\cf4 \\dust\cf0 : \{\cf2 |freqs, amps, rq|\cf0  \cf2 BPF\cf0 .ar(\cf2 Dust2\cf0 .ar(freqs), freqs, rq, amps) \},\
	\cf4 \\crackle\cf0 : \{\cf2 |freqs, amps, rq|\cf0  \cf2 BPF\cf0 .ar(\cf2 Crackle\cf0 .ar(1.97), freqs, rq, amps ) \}\
);\
\
~mflt = (\
	\cf4 \\bpf\cf0 : \{\cf2 |src, freqs, amps|\cf0  \cf2 BPF\cf0 .ar(src, freqs, amps, amps) \},\
	\cf4 \\reson\cf0 : \{\cf2 |src, freqs, amps|\cf0  \cf2 Resonz\cf0 .ar(src, freqs, amps, amps) \},\
	\cf4 \\formlet\cf0 : \{\cf2 |src, freqs, amps|\cf0  \cf2 Formlet\cf0 .ar(src, freqs, amps, amps*amps, amps) \}\
);\
\
\
~noisedefs = \cf2 Array\cf0 ();\
~arr = \cf2 Array\cf0 ();\
\
\cf2 Routine\cf0 (\{\
	\cf2 var\cf0  cnt = 0;\
	\cf2 var\cf0  spread = 14;\
	\cf2 var\cf0  lowest = 0;\
	\cf2 var\cf0  currentIndex = -1;\
	\
	\cf2 var\cf0  prog = \cf2 ProgBar\cf0 (~nzw.size * ~flt.size);\
	\
	~nzw.keysValuesDo(\{\cf2 |skey, sfnc|\cf0 \
		~flt.keysValuesDo(\{\cf2 |fkey, ffnc|\cf0 \
			~noisedefs = ~noisedefs.add((fkey ++ skey).asSymbol);\
			~ndef.value((fkey ++ skey).asSymbol, sfnc, ffnc, (skey == \cf4 \\dust\cf0 ).or(skey == \cf4 \\lf0\cf0 ));\
			cnt = cnt + 1;\
			prog.update(cnt);\
			0.01.wait;\
		\})\
	\});\
	\
	prog.close;\
	\
	0.1.wait;\
\
	~atsdata.collect(\cf2 _\cf0 .nparts).sort.doAdjacentPairs(\{\cf2 |a, b|\cf0 \
		if (a - lowest <= spread) \
			\{ ~arr[currentIndex] = ~arr[currentIndex].add(a) \}\
			\{ ~arr = ~arr.add(\cf2 Array\cf0 .with(a)); lowest = a; currentIndex = currentIndex + 1; \}\
	\});\
\
	prog = \cf2 ProgBar\cf0 (~arr.size * ~awr.size);\
		\
	~atsdefs = \cf2 Array\cf0 ();\
	~arr.do(\{\cf2 |nums|\cf0 \
		~awr.keysValuesDo(\{\cf2 |key, val|\cf0 \
			nums[0].postln;\
			~atsdefs = ~atsdefs.add( \
				~adef.value((key.asString ++ \cf3 "_"\cf0  ++ nums[0].asString).asSymbol , val, \
				nums[0] )\
			);\
			~serv.sync;\
			prog.next;\
			0.01.wait;\
		\})\
	\});\
	\
	prog.close;\
	\
	0.1.wait;	\
	\
	prog = \cf2 ProgBar\cf0 (~arr.size * ~awr.size);\
	\
	~morphdef = \cf2 Array\cf0 ();\
	~arr.collect(\cf2 _\cf0 .[0]).do(\{\cf2 |parts|\cf0 \
		~awr.keysValuesDo(\{\cf2 |key, val|\cf0 \
			\cf2 var\cf0  name;\
			name = \cf3 "m_"\cf0  ++ parts.asString ++ \cf3 "_"\cf0  ++ key.asString;\
			~morphdef = ~morphdef.add(name);\
			~mdef.value(name, parts, val);\
			~serv.sync;\
			prog.next;\
			0.01.wait;\
		\})\
	\});\
	\
	prog.close;\
	\
	\
\}).play(\cf2 AppClock\cf0 );\
\
\pard\pardeftab720\ql\qnatural
\cf2 SynthDef\cf0 (\cf4 \\asynth\cf0 , \{\cf2 |out, efx, aamp, eamp, dur, rate, buffer, nparts, start, skip, doneAction = 2|\cf0 \
	\cf2 var\cf0  env, bf, pointer, sig, azm, elv, rho;\
	env = \cf2 Control\cf0 .names([\cf4 \\env\cf0 ]).kr(\cf2 Env\cf0 .newClear(8).asArray);\
	azm = \cf2 EnvGen\cf0 .kr(\cf2 Control\cf0 .names([\cf4 \\azm\cf0 ]).kr(\cf2 Env\cf0 .newClear(8).asArray), timeScale: dur);\
	elv = \cf2 EnvGen\cf0 .kr(\cf2 Control\cf0 .names([\cf4 \\elv\cf0 ]).kr(\cf2 Env\cf0 .newClear(8).asArray), timeScale: dur);\
	rho = \cf2 EnvGen\cf0 .kr(\cf2 Control\cf0 .names([\cf4 \\rho\cf0 ]).kr(\cf2 Env\cf0 .newClear(8).asArray), timeScale: dur);	\
	pointer = \cf2 LFSaw\cf0 .kr(rate, 1, 0.5, 0.5);\
	sig = \cf2 AtsSynth\cf0 .ar(buffer, nparts, start, skip, pointer)\
		* \cf2 EnvGen\cf0 .kr(env, timeScale: dur, doneAction: doneAction);\
	\cf2 Out\cf0 .ar(efx, sig * eamp);\
	bf = \cf2 BFEncode1\cf0 .ar(sig, azm, elv, rho);\
	\cf2 Out\cf0 .ar(out, bf * aamp);\
\}).memStore;\
\
\cf2 SynthDef\cf0 (\cf4 \\swells\cf0 , \{\cf2 |out, efx, aamp, eamp, dur, buffer, bufdur, rate, freq, doneAction=2|\cf0 \
	\cf2 var\cf0  parts, rates, sig, bf, env, azm, elv, rho;\
	parts = (0..~atsdata.collect(\cf2 _\cf0 .nparts).sort[0]);\
	rates = \cf2 Array\cf0 .rand(parts.size, 0.5, 2.0).scramble;\
	env = \cf2 Control\cf0 .names([\cf4 \\env\cf0 ]).kr(\cf2 Env\cf0 .newClear(8).asArray);\
	azm = \cf2 EnvGen\cf0 .kr(\cf2 Control\cf0 .names([\cf4 \\azm\cf0 ]).kr(\cf2 Env\cf0 .newClear(8).asArray), timeScale: dur);\
	elv = \cf2 EnvGen\cf0 .kr(\cf2 Control\cf0 .names([\cf4 \\elv\cf0 ]).kr(\cf2 Env\cf0 .newClear(8).asArray), timeScale: dur);\
	rho = \cf2 EnvGen\cf0 .kr(\cf2 Control\cf0 .names([\cf4 \\rho\cf0 ]).kr(\cf2 Env\cf0 .newClear(8).asArray), timeScale: dur);	\
	sig = \cf2 Mix\cf0 .fill(parts.size, \{\cf2 |i|\cf0 \
		\cf2 var\cf0  ptr;\
		ptr = \cf2 LFSaw\cf0 .kr(1 / bufdur * rates[i] * rate, \cf2 Rand\cf0 (0, 2), 0.5, 0.5);\
		\cf2 VarSaw\cf0 .ar(\cf2 AtsFreq\cf0 .kr(buffer, i, ptr) * freq, 0, 0.2, \cf2 AtsAmp\cf0 .kr(buffer, i, ptr)) \
			* \cf2 SinOsc\cf0 .kr(\cf2 Rand\cf0 (0.1, 0.2), \cf2 Rand\cf0 (0, 2pi), 0.5, 0.5)\
	\}) * \cf2 EnvGen\cf0 .kr(env, timeScale: dur, doneAction: doneAction);\
	\cf2 Out\cf0 .ar(efx, sig * eamp);\
	bf = \cf2 BFEncode1\cf0 .ar(sig, azm, elv, rho);\
	\cf2 Out\cf0 .ar(out, bf * aamp)\
\}).memStore;\
\
\cf2 SynthDef\cf0 (\cf4 \\swarp\cf0 , \{\cf2 |out, efx, aamp, eamp, dur, buf, str, end, wrp, frq, wsz, dns, rnd|\cf0 \
	\cf2 var\cf0  ptr, sig, env, bf, azm, elv, rho;\
	env = \cf2 Control\cf0 .names([\cf4 \\env\cf0 ]).kr(\cf2 Env\cf0 .newClear(8).asArray);	\
	azm = \cf2 EnvGen\cf0 .kr(\cf2 Control\cf0 .names([\cf4 \\azm\cf0 ]).kr(\cf2 Env\cf0 .newClear(8).asArray), timeScale: dur);\
	elv = \cf2 EnvGen\cf0 .kr(\cf2 Control\cf0 .names([\cf4 \\elv\cf0 ]).kr(\cf2 Env\cf0 .newClear(8).asArray), timeScale: dur);\
	rho = \cf2 EnvGen\cf0 .kr(\cf2 Control\cf0 .names([\cf4 \\rho\cf0 ]).kr(\cf2 Env\cf0 .newClear(8).asArray), timeScale: dur);	\
	ptr = \cf2 LFSaw\cf0 .kr(wrp).range(str, end);\
	sig = \cf2 SndWarp\cf0 .ar(buf, ptr, frq, wsz, dns, rnd) * \
		\cf2 EnvGen\cf0 .kr(env, timeScale: dur, doneAction: 2);\
	sig = sig ** 0.5;\
	\cf2 Out\cf0 .ar(efx, sig * eamp);\
	bf = \cf2 BFEncode1\cf0 .ar(sig, azm, elv, rho);\
	\cf2 Out\cf0 .ar(out, bf * aamp)\
\}).memStore;\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\ql\qnatural\pardirnatural
\cf0 \
\pard\pardeftab720\ql\qnatural
\cf2 SynthDef\cf0 (\cf4 \\rwarp\cf0 , \{\cf2 |out, efx, aamp, eamp, dur, buf, str, end, wrp, frq, wsz, dns, rnd|\cf0 \
	\cf2 var\cf0  ptr, sig, env, bf, azm, elv, rho;\
	env = \cf2 Control\cf0 .names([\cf4 \\env\cf0 ]).kr(\cf2 Env\cf0 .newClear(8).asArray);\
	azm = \cf2 EnvGen\cf0 .kr(\cf2 Control\cf0 .names([\cf4 \\azm\cf0 ]).kr(\cf2 Env\cf0 .newClear(8).asArray), timeScale: dur);\
	elv = \cf2 EnvGen\cf0 .kr(\cf2 Control\cf0 .names([\cf4 \\elv\cf0 ]).kr(\cf2 Env\cf0 .newClear(8).asArray), timeScale: dur);\
	rho = \cf2 EnvGen\cf0 .kr(\cf2 Control\cf0 .names([\cf4 \\rho\cf0 ]).kr(\cf2 Env\cf0 .newClear(8).asArray), timeScale: dur);	\
	ptr = \cf2 LFSaw\cf0 .kr(wrp).range(str, end);\
	sig = \cf2 LeakDC\cf0 .ar(\cf2 Warp1\cf0 .ar(1, buf, ptr, frq, wsz, -1, dns, rnd)) * \
		\cf2 EnvGen\cf0 .kr(env, timeScale: dur, doneAction: 2);\
	sig = sig ** 0.5;\
	\cf2 Out\cf0 .ar(efx, sig * eamp);\
	bf = \cf2 BFEncode1\cf0 .ar(sig, azm, elv, rho);\
	\cf2 Out\cf0 .ar(out, bf * aamp)\
\}).memStore;\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf0 \
\cf2 SynthDef\cf0 (\cf4 \\verb\cf0 , \{\cf2 |in, rtime, damp, inbw, spr, dry, early, tail, amp|\cf0 \
	\cf2 var\cf0  sig, input, actr, fb;\
	input = \cf2 In\cf0 .ar(in) * \
		\cf2 EnvGen\cf0 .kr(\cf2 Env\cf0 ([0.001, 1.0, 1.0, 0.001], [0.3, 0.4, 0.3], \cf4 \\sine\cf0 ), \cf2 Impulse\cf0 .kr(0.04), timeScale:0.04.reciprocal);\
	fb = \cf2 LocalIn\cf0 .ar;\
	sig = \cf2 GVerb\cf0 .ar(input + fb, 1500, rtime, damp, inbw, spr, dry, early, tail, 1500);\
	\cf2 LocalOut\cf0 .ar(\cf2 Mix\cf0 (sig) * 0.01);\
	sig = sig + \cf2 PitchShift\cf0 .ar(sig, 0.1, [0.5, 2.0], mul: 0.1);\
	\cf2 Out\cf0 .ar(0, sig * amp)\
\}).memStore;\
\
\cf2 SynthDef\cf0 (\cf4 \\bf2decode\cf0 , \{\cf2 |bus, amp = 1|\cf0 \
	\cf2 var\cf0  w, x, y, z;\
	#w, x, y, z = \cf2 In\cf0 .ar(bus, 4);\
	\cf2 Out\cf0 .ar( 0, \cf2 BFDecode1\cf0 .ar(w, x, y, z, \cf2 IbiSpeakers\cf0 .quad.azimuth, (0 ! 4) ) * amp )\
\}).memStore;\
\
\cf2 SynthDef\cf0 (\cf4 \\bfcollect\cf0 , \{\cf2 |bus, amp = 1|\cf0 \
	\cf2 Out\cf0 .ar(0, \cf2 In\cf0 .ar(bus, 4) * amp)\
\}).memStore\
\
)\
\
~serv.prepareForRecord(\cf3 "/Users/alo/sounds/randfbxx.aif"\cf0 );\
\
(\
~abus = \cf2 Bus\cf0 .audio(~serv, 4);\
~rbus = \cf2 Bus\cf0 .audio(~serv);\
~agrp = \cf2 Group\cf0 ();\
~rev = \cf2 Synth\cf0 .after(~agrp, \cf4 \\verb\cf0 , [\cf4 \\in\cf0 , ~rbus, \cf4 \\rtime\cf0 , 2, \cf4 \\damp\cf0 , 0.5, \cf4 \\inbw\cf0 , 0.5, \cf4 \\spr\cf0 , 10, \
	\cf4 \\dry\cf0 , 0.0, \cf4 \\early\cf0 , 0.4, \cf4 \\tail\cf0 , 1.0, \cf4 \\amp\cf0 , 0.5]);	\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf5 //~decode = Synth.after(~rev, \\bf2decode, [\\bus, ~abus, \\amp, 1.0]);\cf0 \
~decode = \cf2 Synth\cf0 .after(~rev, \cf4 \\bfcollect\cf0 , [\cf4 \\bus\cf0 , ~abus, \cf4 \\amp\cf0 , 1.0]);\
~bps = 140 / 60;\
~div = ~bps.reciprocal;\
\
~eq = \cf2 MasterEQ\cf0 (2)\
\
)\
\
(\
\pard\pardeftab720\ql\qnatural
\cf0 \
~noise = \cf2 nil\cf0 ;\
~warp = \cf2 nil\cf0 ;\
~rhyx = \cf2 nil\cf0 ;\
~atsp = \cf2 nil\cf0 ;\
~morph = \cf2 nil\cf0 ;\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf0 \
~noise = \cf2 Pbind\cf0 (\
	\cf4 \\atsdata\cf0 , \cf2 Pstutter\cf0 (\cf2 Pbrown\cf0 (1, 5, 1, \cf2 inf\cf0 ), \
		\cf2 Pseq\cf0 (~atsdata, \cf2 inf\cf0 )),\
	\cf4 \\instrument\cf0 , \cf2 Pstutter\cf0 (\cf2 Pwhite\cf0 (1, 4), \cf2 Pseq\cf0 (~noisedefs, \cf2 inf\cf0 )), \
	\cf4 \\group\cf0 , ~agrp, \
	\cf4 \\addAction\cf0 , \cf4 \\addToHead\cf0 , \
	\cf4 \\out\cf0 , ~abus, \
	\cf4 \\efx\cf0 , ~rbus, \
	\cf4 \\aamp\cf0 , \cf2 Pwhite\cf0 (0.3, 0.5, \cf2 inf\cf0 ), \cf5 //Pseq(Array.geom(120, 0.001, 1.0597), 1), \cf0 \
	\cf4 \\eamp\cf0 , \cf2 Pshuf\cf0 (\cf2 Array\cf0 .rand(8, 0.05, 0.1), \cf2 inf\cf0  ),\
	\cf4 \\samp\cf0 , 0.3, \
	\cf4 \\dur\cf0 , \cf2 Punop\cf0 (\cf4 \\dur\cf0 , \cf2 Pkey\cf0 (\cf4 \\atsdata\cf0 )) * \cf2 Pseq\cf0 ([0.5, 0.25, 1.0], \cf2 inf\cf0 ), \
	\cf4 \\rq\cf0 , 0.3,\
	\cf4 \\buffer\cf0 , \cf2 Punop\cf0 (\cf4 \\buffer\cf0 , \cf2 Pkey\cf0 (\cf4 \\atsdata\cf0 )), \
	\cf4 \\rate\cf0 , 1.0 / \cf2 Pkey\cf0 (\cf4 \\dur\cf0 ), \
	\cf4 \\azm\cf0 , \cf2 Pwhite\cf0 (-pi, pi, \cf2 inf\cf0 ), \
	\cf4 \\elv\cf0 , 0, \cf4 \\rho\cf0 , \cf2 Pwhite\cf0 (0.1, 0.6, \cf2 inf\cf0 ), \
	\cf4 \\clip\cf0 , 0.8, \
	\cf4 \\delta\cf0 , \cf2 Pkey\cf0 (\cf4 \\dur\cf0 ) * \cf2 Pwrand\cf0 ( \cf2 Array\cf0 .geom(4, 0.125, 2), (1..4).normalizeSum, \cf2 inf\cf0  ),\
	\cf4 \\env\cf0 , [\cf2 Env\cf0 ([0.001, 1.0, 1.0, 0.001], [0.01, 0.39, 0.6], \cf4 \\sine\cf0 )],\
	\cf4 \\debug\cf0 , \cf2 Pfunc\cf0 (\{\cf2 |ev|\cf0  \
		\cf3 "noise _:_ "\cf0 .post; \
		ev.instrument.post; \
		\cf3 " _:_ "\cf0 .post; \
		ev.atsdata.file.post;\
		\cf3 " _:_ "\cf0 .post; 		\
		ev.atsdata.nparts.postln; \
	\}) \
);\
\pard\pardeftab720\ql\qnatural
\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf0 ~warp = \cf2 Pbind\cf0 (\
	\cf4 \\instrument\cf0 , \cf2 Prand\cf0 ([\cf4 \\rwarp\cf0 , \cf4 \\swarp\cf0 ], \cf2 inf\cf0 ), \
	\cf4 \\group\cf0 , ~agrp, \
	\cf4 \\addAction\cf0 , \cf4 \\addToHead\cf0 , \
	\cf4 \\out\cf0 , ~abus, \
	\cf4 \\efx\cf0 , ~rbus, \
	\cf4 \\aamp\cf0 , 0.0, \cf5 //Pbrown(0.05, 0.2, 0.005, inf), \cf0 \
	\cf4 \\eamp\cf0 , 0.2, \
	\cf4 \\dur\cf0 , \cf2 Pxrand\cf0 (\cf2 Array\cf0 .geom(24, 2, 4**(1/24)), \cf2 inf\cf0 ), \
	\cf4 \\buf\cf0 , \cf2 Pstutter\cf0 (\cf2 Pwhite\cf0 (3, 6), \cf2 Pseq\cf0 (~loops.select(\{\
		\cf2 |loop|\cf0  loop.path.contains(\cf3 "sumeloop"\cf0 ) \
	\}), \cf2 inf\cf0 )), \
	\cf4 \\str\cf0 , \cf2 Pwhite\cf0 (0.0, 0.5), \
	\cf4 \\end\cf0 , \cf2 Pkey\cf0 (\cf4 \\str\cf0 ) + \cf2 Pxrand\cf0 ([0.125, 0.25, 0.5], \cf2 inf\cf0 ), \
	\cf4 \\wrp\cf0 , \cf2 Pbrown\cf0 (0.001, 0.1, 0.001), \
	\cf4 \\wsz\cf0 , \cf2 Pbrown\cf0 (0.01, 0.2, 0.005), \
	\cf4 \\dns\cf0 , \cf2 Pxrand\cf0 (7.fib, \cf2 inf\cf0 ), \
	\cf4 \\rnd\cf0 , \cf2 Pkey\cf0 (\cf4 \\wsz\cf0 ) * \cf2 Prand\cf0 (\cf2 Array\cf0 .geom(6, 0.1, 2**(1/6)), \cf2 inf\cf0 ),\
	\cf4 \\frq\cf0 , \cf2 Prand\cf0 (\cf2 Array\cf0 .geom(5, 0.5, 2**(1/5)) ++ \cf2 Array\cf0 .geom(5, 1, 2**(1/5)), \cf2 inf\cf0  ),\
	\cf4 \\azm\cf0 , \cf2 Pwhite\cf0 (-pi, pi, \cf2 inf\cf0 ), \
	\cf4 \\elv\cf0 , \cf2 Pwhite\cf0 (-0.5pi, 0.5pi), \
	\cf4 \\rho\cf0 , \cf2 Pwhite\cf0 (0.01, 2.0, \cf2 inf\cf0 ), \
	\cf4 \\delta\cf0 , \cf2 Pkey\cf0 (\cf4 \\dur\cf0 ) * \cf2 Pbrown\cf0 (0, 0.25, 0.015625),\
	\cf4 \\env\cf0 , [\cf2 Env\cf0 ([0.001, 1.0, 1.0, 0.001], [0.2, 0.6, 0.2], \cf4 \\sine\cf0 )],\
	\cf4 \\debug\cf0 , \cf2 Pfunc\cf0 (\{\cf2 |ev|\cf0  ev.buf.path.post; \cf3 " _:_ "\cf0 .post; ev.instrument.postln; \})\
	\
);\
\
~rhyx = \cf2 Pbind\cf0 (\
	\cf4 \\instrument\cf0 , \cf4 \\swells\cf0 , \
	\cf4 \\data\cf0 , \cf2 Pstutter\cf0 (\cf2 Pwhite\cf0 (1, 4), \cf2 Pseq\cf0 (~atsdata, \cf2 inf\cf0 )), \
	\cf4 \\dur\cf0 , \cf2 Pxrand\cf0 ([\cf2 Pseq\cf0 ([0.2, 0.1, 0.25], 2), \cf2 Pshuf\cf0 ((0.01!6)++(0.07!6), 1), \
		\cf2 Pseq\cf0 ([0.02, 0.03, 0.04, 0.03, 0.02], 1)], \cf2 inf\cf0 ), \
	\cf4 \\bufdur\cf0 , \cf2 Punop\cf0 (\cf4 \\dur\cf0 , \cf2 Pkey\cf0 (\cf4 \\data\cf0 )), \
	\cf4 \\group\cf0 , ~agrp, \
	\cf4 \\addAction\cf0 , \cf4 \\addToHead\cf0 ,\
	\cf4 \\out\cf0 , ~abus,\
	\cf4 \\efx\cf0 , ~rbus,\
	\cf4 \\aamp\cf0 , 4.0, \
	\cf4 \\eamp\cf0 , 0.1, \
	\cf4 \\buffer\cf0 , \cf2 Punop\cf0 (\cf4 \\buffer\cf0 , \cf2 Pkey\cf0 (\cf4 \\data\cf0 )), \
	\cf4 \\azm\cf0 , \cf2 Pwhite\cf0 (-pi, pi), \
	\cf4 \\elv\cf0 , \cf2 Pwhite\cf0 (-0.5pi, 0.5pi), \
	\cf4 \\rho\cf0 , \cf2 Pwhite\cf0 (0.001, 2.0), \
	\cf4 \\rate\cf0 , 10, \
	\cf4 \\freq\cf0 , 1, \
	\cf4 \\delta\cf0 , \cf2 Pxrand\cf0 ([\cf2 Pseq\cf0 ([0.125, 0.25, 0.25], 4), \cf2 Pseq\cf0 ([0.125, 0.125, 0.25, 0.25], 3), \
		\cf2 Pshuf\cf0 ((0.0625!8)++(0.125!4)++(0.25!2), 1), \cf2 Pxrand\cf0 (1/[2,3,6,8], 4)], \cf2 inf\cf0 ), \
	\cf4 \\doneAction\cf0 , 2, \
	\cf4 \\env\cf0 , [\cf2 Env\cf0 .perc(curve: 4.0)],\
	\cf4 \\debug\cf0 , \cf2 Pfunc\cf0 (\{\cf2 |ev|\cf0  \cf3 "rhyx"\cf0 .post; \cf3 " _:_ "\cf0 .post; ev.data.nparts.postln; \}) \
	\
);\
\
\
~atsp = \cf2 Pbind\cf0 (\
	\cf4 \\data\cf0 , \cf2 Pstutter\cf0 (\cf2 Pwhite\cf0 (1, 5), \cf2 Pxrand\cf0 (~atsdata, \cf2 inf\cf0 )),\
	\cf4 \\instrument\cf0 , \cf2 Pfunc\cf0 (\{\cf2 |curr|\cf0  \
		\cf2 var\cf0  ind;\
		ind = ~arr.collect(\cf2 _\cf0 .[0]).detectIndex(\{\cf2 |it, i|\cf0  \
			(it <= curr.data.nparts).and(~arr.collect(\cf2 _\cf0 .[0]).clipAt(i + 1) >= curr.data.nparts)\
		\});\
		if (ind.isNil) \{ ind = ~atsdefs.clump(~awr.size).lastIndex \}; \
		~atsdefs.clump(~awr.size)[ind].choose \
	\}),\
	\cf4 \\group\cf0 , ~agrp, \
	\cf4 \\addAction\cf0 , \cf4 \\addToHead\cf0 , 	\
	\cf4 \\out\cf0 , ~abus, \
	\cf4 \\efx\cf0 , ~rbus, \
	\cf4 \\aamp\cf0 , 1.0, \
	\cf4 \\eamp\cf0 , 0.1, \
	\cf4 \\dur\cf0 , \cf2 Punop\cf0 (\cf4 \\dur\cf0 , \cf2 Pkey\cf0 (\cf4 \\data\cf0 )),\
	\cf4 \\rate\cf0 , \cf2 Pxrand\cf0 ((1 / \cf2 Array\cf0 .geom(11, 1.0, 2**(1/11))).reverse ++ \cf2 Array\cf0 .geom(11, 1.0, 2**(1/11)) * 10, \cf2 inf\cf0 ),\
	\cf4 \\buffer\cf0 , \cf2 Punop\cf0 (\cf4 \\buffer\cf0 , \cf2 Pkey\cf0 (\cf4 \\data\cf0 )),\
	\cf4 \\azm\cf0 , \cf2 Pwhite\cf0 (-pi, pi),\
	\cf4 \\elv\cf0 , \cf2 Pwhite\cf0 (-0.5pi, 0.5pi), \
	\cf4 \\rho\cf0 , \cf2 Pwhite\cf0 (0.1, 2.0),\
	\cf4 \\doneAction\cf0 , 2, \
	\cf4 \\env\cf0 , [\cf2 Env\cf0 ([0.001, 1.0, 1.0, 0.001], [0.2, 0.6, 0.2], \cf4 \\sine\cf0 )],\
	\cf4 \\delta\cf0 , \cf2 Pkey\cf0 (\cf4 \\dur\cf0 ) * 0.8,\
	\cf4 \\debug\cf0 , \cf2 Pfunc\cf0 (\{\cf2 |ev|\cf0  \cf3 "ats _:_"\cf0 .post; ev.instrument.post; \cf3 "_:_"\cf0 .post; ev.data.nparts.postln; \})\
);\
\pard\pardeftab720\ql\qnatural
\cf0 			\
~morph = \cf2 Pbind\cf0 (\
	\cf4 \\data\cf0 , \cf2 Pstutter\cf0 (\cf2 Pwhite\cf0 (2, 5), \cf2 Pseq\cf0 (~atsdata.select(\{\cf2 |loop|\cf0  \
		(loop.file.contains(\cf3 "memorloop"\cf0 ).or(loop.file.contains(\cf3 "tehisloop"\cf0 )))\
	\}), \cf2 inf\cf0 )),\
	\cf4 \\instrument\cf0 , \cf2 Pfunc\cf0 (\{\cf2 |ev|\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf0 		\cf2 var\cf0  ind;\
		ind = ~arr.collect(\cf2 _\cf0 .[0]).detectIndex(\{\cf2 |it, i|\cf0  \
			(it <= ev.data.nparts).and(~arr.collect(\cf2 _\cf0 .[0]).clipAt(i + 1) >= ev.data.nparts)\
		\});\
		if (ind.isNil) \{ ind = ~morphdef.lastIndex \}; \
		~morphdef[ind]\
\pard\pardeftab720\ql\qnatural
\cf0 	\}),\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf0 	\cf4 \\group\cf0 , ~agrp, \
	\cf4 \\addAction\cf0 , \cf4 \\addToHead\cf0 , 	\
	\cf4 \\out\cf0 , ~abus, \
	\cf4 \\efx\cf0 , ~rbus, \
	\cf4 \\aamp\cf0 , 2.0, \
	\cf4 \\eamp\cf0 , 0.2, \
	\cf4 \\dur\cf0 , \cf2 Punop\cf0 (\cf4 \\dur\cf0 , \cf2 Pkey\cf0 (\cf4 \\data\cf0 )),\
	\cf4 \\rate\cf0 , 1.0 / \cf2 Pkey\cf0 (\cf4 \\dur\cf0 ),\
	\cf4 \\abuffer\cf0 , \cf2 Pxrand\cf0 ((0, 0.125..1.0).drop(2), \cf2 inf\cf0 ),\cf5 //Punop(\\buffer, Pkey(\\data)),\cf0 \
	\cf4 \\wbuffer\cf0 , \cf2 Pfunc\cf0 (\{\cf2 |ev|\cf0 \
		~loops.select(\{\cf2 |buf|\cf0  buf.path.basename.split($.)[0] == ev.data.file.basename.split($.)[0] \}).first\
	\}),\
	\cf4 \\wfrq\cf0 , 1.0, \
	\cf4 \\wsz\cf0 , 0.1, \
	\cf4 \\dns\cf0 , 10, \
	\cf4 \\rnd\cf0 , 0.01, \
	\cf4 \\azm\cf0 , \cf2 Pwhite\cf0 (-pi, pi),\
	\cf4 \\elv\cf0 , \cf2 Pwhite\cf0 (-0.5pi, 0.5pi), \
	\cf4 \\rho\cf0 , 0.1,\
	\cf4 \\samp\cf0 , 0.3,\
	\cf4 \\namp\cf0 , 1.0,\
	\cf4 \\doneAction\cf0 , 2, \
	\cf4 \\morph\cf0 , \cf2 Pfunc\cf0 (\{  \
		[\
		[\
			\cf2 Env\cf0 ([0.001, 0.5, 0.999], [0.5, 0.5], [6, -6]),\
			\cf2 Env\cf0 ([0.999, 0.5, 0.001], [0.5, 0.5], [6, -6]),\
			\cf2 Env\cf0 ([0.001, 0.5, 0.5, 0.999], [0.4, 0.2, 0.4], [-6, 0, 6]),\
			\cf2 Env\cf0 ([0.001, 0.999, 0.999, 0.001], [0.33, 0.33, 0.33], [3, 0, -3]),\
			\cf2 Env\cf0 ([0.999, 0.001, 0.001, 0.999], [0.33, 0.33, 0.33], [3, 0, -3]),\
			\cf2 Env\cf0 ([0.5, 0.001, 0.999, 0.5], [0.33, 0.33, 0.33], [4, 4, 4]),\
			\cf2 Env\cf0 ([0, 1], [1]),\
			\cf2 Env\cf0 ([1, 0], [1]),\
			\cf2 Env\cf0 ([0.5, 0.2, 0.8, 0.2, 0.8, 0.5], (1/5 ! 5), (-4 ! 5))\
		].choose\
		]\
	\}),\
	\cf4 \\env\cf0 , [\cf2 Env\cf0 ([0.001, 1.0, 1.0, 0.001], [0.1, 0.8, 0.1])],\
	\cf4 \\delta\cf0 , \cf2 Pkey\cf0 (\cf4 \\dur\cf0 ) * 0.7,\
	\cf4 \\debug\cf0 , \cf2 Pfunc\cf0 (\{\cf2 |ev|\cf0 \
		\cf3 "morph _:_"\cf0 .post; ev.instrument.post; \cf3 "_:_"\cf0 .post; ev.wbuffer.postln;\
	\})\
\pard\pardeftab720\ql\qnatural
\cf0 );\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf0 \
)\
\
~atsp.play\
\
~morph.play\
\
~morph.stop\
\
~rhyx.play\
\
~noise.play\
\
~atsp.stop\
\
~eq = \cf2 MasterEQ\cf0 (2)\
\
~serv.scope\
\
~play = ~warp.play\
\
~warp.stop\
\
~play = ~morph.play\
\
~play = \cf2 Ppar\cf0 ([~warp, ~noise, ~morph, ~atsp]).play;\
\
~play = \cf2 Ppar\cf0 ([~warp, ~morph]).play\
\
~play.stop\
 \
~serv.record;\
\
~serv.stopRecording\
\
~play.play\
\
~play.stop\
\
~fx = \cf2 FxLive\cf0 ().gui\
\
~play = \cf2 nil\cf0 \
\
~play.stop\
\
~play.clear\
\
\
\
(\
\
~instr = (\
	nrhythm: \cf2 Pbind\cf0 (\cf4 \\ats\cf0 , \cf2 Pseq\cf0 (~atsdata.select(\{\cf2 |data|\cf0  data[\cf4 \\dur\cf0 ] == 4.0 \}).scramble.keep(5), 8),\
		\cf4 \\instrument\cf0 , \cf2 Pseq\cf0 (~noisedefs, \cf2 inf\cf0 ), \cf4 \\group\cf0 , ~agrp, \cf4 \\addAction\cf0 , \cf4 \\addToHead\cf0 , \
		\cf4 \\delta\cf0 , \cf2 Pseq\cf0 (~div / [4, 2, 4, 2, 4, 8, 8, 8, 8], \cf2 inf\cf0  ), \cf4 \\out\cf0 , ~abus, \cf4 \\efx\cf0 , ~rbus, \
		\cf4 \\aamp\cf0 , \cf2 Pshuf\cf0 (\cf2 Array\cf0 .rand(8, 0.2, 0.6), \cf2 inf\cf0  ), \cf4 \\eamp\cf0 , \cf2 Pshuf\cf0 (\cf2 Array\cf0 .rand(8, 0.1, 0.3), \cf2 inf\cf0  ),\
		\cf4 \\samp\cf0 , 0.3, \cf4 \\dur\cf0 , \cf2 Punop\cf0 (\cf4 \\dur\cf0 , \cf2 Pkey\cf0 (\cf4 \\ats\cf0 )) * \cf2 Pseq\cf0 ([0.5, 0.25, 1.0], \cf2 inf\cf0 ), \cf4 \\rq\cf0 , 0.3,\
		\cf4 \\buffer\cf0 , \cf2 Punop\cf0 (\cf4 \\buffer\cf0 , \cf2 Pkey\cf0 (\cf4 \\ats\cf0 )), \cf4 \\rate\cf0 , 1.0, \cf4 \\azm\cf0 , \cf2 Pwhite\cf0 (-pi, pi, \cf2 inf\cf0 ), \
		\cf4 \\elv\cf0 , 0, \cf4 \\rho\cf0 , \cf2 Pwhite\cf0 (0.1, 0.6, \cf2 inf\cf0 ), \
		\cf4 \\env\cf0 , [\cf2 Env\cf0 .perc.asArray] \
	),\
	\
	arhythm: \cf2 Pbind\cf0 (\cf4 \\ats\cf0 , \cf2 Pstutter\cf0 (\cf2 Pseq\cf0 ([2, 3, 2, 4], \cf2 inf\cf0 ), \
		\cf2 Pseq\cf0 (~atsdata.select(\{\cf2 |data|\cf0  data[\cf4 \\dur\cf0 ] < 2.0 \}), \cf2 inf\cf0 )),\
		\cf4 \\instrument\cf0 , \cf2 Pif\cf0 ( \cf2 Punop\cf0 (\cf4 \\nparts\cf0 , \cf2 Pkey\cf0 (\cf4 \\ats\cf0 )) < ~partCutoff, \cf2 Pseq\cf0 (~atsdefs, \cf2 inf\cf0 ), \
			\cf2 Pseq\cf0 ([\cf4 \\asynth\cf0 ], \cf2 inf\cf0 ) ),\
		\cf4 \\group\cf0 , ~agrp, \cf4 \\addAction\cf0 , \cf4 \\addToHead\cf0 , \
		\cf4 \\delta\cf0 , \cf2 Pwrand\cf0 (~div / (1..5), (1 / (1..5)).normalizeSum, 16),\
		\cf4 \\out\cf0 , ~abus, \cf4 \\efx\cf0 , ~rbus, \cf4 \\aamp\cf0 , \cf2 Pshuf\cf0 (\cf2 Array\cf0 .rand(8, 0.2, 0.6), \cf2 inf\cf0  ), \
		\cf4 \\eamp\cf0 , \cf2 Pshuf\cf0 (\cf2 Array\cf0 .rand(8, 0.1, 0.3), \cf2 inf\cf0  ), \cf4 \\samp\cf0 , 0.3, \cf4 \\dur\cf0 , \cf2 Punop\cf0 (\cf4 \\dur\cf0 , \cf2 Pkey\cf0 (\cf4 \\ats\cf0 )),\
		\cf4 \\buffer\cf0 , \cf2 Punop\cf0 (\cf4 \\buffer\cf0 , \cf2 Pkey\cf0 (\cf4 \\ats\cf0 )), \cf4 \\rate\cf0 , \cf2 Pwrand\cf0 (\cf2 Array\cf0 .geom(5, 1.0, 2 ** (1 / 5)), \cf2 inf\cf0 ),\
		\cf4 \\azm\cf0 , \cf2 Pwhite\cf0 (-pi, pi, \cf2 inf\cf0 ), \cf4 \\elv\cf0 , 0, \cf4 \\rho\cf0 , \cf2 Pwhite\cf0 (0.1, 0.6, \cf2 inf\cf0 ), \
		\cf4 \\env\cf0 , [\cf2 Env\cf0 .perc.asArray]	\
	)\
);\
\
)\
\
p=\cf2 Pbind\cf0 (\cf4 \\instrument\cf0 , \cf4 \\swells\cf0 , \cf4 \\data\cf0 , \cf2 Pstutter\cf0 (\cf2 Pwhite\cf0 (1, 4), \cf2 Pseq\cf0 (~atsdata, 2)), \
\cf4 \\dur\cf0 , \cf2 Pxrand\cf0 ([\cf2 Pseq\cf0 ([0.2, 0.1, 0.25], 2), \cf2 Pshuf\cf0 ((0.01!6)++(0.07!6), 1), \cf2 Pseq\cf0 ([0.02, 0.03, 0.04, 0.03, 0.02], 1)], \cf2 inf\cf0 ), \cf4 \\bufdur\cf0 , \cf2 Punop\cf0 (\cf4 \\dur\cf0 , \cf2 Pkey\cf0 (\cf4 \\data\cf0 )), \cf4 \\out\cf0 , 0, \cf4 \\efx\cf0 , 99, \cf4 \\aamp\cf0 , 2, \cf4 \\eamp\cf0 , 0, \cf4 \\buffer\cf0 , \cf2 Punop\cf0 (\cf4 \\buffer\cf0 , \cf2 Pkey\cf0 (\cf4 \\data\cf0 )), \cf4 \\azm\cf0 , 0, \cf4 \\elv\cf0 , 0, \cf4 \\rho\cf0 , 0, \cf4 \\rate\cf0 , 10, \cf4 \\freq\cf0 , 1, \cf4 \\delta\cf0 , \cf2 Pxrand\cf0 ([\cf2 Pseq\cf0 ([0.125, 0.25, 0.25], 4), \cf2 Pseq\cf0 ([0.125, 0.125, 0.25, 0.25], 3), \cf2 Pshuf\cf0 ((0.0625!8)++(0.125!4)++(0.25!2), 1), \cf2 Pxrand\cf0 (1/[2,3,6,8], 4)], \cf2 inf\cf0 ), \cf4 \\doneAction\cf0 , 2, \cf4 \\env\cf0 , [\cf2 Env\cf0 .perc(curve: 4.0)]\
).play\
\
\pard\pardeftab720\ql\qnatural
\cf0 p = \cf2 Psym\cf0 (\cf2 Pseq\cf0 (#[nrhythm, arhythm], \cf2 inf\cf0 ), ~instr).play;\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf0 \
)\
\
z=\cf2 Synth\cf0 .head(~agrp, \cf4 \\swarp\cf0 , [\cf4 \\out\cf0 , ~abus, \cf4 \\efx\cf0 , ~rbus, \cf4 \\aamp\cf0 , 0.8, \cf4 \\eamp\cf0 , 0.1, \cf4 \\dur\cf0 , 20, \cf4 \\buf\cf0 , ~loops[45],\
\cf4 \\str\cf0 , 0, \cf4 \\end\cf0 , 1, \cf4 \\wrp\cf0 , 0.1, \cf4 \\frq\cf0 , 1, \cf4 \\wsz\cf0 , 0.1, \cf4 \\dns\cf0 , 8, \cf4 \\rnd\cf0 , 0.01, \cf4 \\azm\cf0 , 0.5pi, \cf4 \\elv\cf0 , 0, \cf4 \\rho\cf0 , 0.2\
]).setn(\cf4 \\env\cf0 , \cf2 Env\cf0 ([0.001, 1.0, 1.0, 0.001], [0.2, 0.6, 0.2]))\
\
\
(\
p = \cf2 Pbind\cf0 (\cf4 \\instrument\cf0 , \cf4 \\swarp\cf0 , \cf4 \\group\cf0 , ~agrp, \cf4 \\addAction\cf0 , \cf4 \\addToHead\cf0 , \cf4 \\out\cf0 , ~abus, \cf4 \\efx\cf0 , ~rbus, \
	\cf4 \\aamp\cf0 , 1, \cf4 \\eamp\cf0 , 0.1, \cf4 \\dur\cf0 , \cf2 Pxrand\cf0 (\cf2 Array\cf0 .geom(24, 2, 2**(1/24)), \cf2 inf\cf0 ), \
	\cf4 \\buf\cf0 , \cf2 Pstutter\cf0 (\cf2 Pwhite\cf0 (1, 4), \cf2 Pseq\cf0 (~loops, \cf2 inf\cf0 )), \cf4 \\str\cf0 , 0, \cf4 \\end\cf0 , \cf2 Pxrand\cf0 ([0.25, 0.5, 1.0], \cf2 inf\cf0 ), \
	\cf4 \\wrp\cf0 , \cf2 Pbrown\cf0 (0.001, 0.1, 0.001), \cf4 \\wsz\cf0 , \cf2 Pbrown\cf0 (0.01, 0.2, 0.005), \
	\cf4 \\dns\cf0 , \cf2 Pxrand\cf0 (7.fib, \cf2 inf\cf0 ), \cf4 \\rnd\cf0 , \cf2 Pkey\cf0 (\cf4 \\wsz\cf0 ) * \cf2 Prand\cf0 (\cf2 Array\cf0 .geom(6, 0.1, 2**(1/6)), \cf2 inf\cf0 ),\
	\cf4 \\frq\cf0 , \cf2 Prand\cf0 (\cf2 Array\cf0 .geom(5, 0.5, 2**(1/5)) ++ \cf2 Array\cf0 .geom(5, 1, 2**(1/5)), \cf2 inf\cf0  ),\
	\cf4 \\azm\cf0 , \cf2 Pwhite\cf0 (-pi, pi, \cf2 inf\cf0 ), \cf4 \\elv\cf0 , 0, \cf4 \\rho\cf0 , \cf2 Pwhite\cf0 (0.01, 2.0, \cf2 inf\cf0 ), \
	\cf4 \\env\cf0 , [\cf2 Env\cf0 ([0.001, 1.0, 1.0, 0.001], [0.2, 0.6, 0.2], \cf4 \\sine\cf0 )]\
).play;\
)\
p.stop\
\
\
(\
\cf2 Routine\cf0 (\{\
	~atsdata.do(\{\cf2 |it, i|\cf0 \
		~noisedefs.do(\{\cf2 |def|\cf0 \
			(def.asString ++ \cf3 ": "\cf0  ++ it.nparts.asString ++ \cf3 " - "\cf0  ++ it.dur).postln;\
			\cf2 Synth\cf0 .head(~agrp, def, [\cf4 \\out\cf0 , ~abus, \cf4 \\efx\cf0 , ~rbus, \cf4 \\aamp\cf0 , 1.0, \
				\cf4 \\eamp\cf0 , 0.1, \cf4 \\samp\cf0 , 0.3, \cf4 \\dur\cf0 , it.dur, \cf4 \\rq\cf0 , 0.01, \cf4 \\buffer\cf0 , it.buffer, \
				\cf4 \\rate\cf0 , it.dur.reciprocal, \cf4 \\azm\cf0 , rrand(-pi, pi), \cf4 \\elv\cf0 , 0, \cf4 \\rho\cf0 , 0.2, \cf4 \\clip\cf0 , 0.8 ])\
				.setn(\cf4 \\env\cf0 , \cf2 Env\cf0 ([0, 1, 1, 0], [0.0, 1.0, 0.0]).asArray);\
			it.dur.wait\
		\});\
	\})\
\}).play\
)\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 (\
\
\{\
	\cf2 var\cf0  sig, bw, fq, amp, gate, rt, gv;\
	gate = \cf2 Impulse\cf0 .kr(1 / 300);\
	bw = \cf2 EnvGen\cf0 .kr(\cf2 Env\cf0 ([100.0, 1000.0, 100.0], [20, 5.0], [6, -4]), gate);\
	fq = \cf2 EnvGen\cf0 .kr(\cf2 Env\cf0 ([20000.0, 5000.0, 20000.0], [20, 5.0], [6, -4]), gate);\
	amp = \cf2 EnvGen\cf0 .kr(\cf2 Env\cf0 ([0.001, 0.6, 0.001], [20, 5.0], [6, -4]), gate);\
	rt = \cf2 EnvGen\cf0 .kr(\cf2 Env\cf0 ([1000, 0.1, 1000], [20, 10], [16, -16]), gate, \
		levelScale: \cf2 TRand\cf0 .kr(0.8, 1.4, gate) );\
	sig = \cf2 SinOsc\cf0 .ar(\cf2 LFNoise1\cf0 .ar(5000, bw, fq).round(1000)) * amp;\
	gv = sig + \cf2 GVerb\cf0 .ar(sig, 1500, rt, 0.9, 0.9, 20, 0.0, 0.0, 1.0, 1500);\
\}.play\
\
)\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf0 \
}