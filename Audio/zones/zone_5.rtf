{\rtf1\ansi\ansicpg1252\cocoartf949\cocoasubrtf540
{\fonttbl\f0\fnil\fcharset238 Inconsolata;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red0\green0\blue191;\red96\green96\blue96;
\red0\green115\blue0;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f0\fs24 \cf2 (\
~loadAts = \cf3 false\cf2 ;\
~localDecoder = \cf3 true\cf2 ;\
~stereoOutput = \cf3 true\cf2 ;\
\cf4 "/Users/alo/Development/Fx3D/Audio/zones/initiate_zones.rtf"\cf2 .load;\
)\
\
~defunc = \{\cf3 |name, ugen|\cf2 \
	\
	\cf3 SynthDef\cf2 (name, \{\cf3 |out, efx, dur, xang, yang, zang|\cf2 \
		\cf3 var\cf2  sig, envm, args, w, x, y, z, frqs, dlys;\
		args = \cf3 ArrayControl\cf2 .kr(\cf5 \\args\cf2 , 4, 1);\
		frqs = \cf3 ArrayControl\cf2 .kr(\cf5 \\frqs\cf2 , 4, 1);\
		dlys = \cf3 ArrayControl\cf2 .kr(\cf5 \\dlys\cf2 , 4, 1);\
		env = \cf3 EnvGen\cf2 .kr(\cf3 EnvControl\cf2 .kr, timeScale: dur, doneAction: 2);\
		sig = \cf3 SynthDef\cf2 .wrap(ugen, \cf3 nil\cf2 , args) * env;\
		\cf3 Out\cf2 .ar(efx, sig);\
		#w, x, y, z = \cf3 A2B\cf2 .ar(\
			*\cf3 Array\cf2 .fill(4, \{\cf3 |i|\cf2 \
				\cf3 DelayC\cf2 .ar(\cf3 BPeakEQ\cf2 .ar(sig, frqs@i), 1.0, dlys@i)\
			\})\
		);\
		\cf3 Out\cf2 .ar(out, \cf3 AtkRotateXYZ\cf2 .ar(w, x, y, z, xang, yang, zang))\
	\}).add\
	\
\};\
\
~efxfunc = \{\cf3 |name, ugen|\cf2 \
	\
	\cf3 SynthDef\cf2 (name, \{\cf3 |out, efx, in, dur, xang, yang, zang|\cf2 \
		\cf3 var\cf2  input, sig, frqs, dlys, sfts, w, x, y, z;\
		args = \cf3 ArrayControl\cf2 .kr(\cf5 \\args\cf2 , 4, 1);\
		frqs = \cf3 ArrayControl\cf2 .kr(\cf5 \\frqs\cf2 , 4, 1);\
		dlys = \cf3 ArrayControl\cf2 .kr(\cf5 \\dlys\cf2 , 4, 1);\
		sfts = \cf3 ArrayControl\cf2 .kr(\cf5 \\sfts\cf2 , 4, 1);\
		env = \cf3 EnvGen\cf2 .kr(\cf3 EnvControl\cf2 .kr, timeScale: dur, doneAction: 2);\
		input = \cf3 In\cf2 .ar(in);\
		sig = \cf3 SynthDef\cf2 .wrap(ugen, \cf3 nil\cf2 , [sig] ++ args);\
		\cf3 Out\cf2 .ar(efx, sig);\
		#w, x, y, z = \cf3 A2B\cf2 .ar(\
			*\cf3 Array\cf2 .fill(4, \{\cf3 |i|\cf2 \
				\cf3 PitchShift\cf2 .ar(\cf3 DelayC\cf2 .ar(\cf3 BPeakEQ\cf2 .ar(sig, frqs@i), 1.0, dlys@i), pitchRatio: sfts@i)\
			\})\
		);\
		\cf3 Out\cf2 .ar(out, \cf3 AtkRotateXYZ\cf2 .ar(w, x, y, z, xang, yang, zang))\
	\}).add\
\
\};\
\
~ugen = (\
	sine: \{\cf3 |freq, beat|\cf2  \cf3 SinOsc\cf2 .ar(freq) + \cf3 SinOsc\cf2 .ar(freq + beat)\},\
	sinearr: \{\cf3 |freq, num, grow|\cf2  \cf3 Mix\cf2 (\cf3 SinOsc\cf2 .ar(\cf3 Array\cf2 .geom(num, freq, grow))) \},\
	saw: \{\cf3 |freq|\cf2  \cf3 Saw\cf2 .ar(freq)\},\
	lfsaw: \{\cf3 |freq|\cf2  \cf3 LFSaw\cf2 .ar(freq) \},\
	pulse: \{\cf3 |freq, width|\cf2  \cf3 Pulse\cf2 .ar(freq, width) \},\
	dust: \{\cf3 |freq|\cf2  \cf3 Dust2\cf2 .ar(freq) \},\
	lfn0: \{\cf3 |freq|\cf2  \cf3 LFNoise0\cf2 .ar(freq) \},\
	pm: \{\cf3 |cf, mf, in|\cf2  \cf3 PMOsc\cf2 .ar(cf, mf, in) \}\
);\
\
~efx = (\
	noefx: \{\cf3 |sig|\cf2  sig \},\
	comb: \{\cf3 |sig, del, dec, amp|\cf2  \cf3 CombL\cf2 .ar(sig * amp, del, del, dec) \},\
	rev: \{\cf3 |sig, rtime, amp|\cf2  \cf3 Reverb\cf2 .ar(sig * amp, rtime) \},\
	shift: \{\cf3 |sig, wsize, pitch, amp|\cf2  \cf3 PitchShift\cf2 .ar(sig * amp, wsize, pitch) \},\
	delay: \{\cf3 |sig, del, amp|\cf2  \cf3 DelayL\cf2 .ar(sig * amp, del, del) \},\
	eq: \{\cf3 |sig, fund, grow, bw, amp|\cf2  \cf3 var\cf2  fr = \cf3 Array\cf2 .geom(5, fund, grow); \
		\cf3 Mix\cf2 (\cf3 BPeakEQ\cf2 .ar(sig, fr, bw / fr, amp.ampdb)) \
	\},\
	median: \{\cf3 |sig, len, amp|\cf2  \cf3 Median\cf2 .ar(len, sig * amp) \},\
	reson: \{\cf3 |sig, freq, grow, dec, amp|\cf2  \
		\cf3 Klank\cf2 .ar(`[\cf3 Array\cf2 .geom(5, freq, grow), (dec ! 5), (amp ! 5)], sig) \
	\} \
);\
\
~params = (\
	global: (\
		dur: \cf3 ControlSpec\cf2 (0.005, 2.0), \
		xang: \cf3 ControlSpec\cf2 (-pi, pi), \
		yang: \cf3 ControlSpec\cf2 (-pi, pi), \
		zang: \cf3 ControlSpec\cf2 (-pi, pi)\
	),\
	sine: (\
		freq: \cf3 ControlSpec\cf2 ()\
	)\
);\
\
~ew = \cf3 CosineWarp\cf2 (\cf3 ControlSpec\cf2 (0.0, 1.0))\
\
~envs = \cf3 Array\cf2 .fill(8, \{\cf3 |i|\cf2 \
	\cf3 var\cf2  mid, val = ~ew.map(1/7*i);\
	mid = ~ew.map(1.0 - (1.0-val-val).abs / 1.5);\
	\cf3 Env\cf2 ([0.001, 1.0, 1.0, 0.001], [val, mid, 1.0 - val].normalizeSum, \cf5 \\sine\cf2 );\
\});\
\
~ew = \cf3 nil\cf2 ;\
\
}