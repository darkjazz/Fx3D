{\rtf1\ansi\ansicpg1252\cocoartf949\cocoasubrtf540
{\fonttbl\f0\fnil\fcharset238 Inconsolata;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue191;\red96\green96\blue96;\red0\green115\blue0;
}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f0\fs24 \cf2 var\cf0  atspath = \cf3 "/Users/alo/sounds/ats/*"\cf0 ;\
\cf2 var\cf0  bufpath = \cf3 "/Users/alo/sounds/fx_loops/*"\cf0 ;\
\
~serv = \cf2 Server\cf0 .internal;\
\cf2 Server\cf0 .default = ~serv;\
\
~bpm = 140.0;\
~bps = ~bpm / 60.0;\
\
~zonepath = \cf3 "/Users/alo/Development/Fx3D/Audio/Live/"\cf0 ;\
\
\cf2 Routine\cf0 (\{\
\
	~atsfiles = \cf2 Array\cf0 .newClear(atspath.pathMatch.size);\
	~loops = \cf2 Array\cf0 .newClear(bufpath.pathMatch.size);\
	~atsdata = \cf2 Array\cf0 ();\
\
	\cf2 Routine\cf0 (\{\
		\cf2 var\cf0  prog;\
		\
		if ((~loadAts.isNil).or(~loadAts))\
		\{\
			prog = \cf2 ProgBar\cf0 (atspath.pathMatch.size);\
			atspath.pathMatch.do(\{\cf2 |path, i|\cf0 \
				\cf2 var\cf0  af;\
				af = \cf2 AtsFile\cf0 (path, ~serv);\
				if (af.numPartials > 20)\
				\{ \
					af.loadToBuffer;\
					~serv.sync;\
					~atsfiles.put(i, af);\
					~atsdata = ~atsdata.add( \
						( \
						\cf4 \\buffer\cf0 : af.buffer, \
						\cf4 \\nparts\cf0 : af.numPartials, \
						\cf4 \\dur\cf0 : af.sndDur ,\
						\cf4 \\file\cf0 : af.path\
						) \
					);\
				\};\
				prog.next;\
				0.001.wait;\
			\});\
			prog.close;\
			prog = \cf2 nil\cf0 ;\
		\};\
					\
		prog = \cf2 ProgBar\cf0 (bufpath.pathMatch.size);\
		bufpath.pathMatch.do(\{\cf2 |path, i|\cf0 \
			~loops = ~loops.add( \cf2 Buffer\cf0 .read(~serv, path) );\
			~serv.sync;\
			\cf2 Post\cf0  << path.basename << \cf3 " loaded to buffer.."\cf0  << \cf2 Char\cf0 .nl;\
			prog.next;\
			0.001.wait;\
		\});\
		prog.close;\
		prog = \cf2 nil\cf0 ;\
		\
		~loops = ~loops.select(\cf2 _\cf0 .notNil);\
		\
		~eq = \cf2 MasterEQ\cf0 (4);\
		\
		~eq.window.bounds = \cf2 Rect\cf0 (700, 600, \
			~eq.window.bounds.width, ~eq.window.bounds.height);\
			\
		~fx = \cf2 Fx3D\cf0 ().makeOglGui;\
		\
		\cf2 SynthDef\cf0 (\cf4 \\verb\cf0 , \{\cf2 |out, bf, in, rtime, damp, inbw, spr, dry, early, tail, amp, aamp, \
				fbamp = 0.01|\cf0 \
			\cf2 var\cf0  sig, input, actr, fb;\
			input = \cf2 In\cf0 .ar(in);\
			fb = \cf2 LocalIn\cf0 .ar;\
			sig = \cf2 GVerb\cf0 .ar(input + fb, 1500, rtime, damp, inbw, spr, dry, early, tail, 1500);\
			\cf2 LocalOut\cf0 .ar(\cf2 Mix\cf0 (sig) * fbamp);\
			\cf2 Out\cf0 .ar(out, (sig ++ sig) * amp);\
			\cf2 Out\cf0 .ar(bf, \cf2 AtkSterToB\cf0 .ar(sig[0], sig[1]) * aamp);\
		\}).add;\
		\
		\cf2 SynthDef\cf0 (\cf4 \\bf2decode\cf0 , \{\cf2 |bus, amp = 1|\cf0 \
			\cf2 var\cf0  w, x, y, z;\
			#w, x, y, z = \cf2 Limiter\cf0 .ar(\cf2 In\cf0 .ar(bus, 4), 0.99);\
			\cf2 Out\cf0 .ar( 0, \cf2 BFDecode1\cf0 .ar(w, x, y, z, \cf2 IbiSpeakers\cf0 .quad.azimuth, (0 ! 4) ) * amp )\
		\}).add;\
		\
		\cf2 SynthDef\cf0 (\cf4 \\bfcollect\cf0 , \{\cf2 |bus, amp = 1|\cf0 \
			\cf2 Out\cf0 .ar(0, \cf2 In\cf0 .ar(bus, 4) * amp)\
		\}).add;\
		\
		\cf2 SynthDef\cf0 (\cf4 \\btoUHJ\cf0 , \{\cf2 |bus, amp = 1|\cf0 \
			\cf2 var\cf0  w, x, y, z;\
			#w, x, y, z = \cf2 In\cf0 .ar(bus, 4);\
			#w, x, y, z = \cf2 Limiter\cf0 .ar(\cf2 In\cf0 .ar(bus, 4), 0.99);\
			\cf2 Out\cf0 .ar(0, \cf2 B2UHJ\cf0 .ar(w, x, y) * amp)\
		\}).add;\
		\
		~serv.sync;\
\
		~abus = \cf2 Bus\cf0 .audio(~serv, 4);\
		~rbus = \cf2 Bus\cf0 .audio(~serv);\
		~rout = \cf2 Bus\cf0 .audio(~serv, 4);\
		\
		(~zonepath ++ \cf3 "start_live_synths.rtf"\cf0 ).load;\
					\
		\cf3 "Zones initialized..."\cf0 .inform;\
		\
	\}).play(\cf2 AppClock\cf0 )\
\
\}).play(\cf2 AppClock\cf0 );}