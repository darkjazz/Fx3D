{\rtf1\ansi\ansicpg1252\cocoartf949\cocoasubrtf540
{\fonttbl\f0\fnil\fcharset238 Inconsolata;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue191;\red96\green96\blue96;\red0\green115\blue0;
\red191\green0\blue0;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f0\fs24 \cf0 (\
~loadAts = \cf2 false\cf0 ;\
~localDecoder = \cf2 true\cf0 ;\
~stereoOutput = \cf2 true\cf0 ;\
~livepath = \cf3 "/Users/alo/Development/Fx3D/Audio/Live/"\cf0 ;\
(~livepath ++ \cf3 "initiate_live.rtf"\cf0 ).load;\
)\
\
~loops.do(\cf2 _\cf0 .postln)\
\
	~fx.startFx\
\
	(~livepath ++ \cf3 "start_live_synths.rtf"\cf0 ).load;\
\
(\
(~livepath ++ \cf3 "synthdefs.rtf"\cf0 ).load;\
\
~fx.initLive;\
\
~fx.addGlobalsResponder;\
~fx.addStatesResponder;\
~fx.addTriggerResponder;\
\
~fx.perfGui.assignPanel(0, \{\cf2 |panel|\cf0 \
	\cf2 var\cf0  colors, fonts;\
	colors = (\
		\cf4 \\blue\cf0 : \cf2 Color\cf0 .new255(28, 134, 238),\
		\cf4 \\orange\cf0 : \cf2 Color\cf0 .new255(184, 134, 11),\
		\cf4 \\steel\cf0 : \cf2 Color\cf0 .new255(4, 50, 89)\
	);\
	fonts = (\
		\cf4 \\lucida9\cf0 : \cf2 Font\cf0 (\cf3 "Lucida Grande"\cf0 , 9),\
		\cf4 \\lucida11\cf0 : \cf2 Font\cf0 (\cf3 "Lucida Grande"\cf0 , 11),\
		\cf4 \\skia\cf0 : \cf2 Font\cf0 (\cf3 "Skia"\cf0 , 9) \
	);\
	\cf2 RoundButton\cf0 (panel, \cf2 Rect\cf0 (5, 5, panel.bounds.width - 10, 25))\
		.states_([[\cf3 "initialize"\cf0 , colors.orange, colors.steel ]])\
		.font_(fonts.lucida11)\
		.action_(\{\
\pard\pardeftab720\ql\qnatural
\cf0 		~z0mapping = (\
		\
			\cf4 \\freeze\cf0  : (\
				\cf4 \\xang\cf0 : \cf2 LinearWarp\cf0 (\cf2 ControlSpec\cf0 (-pi, pi, step: pi/8)),\
				\cf4 \\yang\cf0 : \cf2 LinearWarp\cf0 (\cf2 ControlSpec\cf0 (-pi, pi, step: pi/8)),\
				\cf4 \\zang\cf0 : \cf2 LinearWarp\cf0 (\cf2 ControlSpec\cf0 (-pi, pi, step: pi/8)),\
				\cf4 \\aa\cf0 : \cf2 LinearWarp\cf0 (\cf2 ControlSpec\cf0 (0.5, 1.0, step: 0.1)),\
				\cf4 \\ab\cf0 : \cf2 LinearWarp\cf0 (\cf2 ControlSpec\cf0 (0.5, 1.0, step: 0.1)),\
				\cf4 \\ac\cf0 : \cf2 LinearWarp\cf0 (\cf2 ControlSpec\cf0 (0.5, 1.0, step: 0.1)),\
				\cf4 \\ad\cf0 : \cf2 LinearWarp\cf0 (\cf2 ControlSpec\cf0 (0.5, 1.0, step: 0.1))\
			),\
			\
			\cf4 \\zone0_grain\cf0 : (\
				\cf4 \\tdev\cf0 : \cf2 CyclicWarp\cf0 (\cf2 ControlSpec\cf0 (0.0, 0.01, step: 0.001)),\
				\cf4 \\tfrq\cf0 : \cf2 CyclicWarp\cf0 (\cf2 ControlSpec\cf0 (32, 4, step: 8)),\
				\cf4 \\gdur\cf0 : \cf2 CyclicWarp\cf0 (\cf2 ControlSpec\cf0 (0.004, 0.08, step:0.004)),\
				\cf4 \\pos\cf0 : \cf2 CyclicWarp\cf0 (\cf2 ControlSpec\cf0 (0.0, 1.0, step: 1/16)),\
				\cf4 \\envf\cf0 : \cf2 CyclicWarp\cf0 (\cf2 ControlSpec\cf0 (0.0, 1.0, step: 1/8)),\
				\cf4 \\aamp\cf0 : \cf2 ExponentialWarp\cf0 (\cf2 ControlSpec\cf0 (2.0, 0.6))\
			)\
		);\
		~z0atkspecarrays = (\
			\cf4 \\regionshalf\cf0 : \cf2 Array\cf0 .fill(8, \{\cf2 |i|\cf0  [i*(0.2pi/8)-0.1pi, i*(0.2pi/8)+(0.2pi/8)-0.1pi].asSpec \}),\
			\cf4 \\regionsfull\cf0 : \cf2 Array\cf0 .fill(8, \{\cf2 |i|\cf0  [i*(pi/4)-pi, i*(pi/4)+(pi/4)-pi].asSpec \}),\
			\cf4 \\rangehalf\cf0 : \cf2 Array\cf0 .fill(8, \{\cf2 |i|\cf0  [-0.1pi, 0.1pi].asSpec \}),\
			\cf4 \\rangefull\cf0 : \cf2 Array\cf0 .fill(8, \{\cf2 |i|\cf0  [-pi, pi].asSpec \}),\
			\cf4 \\randregionshalf\cf0 : \cf2 Array\cf0 .fill(8, \{ [0.1pi.rand2, 0.1pi.rand2].asSpec \}), \
			\cf4 \\randregionsfull\cf0 : \cf2 Array\cf0 .fill(8, \{ [pi.rand2, pi.rand2].asSpec \}),\
			\cf4 \\joinregionshalf\cf0 : \cf2 Array\cf0 .fill(8, \{\cf2 |i|\cf0  [i*(0.2pi/9)-0.1pi, i*(0.2pi/9)+(0.2pi/4.5)-0.1pi].asSpec \}),\
			\cf4 \\joinregionsfull\cf0 : \cf2 Array\cf0 .fill(8, \{\cf2 |i|\cf0   [i*(pi/4.5)-pi, i*(pi/4.5)+(pi/2.25)-pi].asSpec \})\
		);\
		~z0atkparams = (\
			\cf4 \\rX\cf0 : ~z0atkspecarrays.joinregionsfull.collect(\{\cf2 |spec|\cf0  \cf2 LinearWarp\cf0 (spec) \}),\
			\cf4 \\rY\cf0 : ~z0atkspecarrays.regionsfull.collect(\{\cf2 |spec|\cf0  \cf2 LinearWarp\cf0 (spec) \}),\
			\cf4 \\rZ\cf0 : ~z0atkspecarrays.rangefull.collect(\{\cf2 |spec|\cf0  \cf2 LinearWarp\cf0 (spec) \}),\
			\cf4 \\pX\cf0 : ~z0atkspecarrays.regionshalf.collect(\{\cf2 |spec|\cf0  \cf2 LinearWarp\cf0 (spec) \}),\
			\cf4 \\pY\cf0 : ~z0atkspecarrays.rangehalf.collect(\{\cf2 |spec|\cf0  \cf2 LinearWarp\cf0 (spec) \}),\
			\cf4 \\pZ\cf0 : ~z0atkspecarrays.joinregionshalf.collect(\{\cf2 |spec|\cf0  \cf2 LinearWarp\cf0 (spec) \})\
		);\
		~z0envs = (\
			\cf4 \\gauss\cf0 : \cf2 Env\cf0 .sine,\
			\cf4 \\quasigauss\cf0 : \cf2 Env\cf0 ([0.001, 1.0, 1.0, 0.001], [0.3, 0.4, 0.3], \cf4 \\sine\cf0 ),\
			\cf4 \\perc\cf0 : \cf2 Env\cf0 .perc,\
			\cf4 \\reversed\cf0 : \cf2 Env\cf0 ([0.001, 1.0, 0.001], [0.95, 0.05], \cf4 \\sine\cf0 ),\
			\cf4 \\triangle\cf0 : \cf2 Env\cf0 .triangle,\
			\cf4 \\linear\cf0 : \cf2 Env\cf0 ([0.001, 1.0, 1.0, 0.001], [0.3, 0.4, 0.3]),\
			\cf4 \\sine\cf0 : \cf2 InterplPairs\cf0 ([[0.0, 0.0], [0.2, 0.1], [0.25, -0.1], [0.5, 1.0], [0.75, -0.1], \
				[0.8, 0.1], [1.0, 0.0]], \cf4 \\sin\cf0 ).asEnv\
		).collect(\{\cf2 |env|\cf0  \cf2 Buffer\cf0 .sendCollection(~serv, env.discretize) \}); \
		\
		~z0loops = ~loops.select(\{\cf2 |buf|\cf0  \
			buf.path.contains(\cf3 "monooop"\cf0 )\
		\});\
		\
\cf5 //		~z0ats = ~atsdata.select(\{|data|\cf0 \
\cf5 //			data.file.contains("monooop")\cf0 \
\cf5 //		\});\cf0 \
\
		~z0ats = ~atsdata;\
				\
		~z0atsbufspec = \cf2 ControlSpec\cf0 (0, ~z0ats.size - 1, step: 1);\
		\
		~trigdefs = ~noisedefs.select(\{\cf2 |def|\cf0  def.asString.contains(\cf3 "dust"\cf0 ) \});	\
		\
		\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf0 			\
		\});\
		\
		\cf2 RoundButton\cf0 (panel, \cf2 Rect\cf0 (5, 35, panel.bounds.width / 2 - 5, 25))\
			.states_([[\cf3 "states OFF"\cf0 , colors.orange, colors.steel ], [\cf3 "states ON"\cf0 , colors.steel, colors.orange ]])\
			.font_(fonts.lucida9)\
			.action_(\{\cf2 |bt|\cf0 \
				if (bt.value == 1)\
				\{\
					~fx.addStatesFunction(\cf4 \\zone0\cf0 , \{\cf2 |invalues|\cf0 \
\pard\pardeftab720\ql\qnatural
\cf0 				\
					\cf2 var\cf0  params = invalues.states.clump(8);\
					~z0synths.do(\{\cf2 |synth, i|\cf0 \
						\cf2 var\cf0  states, args;\
						if (synth.notNil)\
						\{\
							states = \cf2 Pseq\cf0 (params[i], \cf2 inf\cf0 ).asStream;				\
							args = ~z0mapping[synth.defName.asSymbol].collect(\{\cf2 |spec|\cf0  \
								spec.map(states.next) \
							\});\
							synth.set(*args.asKeyValuePairs);						\
						\};\
					\});\
						\
					~z0transforms.do(\{\cf2 |synth, i|\cf0 \
						\cf2 var\cf0  j = 0;\
						synth.set(*~z0atkparams.collect(\{\cf2 |specarr|\cf0  \
								j = j + 1;\
								specarr[i * 2].map(params[i + 4][j]) \
							\}).asKeyValuePairs\
						)					\
					\})\
											\
				\});				\
				\}\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf0 				\{\
					~fx.removeStatesFunction(\cf4 \\zone0\cf0 )	\
				\}\
			\});\
		\
		~z0ns = [0.5, 0.2, \cf4 \\exp\cf0 ].asSpec;\
			\
		\cf2 RoundButton\cf0 (panel, \cf2 Rect\cf0 (panel.bounds.width / 2, 35, panel.bounds.width / 2 - 5, 25))\
			.states_([[\cf3 "trig OFF"\cf0 , colors.orange, colors.steel ], [\cf3 "trig ON"\cf0 , colors.steel, colors.orange ]])\
			.font_(fonts.lucida9)\
			.action_(\{\cf2 |bt|\cf0 \
				if (bt.value == 1)\
				\{\
					~fx.addTriggerFunction(\cf4 \\zone0\cf0 , \{\cf2 |invalues|\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\ql\qnatural\pardirnatural
\cf0 						\cf2 var\cf0  polar, data;\
						polar = \cf2 ZPoint\cf0 ( invalues.coordX - 8 / 8, invalues.coordY - 8 / 8, \
							invalues.coordZ - 8 / 8 ).asZPolar;\
						data = ~z0ats[~z0atsbufspec.map(1.0 - invalues.states[(4..7)].mean)];\
						\cf2 Synth\cf0 .tail(~agrp, ~trigdefs.choose, \
							[\cf4 \\out\cf0 , ~abus, \cf4 \\efx\cf0 , ~rout, \
								\cf4 \\aamp\cf0 , ~z0ns.map( invalues.states[(0..3)].mean ), \
								\cf4 \\eamp\cf0 , 1.0, \cf4 \\samp\cf0 , 0.1, \
								\cf4 \\dur\cf0 , [0.1, 1.0].asSpec.map(invalues.states[(30..33)].mean),\
								\cf4 \\rate\cf0 , 8.0 , \
								\cf4 \\buffer\cf0 , data.buffer, \cf4 \\rq\cf0 , 0.3, \cf4 \\clip\cf0 , 0.9])\
							.setn(\cf4 \\env\cf0 , \cf2 Env\cf0 ([0, 1, 0.5, 0.5, 0], [0.05, 0.05, 0.8, 0.1]).asArray)\
							.setn(\cf4 \\azm\cf0 , \cf2 Env\cf0 ([polar.theta - 0.1pi, polar.theta + 0.1pi], [1]).asArray )\
							.setn(\cf4 \\elv\cf0 , \cf2 Env\cf0 ([polar.phi + 0.1pi, polar.phi - 0.1pi], [1]).asArray )\
							.setn(\cf4 \\rho\cf0 , \cf2 Env\cf0 ([polar.rho + 0.2, polar.rho - 0.2], [1]).asArray)\
					 \});				\
\pard\pardeftab720\ql\qnatural
\cf0 			\}\
			\{\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf0 					~fx.removeTriggerFunction(\cf4 \\zone0\cf0 )\
\pard\pardeftab720\ql\qnatural
\cf0 			\}\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf0 			\});\
		\
		\cf2 RoundButton\cf0 (panel, \cf2 Rect\cf0 (5, 65, panel.bounds.width / 2 - 5, 25))\
			.states_([[\cf3 "atk OFF"\cf0 , colors.orange, colors.steel ], [\cf3 "atk ON"\cf0 , colors.steel, colors.orange ]])\
			.font_(fonts.lucida9)\
			.action_(\{\cf2 |bt|\cf0 \
				if (bt.value == 1)\
				\{\
					~z0trgroup = \cf2 Group\cf0 .head(~agrp);\
					\
					~z0trbus = \cf2 Array\cf0 .fill(4, \{\cf2 |i|\cf0  \cf2 Bus\cf0 .audio(~serv, 4) \});\
					\
					~z0transforms = \cf2 Array\cf0 .fill(4, \{\cf2 |i|\cf0 \
						\cf2 Synth\cf0 .tail(~z0trgroup, \cf4 \\atk_zone0\cf0 , [\cf4 \\out\cf0 , ~abus, \cf4 \\in\cf0 , ~z0trbus@i])\
					\});\
					\
					~z0synths = \cf2 Array\cf0 .newClear(5);\
\pard\pardeftab720\ql\qnatural
\cf0 			\}\
			\{\
				~z0transforms.do(\cf2 _\cf0 .free);\
				~z0transforms = \cf2 nil\cf0 ;\
				~z0trbus.do(\cf2 _\cf0 .free);\
				~z0trbus = \cf2 nil\cf0 ;\
				~z0trgroup.free;\
				~z0trgroup = \cf2 nil\cf0 ;\
			\}\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf0 			\});\
\
		\cf2 RoundButton\cf0 (panel, \cf2 Rect\cf0 (panel.bounds.width / 2, 65, panel.bounds.width / 2 - 5, 25))\
			.states_([[\cf3 "frz OFF"\cf0 , colors.orange, colors.steel ], [\cf3 "frz ON"\cf0 , colors.steel, colors.orange ]])\
			.font_(fonts.lucida9)\
			.action_(\{\cf2 |bt|\cf0 \
				if (bt.value == 1)\
				\{\
					~z0synths.put(0,\
						\cf2 Synth\cf0 .before(~z0trgroup, \cf4 \\freeze\cf0 , [\cf4 \\out\cf0 , ~z0trbus[0], \cf4 \\gate\cf0 , 1.0, \cf4 \\tgate\cf0 , 1/30, \cf4 \\dur\cf0 , 30, \
							\cf4 \\maxdel\cf0 , 0.1, \cf4 \\room\cf0 , 1500, \cf4 \\damp\cf0 , 0.5, \cf4 \\inbw\cf0 , 0.5, \cf4 \\spr\cf0 , 20, \cf4 \\early\cf0 , 0.2, \cf4 \\tail\cf0 , 1.0, \
							\cf4 \\doneAction\cf0 , 2])\
							 	.setn(\cf4 \\bw\cf0 , \cf2 Env\cf0 ([100.0, 1000.0, 100.0], [20, 0.0], [6, -4]).asArray)\
							 	.setn(\cf4 \\fq\cf0 , \cf2 Env\cf0 ([15000.0, 6000.0, 15000.0], [20, 0.0], [6, -4]).asArray)\
							 	.setn(\cf4 \\amp\cf0 , \cf2 Env\cf0 ([0.01, 0.6, 0.01], [20, 0], [6, -4]).asArray)\
							 	.setn(\cf4 \\rt\cf0 , \cf2 Env\cf0 ([60, 1, 60], [20, 10], [4, -4]).asArray)\
							 	.setn(\cf4 \\env\cf0 , \cf2 Env\cf0 ([0.001, 1.0, 1.0, 0.001], [0.3, 0.4, 0.3], \cf4 \\sine\cf0 , 2, 1).asArray)\
								.setn(\cf4 \\delays\cf0 , \cf2 Array\cf0 .geom(4, 0.01, 1.618).scramble)\
								.setn(\cf4 \\shifts\cf0 , [1.0, 35/36, 16/15, 36/35])\
					);\
\pard\pardeftab720\ql\qnatural
\cf0 			\}\
			\{\
				~z0synths[0].set(\cf4 \\gate\cf0 , -30.0);\
				~z0synths[0] = \cf2 nil\cf0 ;\
			\}\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf0 			\});\
\
		4.do(\{\cf2 |i|\cf0 \
			\cf2 RoundButton\cf0 (panel, \cf2 Rect\cf0 (i * 45 + 5, 95, panel.bounds.width / 4 - 5, 25))\
				.states_([[i.asString ++ \cf3 " off"\cf0 , colors.orange, colors.steel ], \
					[i.asString ++ \cf3 " on"\cf0 , colors.steel, colors.orange ]])\
				.font_(fonts.lucida9)\
				.action_(\{\cf2 |bt|\cf0 \
					if (bt.value == 1)\
					\{\
						~z0synths.put(i + 1,\
							\cf2 Synth\cf0 .before(~z0trgroup, \cf4 \\zone0_grain\cf0 , [\cf4 \\out\cf0 , ~z0trbus@i, \cf4 \\efx\cf0 , 99, \cf4 \\gate\cf0 , 1.0, \cf4 \\dur\cf0 , 10.0, \
								\cf4 \\buffer\cf0 , ~z0loops[i], \cf4 \\maxdel\cf0 , 0.1, \cf4 \\brate\cf0 , 1.0, \cf4 \\envA\cf0 , ~z0envs.perc, \
								\cf4 \\envB\cf0 , ~z0envs.sine])\
									.setn(\cf4 \\env\cf0 , \cf2 Env\cf0 ([0.001, 1.0, 1.0, 0.001], [0.5, 0.2, 0.3], [6, 0, -2], 2, 1).asArray)\
									.setn(\cf4 \\delays\cf0 , ([0.0] ++ \cf2 Array\cf0 .geom(3, 0.01, 1.618)).scramble )\
									.setn(\cf4 \\shifts\cf0 , [1.0, 35/36, 0.5, 36/35])\
						);\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\ql\qnatural\pardirnatural
\cf0 					\}\
					\{\
						~z0synths[i + 1].set(\cf4 \\gate\cf0 , -10.0);\
						~z0synths[i + 1] = \cf2 nil\cf0 ;\
					\}\
\pard\pardeftab720\ql\qnatural
\cf0 			\});		\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf0 		\
		\});\
		\
		~z0items = (\
			\cf4 \\oop_0_3\cf0 : \{  \
				\cf2 Routine\cf0 (\{\
\pard\pardeftab720\ql\qnatural
\cf0 				~z0loops = ~loops.select(\{\cf2 |it|\cf0  it.path.contains(\cf3 "monooop"\cf0 ) \});\
				~z0synths.do(\{\cf2 |syn, i|\cf0 \
					if (syn.notNil)\
					\{\
						syn.set(\cf4 \\buffer\cf0 , ~z0loops[i]);\
						4.wait;\
					\}\
				\});\
				\cf3 "zone 0 loops change complete"\cf0 .postln;		\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf0 				\}).play\
			\},\
			\cf4 \\oop_4_7\cf0 : \{  \
				\cf2 Routine\cf0 (\{\
\pard\pardeftab720\ql\qnatural
\cf0 				~z0loops = ~loops.select(\{\cf2 |it|\cf0  it.path.contains(\cf3 "monooop"\cf0 ) \});\
				~z0synths.do(\{\cf2 |syn, i|\cf0 \
					if (syn.notNil)\
					\{\
						syn.set(\cf4 \\buffer\cf0 , ~z0loops[i + 4]);\
						4.wait;\
					\}\
				\});		\
				\cf3 "zone 0 loops change complete"\cf0 .postln;		\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf0 				\}).play\
			\},\
			\cf4 \\oop_rand\cf0 : \{  \
				\cf2 Routine\cf0 (\{\
\pard\pardeftab720\ql\qnatural
\cf0 				~z0loops = ~loops.select(\{\cf2 |it|\cf0  it.path.contains(\cf3 "monooop"\cf0 ) \});\
				~z0synths.do(\{\cf2 |syn, i|\cf0 \
					if (syn.notNil)\
					\{\
						syn.set(\cf4 \\buffer\cf0 , ~z0loops.choose);\
						4.wait;\
					\}\
				\});		\
				\cf3 "zone 0 loops change complete"\cf0 .postln;		\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf0 				\}).play\
			\},\
			\cf4 \\sum_4_7\cf0 : \{  \
				\cf2 Routine\cf0 (\{\
\pard\pardeftab720\ql\qnatural
\cf0 				~z0loops = ~loops.select(\{\cf2 |it|\cf0  it.path.contains(\cf3 "sumeloop"\cf0 ) \});\
				~z0synths.do(\{\cf2 |syn, i|\cf0 \
					if (syn.notNil)\
					\{\
						syn.set(\cf4 \\buffer\cf0 , ~z0loops[i + 4]);\
						4.wait;\
					\}\
				\});\
				\cf3 "zone 0 loops change complete"\cf0 .postln;		\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf0 				\}).play\
			\},\
			\cf4 \\mem_rand\cf0 : \{  \
				\cf2 Routine\cf0 (\{\
\pard\pardeftab720\ql\qnatural
\cf0 				~z0loops = ~loops.select(\{\cf2 |it|\cf0  it.path.contains(\cf3 "memorloop"\cf0 ) \});\
				~z0synths.do(\{\cf2 |syn, i|\cf0 \
					if (syn.notNil)\
					\{\
						syn.set(\cf4 \\buffer\cf0 , ~z0loops.choose);\
						4.wait;\
					\}\
				\});		\
				\cf3 "zone 0 loops change complete"\cf0 .postln;		\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf0 				\}).play\
			\}\
		);\
		\
		~z0pm = \cf2 SCPopUpMenu\cf0 (panel, \cf2 Rect\cf0 (5, 155, panel.bounds.width / 1.5 - 5, 25))\
			.background_(colors.steel)\
			.font_(fonts.lucida9)			\
			.stringColor_(colors.orange)\
			.items_(~z0items.keys(\cf2 Array\cf0 ).sort);\
		\
		\cf2 RoundButton\cf0 (panel, \cf2 Rect\cf0 (panel.bounds.width / 1.5 + 5, 155, panel.bounds.width / 3 - 10, 25))\
			.font_(fonts.lucida9)\
			.states_([[\cf3 "send"\cf0 , colors.orange, colors.steel]])\
			.action_(\{\
				~z0items[~z0pm.items[~z0pm.value].asSymbol].value\
			\});\
		\
		~z0smspecs = (\
			\cf4 \\tfrq\cf0 : \cf2 LinearWarp\cf0 (\cf2 ControlSpec\cf0 (32, 256, step: 8)),\
			\cf4 \\gdur\cf0 : \cf2 LinearWarp\cf0 (\cf2 ControlSpec\cf0 (0.08, 1.6, step: 0.004)),\
			\cf4 \\aamp\cf0 : \cf2 LinearWarp\cf0 (\cf2 ControlSpec\cf0 (2.0, 4.0)),\
			\cf4 \\z0ns\cf0 : \cf2 LinearWarp\cf0 (\cf2 ControlSpec\cf0 (0.5, 2.0))\
		);\
\
		\cf2 SmoothSlider\cf0 (panel, \cf2 Rect\cf0 (0 * 45 + 5, 215, panel.bounds.width / 4 - 5, 140))\
			.action_(\{\cf2 |sl|\cf0 \
				~z0mapping[\cf4 \\zone0_grain\cf0 ][\cf4 \\tfrq\cf0 ].spec.minval = ~z0smspecs[\cf4 \\tfrq\cf0 ].map(sl.value)\
			\});\
		\cf2 SmoothSlider\cf0 (panel, \cf2 Rect\cf0 (1 * 45 + 5, 215, panel.bounds.width / 4 - 5, 140))\
			.action_(\{\cf2 |sl|\cf0 \
				~z0mapping[\cf4 \\zone0_grain\cf0 ][\cf4 \\gdur\cf0 ].spec.maxval = ~z0smspecs[\cf4 \\gdur\cf0 ].map(sl.value)\
			\});\
		\cf2 SmoothSlider\cf0 (panel, \cf2 Rect\cf0 (2 * 45 + 5, 215, panel.bounds.width / 4 - 5, 140))\
			.action_(\{\cf2 |sl|\cf0 \
				~z0mapping[\cf4 \\zone0_grain\cf0 ][\cf4 \\aamp\cf0 ].spec.minval = ~z0smspecs[\cf4 \\aamp\cf0 ].map(sl.value)\
			\});\
		\cf2 SmoothSlider\cf0 (panel, \cf2 Rect\cf0 (3 * 45 + 5, 215, panel.bounds.width / 4 - 5, 140))\
			.action_(\{\cf2 |sl|\cf0 \
				~z0ns.minval = ~z0smspecs[\cf4 \\z0ns\cf0 ].spec.map(sl.value)\
			\});\
			\
		[\cf3 "tfrq"\cf0 , \cf3 "gdur"\cf0 , \cf3 "aamp"\cf0 , \cf3 "nzamp"\cf0  ].do(\{\cf2 |txt, i|\cf0 \
			\cf2 SCStaticText\cf0 (panel, \cf2 Rect\cf0 (i * 45 + 5, 215, panel.bounds.width / 4 - 5, 25))\
				.font_(fonts.skia)\
				.stringColor_(colors.orange)\
				.align_(\cf4 \\center\cf0 )\
				.string_(txt)\
		\})\
				\
\});\
\
~fx.perfGui.assignPanel(1, \{\cf2 |panel|\cf0 \
	\cf2 var\cf0  colors, fonts;\
	colors = (\
		\cf4 \\blue\cf0 : \cf2 Color\cf0 .new255(28, 134, 238),\
		\cf4 \\orange\cf0 : \cf2 Color\cf0 .new255(184, 134, 11),\
		\cf4 \\steel\cf0 : \cf2 Color\cf0 .new255(4, 50, 89)\
	);\
	fonts = (\
		\cf4 \\lucida9\cf0 : \cf2 Font\cf0 (\cf3 "Lucida Grande"\cf0 , 9),\
		\cf4 \\lucida11\cf0 : \cf2 Font\cf0 (\cf3 "Lucida Grande"\cf0 , 11),\
		\cf4 \\skia\cf0 : \cf2 Font\cf0 (\cf3 "Skia"\cf0 , 9) \
	);\
	\cf2 RoundButton\cf0 (panel, \cf2 Rect\cf0 (5, 5, panel.bounds.width - 10, 25))\
		.states_([[\cf3 "initialize"\cf0 , colors.orange, colors.steel ]])\
		.font_(fonts.lucida11)\
		.action_(\{\
			~z1paramspecs = (\
				\cf4 \\aamp\cf0 : \cf2 Array\cf0 .fill(8, \{\cf2 |i|\cf0  \cf2 CyclicWarp\cf0 ([i * 0.03 + 0.2, 2.0 - (i * 0.1)].asSpec) \}).reverse,\
				\cf4 \\str\cf0 : \cf2 Array\cf0 .fill(8, \{\cf2 |i|\cf0  \cf2 CyclicWarp\cf0 ([0.0, 0.5].asSpec) \}),\
				\cf4 \\end\cf0 : \cf2 Array\cf0 .fill(8, \{\cf2 |i|\cf0  \cf2 CyclicWarp\cf0 ([0.5, 1.0].asSpec) \}),\
				\cf4 \\eamp\cf0 : \cf2 Array\cf0 .fill(8, \{\cf2 |i|\cf0  [4.0 - (i * 0.2), i * 0.1 + 0.2 ].asSpec \}),\
				\cf4 \\xang\cf0 : \cf2 Array\cf0 .fill(8, \{\cf2 |i|\cf0  \cf2 CyclicWarp\cf0 ([i*(pi/4.5)-pi, i*(pi/4.5)+(pi/2.25)-pi].asSpec) \}).scramble,\
				\cf4 \\yang\cf0 : \cf2 Array\cf0 .fill(8, \{\cf2 |i|\cf0  \cf2 CyclicWarp\cf0 ([i*(pi/4.5)-pi, i*(pi/4.5)+(pi/2.25)-pi].asSpec) \}).scramble,\
				\cf4 \\zang\cf0 : \cf2 Array\cf0 .fill(8, \{\cf2 |i|\cf0  \cf2 CyclicWarp\cf0 ([i*(pi/4.5)-pi, i*(pi/4.5)+(pi/2.25)-pi].asSpec) \}).scramble,\
		  		\cf4 \\zoom\cf0 : \cf2 Array\cf0 .fill(8, \{\cf2 |i|\cf0  \cf2 CyclicWarp\cf0 ([i*(pi/8)-0.5pi, i*(pi/8)+(pi/8)-0.5pi].asSpec) \}).reverse,\
				\cf4 \\push\cf0 : \cf2 Array\cf0 .fill(8, \{\cf2 |i|\cf0  \cf2 CyclicWarp\cf0 ([i*(pi/8)-0.5pi, i*(pi/8)+(pi/8)-0.5pi].asSpec) \}),\
				\cf4 \\focus\cf0 : \cf2 Array\cf0 .fill(8, \{\cf2 |i|\cf0  \cf2 CyclicWarp\cf0 ([i + 1 / 8 * -0.49pi, i + 1 / 8 * 0.49pi].asSpec) \})\
			);\
			\
			~z1params = \cf2 Array\cf0 .fill(8, \{\cf2 |i|\cf0 \
				[\
					\cf2 FxParam\cf0 (\cf4 \\aamp\cf0 , \cf4 \\aamp\cf0 , ~z1paramspecs[\cf4 \\aamp\cf0 ][i], \cf2 false\cf0 ),\
					\cf2 FxParam\cf0 (\cf4 \\str\cf0 , \cf4 \\str\cf0 , ~z1paramspecs[\cf4 \\str\cf0 ][i], \cf2 false\cf0 ),\
					\cf2 FxParam\cf0 (\cf4 \\end\cf0 , \cf4 \\end\cf0 , ~z1paramspecs[\cf4 \\end\cf0 ][i], \cf2 false\cf0 ),\
					\cf2 FxParam\cf0 (\cf4 \\eamp\cf0 , \cf4 \\eamp\cf0 , ~z1paramspecs[\cf4 \\eamp\cf0 ][i], \cf2 false\cf0 ),\
					\cf2 FxParam\cf0 (\cf4 \\xang\cf0 , \cf4 \\xsc\cf0 , ~z1paramspecs[\cf4 \\xang\cf0 ][i], \cf2 false\cf0 ),\
					\cf2 FxParam\cf0 (\cf4 \\yang\cf0 , \cf4 \\ysc\cf0 , ~z1paramspecs[\cf4 \\yang\cf0 ][i], \cf2 false\cf0 ),\
					\cf2 FxParam\cf0 (\cf4 \\zang\cf0 , \cf4 \\zsc\cf0 , ~z1paramspecs[\cf4 \\zang\cf0 ][i], \cf2 false\cf0 ),\
					\cf2 FxParam\cf0 (\cf4 \\zoom\cf0 , \cf4 \\zoom\cf0 , ~z1paramspecs[\cf4 \\zoom\cf0 ][i], \cf2 false\cf0 ),\
					\cf2 FxParam\cf0 (\cf4 \\push\cf0 , \cf4 \\push\cf0 , ~z1paramspecs[\cf4 \\push\cf0 ][i], \cf2 false\cf0 ),\
					\cf2 FxParam\cf0 (\cf4 \\focus\cf0 , \cf4 \\focus\cf0 , ~z1paramspecs[\cf4 \\focus\cf0 ][i], \cf2 false\cf0 )\
				];	\
			\});\
		\
				\
			~z1globals = [\
				\cf2 FxParam\cf0 (\cf4 \\rtime\cf0 , \cf4 \\rtime\cf0 , \cf2 ControlSpec\cf0 (10.0, 5.0), \cf2 false\cf0 ),\
				\cf2 FxParam\cf0 (\cf4 \\damp\cf0 , \cf4 \\damp\cf0 , \cf2 ControlSpec\cf0 (0.0, 1.0), \cf2 false\cf0 ),\
				\cf2 FxParam\cf0 (\cf4 \\inbw\cf0 , \cf4 \\inbw\cf0 , \cf2 ControlSpec\cf0 (0.0, 1.0), \cf2 false\cf0 ),\
				\cf2 FxParam\cf0 (\cf4 \\spr\cf0 , \cf4 \\spr\cf0 , \cf2 ControlSpec\cf0 (5, 20), \cf2 false\cf0 ),\
				\cf2 FxParam\cf0 (\cf4 \\dry\cf0 , \cf4 \\dry\cf0 , \cf2 ControlSpec\cf0 (0.0, 0.1), \cf2 false\cf0 ),\
				\cf2 FxParam\cf0 (\cf4 \\early\cf0 , \cf4 \\early\cf0 , \cf2 ControlSpec\cf0 (0.0, 0.1), \cf2 false\cf0 ),\
				\cf2 FxParam\cf0 (\cf4 \\tail\cf0 , \cf4 \\tail\cf0 , \cf2 ControlSpec\cf0 (1.0, 0.2), \cf2 false\cf0 ),\
				\cf2 FxParam\cf0 (\cf4 \\amp\cf0 , \cf4 \\amp\cf0 , \cf2 ControlSpec\cf0 (0.0, 1.0), \cf2 false\cf0 ),\
				\cf2 FxParam\cf0 (\cf4 \\line\cf0 , \cf4 \\line\cf0 , \cf2 ControlSpec\cf0 (0.4, 2.0, \cf4 'lin'\cf0 , 0.1), \cf2 false\cf0 )\
			];\
			\
			~subloops = ~loops.select(\{\cf2 |loop|\cf0  loop.path.contains(\cf3 "detloop_"\cf0 ) \});\
\
			~b_bus = \cf2 Array\cf0 .fill(8, \{ \cf2 Bus\cf0 .audio(~serv) \});\
			~t_bus = \cf2 Array\cf0 .fill(8, \{ \cf2 Bus\cf0 .audio(~serv, 4) \});\
\
			~freqs = \cf2 Array\cf0 .geom(8, 0.125, 1.5);\
			~dist = \cf2 Array\cf0 .series(8, 0.0, 0.375).reverse;\
		\
			~z1synths = \cf2 Array\cf0 .newClear(8);\
\
			~orient = \cf2 Orientation\cf0 ();\
		\
		\});\
\
		\cf2 RoundButton\cf0 (panel, \cf2 Rect\cf0 (5, 35, panel.bounds.width / 2 - 5, 25))\
			.states_([[\cf3 "states OFF"\cf0 , colors.orange, colors.steel ], [\cf3 "states ON"\cf0 , colors.steel, colors.orange ]])\
			.font_(fonts.lucida9)\
			.action_(\{\cf2 |bt|\cf0 \
				if (bt.value == 1)\
				\{\
					~fx.addStatesFunction(\cf4 \\zone1\cf0 , \{\cf2 |invalues|\cf0 \
\pard\pardeftab720\ql\qnatural
\cf0 				\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf0 						\cf2 var\cf0  states;\
							\
						if (~z1synths.notNil)\
						\{\
							states = invalues.states.clump(8);\
							~z1synths.do(\{\cf2 |active, i|\cf0 \
								\cf2 var\cf0  map, params;\
								if (active.notNil)\
								\{\
									params = \cf2 Array\cf0 .newClear(~z1params[0].size);\
									~z1params[i].do(\{\cf2 |param, j|\cf0 \
										params[j] = (\
											name: ~z1params[i].wrapAt(j).name, \
											pvalue: ~z1params[i].wrapAt(j).mapValue(states.wrapAt(i).wrapAt(j))\
										)\
									\});\
									active.src.set(\
										params[0].name, params[0].pvalue,\
										params[1].name, params[1].pvalue,\
										params[2].name, params[2].pvalue,\
										params[3].name, params[3].pvalue\
									);\
									active.trn.set(\
										params[4].name, params[4].pvalue,\
										params[5].name, params[5].pvalue,\
										params[6].name, params[6].pvalue,\
										params[7].name, params[7].pvalue,\
										params[8].name, params[8].pvalue,\
										params[9].name, params[9].pvalue\
									)\
								\}\
							\})\
						\}\
\pard\pardeftab720\ql\qnatural
\cf0 											\
				\});				\
				\}\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf0 				\{\
					~fx.removeStatesFunction(\cf4 \\zone1\cf0 )	\
				\}\
			\});\
			\
		\cf2 RoundButton\cf0 (panel, \cf2 Rect\cf0 (panel.bounds.width / 2, 35, panel.bounds.width / 2 - 5, 25))\
			.states_([[\cf3 "glob OFF"\cf0 , colors.orange, colors.steel ], [\cf3 "glob ON"\cf0 , colors.steel, colors.orange ]])\
			.font_(fonts.lucida9)\
			.action_(\{\cf2 |bt|\cf0 \
				if (bt.value == 1)\
				\{\
					~fx.addGlobalsFunction(\cf4 \\zone1\cf0 , \{\cf2 |invalues|\cf0 \
						~rev.set(\
							~z1globals[0].name, ~z1globals[0].mapValue(invalues.avglbf),\
							~z1globals[1].name, ~z1globals[1].mapValue(invalues.avgrbf),\
							~z1globals[2].name, ~z1globals[2].mapValue(invalues.avgrbb),\
							~z1globals[3].name, ~z1globals[3].mapValue(invalues.avglbb),\
							~z1globals[4].name, ~z1globals[4].mapValue(invalues.avgltf),\
							~z1globals[5].name, ~z1globals[5].mapValue(invalues.avgrtf),\
							~z1globals[6].name, ~z1globals[6].mapValue(invalues.avgrtb),\
							~z1globals[7].name, ~z1globals[7].mapValue(invalues.avgltb)\
						);\
						\
						~line.set(\cf4 \\amp\cf0 , ~z1globals[8].mapValue(invalues.avgstate));\
					\})\
\pard\pardeftab720\ql\qnatural
\cf0 			\}\
			\{\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf0 					~fx.removeGlobalsFunction(\cf4 \\zone1\cf0 )\
\pard\pardeftab720\ql\qnatural
\cf0 			\}\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf0 			\});\
\
		\cf2 RoundButton\cf0 (panel, \cf2 Rect\cf0 (5, 65, panel.bounds.width / 2 - 5, 25))\
			.states_([[\cf3 "line OFF"\cf0 , colors.orange, colors.steel ], [\cf3 "line ON"\cf0 , colors.steel, colors.orange ]])\
			.font_(fonts.lucida9)\
			.action_(\{\cf2 |bt|\cf0 \
				if (bt.value == 1)\
				\{\
					~line = \cf2 Synth\cf0 .after(~rev, \cf4 \\line\cf0 , [\cf4 \\out\cf0 , 0, \cf4 \\in\cf0 , ~rout, \cf4 \\i_wrp\cf0 , 0.1, \cf4 \\frq\cf0 , 1.0, \cf4 \\wsz\cf0 , 0.1, \
						\cf4 \\dns\cf0 , 6, \cf4 \\rnd\cf0 , 0.05, \cf4 \\amp\cf0 , 0.5\
					])\
				\}\
				\{\
					~line.set(\cf4 \\gate\cf0 , -30.0)\
				\}\
			\});\
			\
\
		4.do(\{\cf2 |i|\cf0 \
			\cf2 RoundButton\cf0 (panel, \cf2 Rect\cf0 (i * 45 + 5, 95, panel.bounds.width / 4 - 5, 25))\
				.states_([[i.asString ++ \cf3 " off"\cf0 , colors.orange, colors.steel ], \
					[i.asString ++ \cf3 " on"\cf0 , colors.steel, colors.orange ]])\
				.font_(fonts.lucida9)\
				.action_(\{\cf2 |bt|\cf0 \
					\cf2 var\cf0  trans, grp, s_src, s_enc, s_trn, s_dst, buf;\
					if (bt.value == 1)\
					\{\
						grp = \cf2 Group\cf0 .tail(~agrp);\
						s_src = \cf2 Synth\cf0 .head(grp, \cf4 \\swarpfld\cf0 , [\cf4 \\out\cf0 , ~b_bus[i], \cf4 \\efx\cf0 , ~rbus, \cf4 \\gate\cf0 , 1.0, \cf4 \\aamp\cf0 , 0.5, \
							\cf4 \\eamp\cf0 , 0.1, \cf4 \\dur\cf0 , 1.0, \cf4 \\buf\cf0 , ~subloops[i], \cf4 \\str\cf0 , 0, \cf4 \\end\cf0 , 1.0, \cf4 \\wrp\cf0 , 0.001, \
							\cf4 \\frq\cf0 , ~freqs@i, \cf4 \\wsz\cf0 , 0.1, \cf4 \\dns\cf0 , rrand(2, 10), \cf4 \\rnd\cf0 , 0.01, \cf4 \\doneAction\cf0 , 14])\
							.setn(\cf4 \\env\cf0 , \cf2 Env\cf0 ([0.001, 1.0, 1.0, 0.001], [0.001, 1.0, 0.001], \cf4 \\sine\cf0 , 2, 1).asArray);\
						s_enc = \cf2 Synth\cf0 .tail(grp, \cf4 \\atkencodedel\cf0 , [\cf4 \\out\cf0 , ~t_bus[i], \cf4 \\in\cf0 , ~b_bus[i]])\
							.setn(\cf4 \\del\cf0 , \cf2 Array\cf0 .geom(4, rrand(0.001, 0.003), 1.618))\
							.setn(\cf4 \\azm\cf0 , ~orient.azimuthArray)\
							.setn(\cf4 \\elv\cf0 , ~orient.elevationArray);\
						s_trn = \cf2 Synth\cf0 .tail(grp, \cf4 \\atk_trans\cf0 , [\cf4 \\out\cf0 , ~abus, \cf4 \\in\cf0 , ~t_bus@i, \cf4 \\dist\cf0 , ~dist@i]);\
						~z1synths.put(i, (\cf4 \\src\cf0 : s_src, \cf4 \\enc\cf0 : s_enc, \cf4 \\trn\cf0 : s_trn, \cf4 \\grp\cf0 : grp));\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\ql\qnatural\pardirnatural
\cf0 					\}\
					\{\
						~z1synths[i].src.set(\cf4 \\gate\cf0 , -30.0);\
						\cf2 SystemClock\cf0 .sched(30, \{ ~z1synths[i] = \cf2 nil\cf0 ; \cf2 nil\cf0  \});\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf0 					\}\
\pard\pardeftab720\ql\qnatural
\cf0 			\});		\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf0 		\
		\});\
\
		4.do(\{\cf2 |i|\cf0 	\
			\cf2 RoundButton\cf0 (panel, \cf2 Rect\cf0 (i * 45 + 5, 125, panel.bounds.width / 4 - 5, 25))\
				.states_([[(i + 4).asString ++ \cf3 " off"\cf0 , colors.orange, colors.steel ], \
					[(i + 4).asString ++ \cf3 " on"\cf0 , colors.steel, colors.orange ]])\
				.font_(fonts.lucida9)\
				.action_(\{\cf2 |bt|\cf0 \
					\cf2 var\cf0  trans, grp, s_src, s_enc, s_trn, s_dst, buf;\
					if (bt.value == 1)\
					\{\
						grp = \cf2 Group\cf0 .tail(~agrp);\
						s_src = \cf2 Synth\cf0 .head(grp, \cf4 \\swarpfld\cf0 , [\cf4 \\out\cf0 , ~b_bus[i+4], \cf4 \\efx\cf0 , ~rbus, \cf4 \\gate\cf0 , 1.0, \cf4 \\aamp\cf0 , 0.5, \
							\cf4 \\eamp\cf0 , 0.1, \cf4 \\dur\cf0 , 1.0, \cf4 \\buf\cf0 , ~subloops[i+4], \cf4 \\str\cf0 , 0, \cf4 \\end\cf0 , 1.0, \cf4 \\wrp\cf0 , 0.001, \
							\cf4 \\frq\cf0 , ~freqs@i, \cf4 \\wsz\cf0 , 0.1, \cf4 \\dns\cf0 , rrand(2, 10), \cf4 \\rnd\cf0 , 0.01, \cf4 \\doneAction\cf0 , 14])\
							.setn(\cf4 \\env\cf0 , \cf2 Env\cf0 ([0.001, 1.0, 1.0, 0.001], [0.001, 1.0, 0.001], \cf4 \\sine\cf0 , 2, 1).asArray);\
						s_enc = \cf2 Synth\cf0 .tail(grp, \cf4 \\atkencodedel\cf0 , [\cf4 \\out\cf0 , ~t_bus[i+4], \cf4 \\in\cf0 , ~b_bus[i+4]])\
							.setn(\cf4 \\del\cf0 , \cf2 Array\cf0 .geom(4, rrand(0.001, 0.003), 1.618))\
							.setn(\cf4 \\azm\cf0 , ~orient.azimuthArray)\
							.setn(\cf4 \\elv\cf0 , ~orient.elevationArray);\
						s_trn = \cf2 Synth\cf0 .tail(grp, \cf4 \\atk_trans\cf0 , [\cf4 \\out\cf0 , ~abus, \cf4 \\in\cf0 , ~t_bus[i+4], \cf4 \\dist\cf0 , ~dist[i+4]]);\
						~z1synths.put(i + 4, (\cf4 \\src\cf0 : s_src, \cf4 \\enc\cf0 : s_enc, \cf4 \\trn\cf0 : s_trn, \cf4 \\grp\cf0 : grp));\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\ql\qnatural\pardirnatural
\cf0 					\}\
					\{\
						~z1synths[i+4].src.set(\cf4 \\gate\cf0 , -30.0);\
						\cf2 SystemClock\cf0 .sched(30, \{ ~z1synths[i+4] = \cf2 nil\cf0 ; \cf2 nil\cf0  \});\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf0 					\}\
\pard\pardeftab720\ql\qnatural
\cf0 			\});		\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf0 		\
		\});\
\
		~z1items = (\
			\cf4 \\det_0_7\cf0 : \{  \
				~subloops = ~loops.select(\{\cf2 |loop|\cf0  loop.path.contains(\cf3 "detloop_"\cf0 ) \});\
\pard\pardeftab720\ql\qnatural
\cf0 			~z1synths.do(\{\cf2 |syn, i|\cf0 \
				if (syn.notNil)\
				\{\
					syn.src.set(\cf4 \\buf\cf0 , ~subloops[i]);\
					(\cf3 "loop at "\cf0  ++ i.asString ++ \cf3 " changed"\cf0 ).postln;\
				\}\
			\});	\
			\cf3 "zone 1 loops change complete"\cf0 .postln;						\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf0 			\},\
			\cf4 \\det_8_15\cf0 : \{  \
\pard\pardeftab720\ql\qnatural
\cf0 			~subloops = ~loops.select(\{\cf2 |it|\cf0  it.path.contains(\cf3 "detloop_"\cf0 ) \});\
			~z1synths.do(\{\cf2 |syn, i|\cf0 \
				if (syn.notNil)\
				\{\
					syn.src.set(\cf4 \\buf\cf0 , ~subloops[i + 8]);\
					(\cf3 "loop at "\cf0  ++ i.asString ++ \cf3 " changed"\cf0 ).postln;\
				\}\
			\});		\
			\cf3 "zone 1 loops change complete"\cf0 .postln;		\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf0 			\},\
			\cf4 \\oop_rand\cf0 : \{  \
				\cf2 Routine\cf0 (\{\
\pard\pardeftab720\ql\qnatural
\cf0 				~subloops = ~loops.select(\{\cf2 |it|\cf0  it.path.contains(\cf3 "monooop"\cf0 ) \});\
				~z1synths.do(\{\cf2 |syn, i|\cf0 \
					if (syn.notNil)\
					\{\
						syn.src.set(\cf4 \\buffer\cf0 , ~subloops.choose);\
						(\cf3 "loop at "\cf0  ++ i.asString ++ \cf3 " changed"\cf0 ).postln;\
						2.wait;\
					\}\
				\});		\
				\cf3 "zone 1 loops change complete"\cf0 .postln;		\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf0 				\}).play\
			\},\
			\cf4 \\oop_0_7\cf0 : \{  \
				\cf2 Routine\cf0 (\{\
\pard\pardeftab720\ql\qnatural
\cf0 				~subloops = ~loops.select(\{\cf2 |it|\cf0  it.path.contains(\cf3 "monooop"\cf0 ) \});\
				~z1synths.do(\{\cf2 |syn, i|\cf0 \
					if (syn.notNil)\
					\{\
						syn.src.set(\cf4 \\buffer\cf0 , ~subloops[i]);\
						(\cf3 "loop at "\cf0  ++ i.asString ++ \cf3 " changed"\cf0 ).postln;\
						2.wait;\
					\}\
				\});		\
				\cf3 "zone 1 loops change complete"\cf0 .postln;		\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf0 				\}).play\
			\},\
			\cf4 \\sum_4_11\cf0 : \{  \
				\cf2 Routine\cf0 (\{\
\pard\pardeftab720\ql\qnatural
\cf0 				~subloops = ~loops.select(\{\cf2 |it|\cf0  it.path.contains(\cf3 "sumeloop"\cf0 ) \});\
				~z1synths.do(\{\cf2 |syn, i|\cf0 \
					if (syn.notNil)\
					\{\
						syn.src.set(\cf4 \\buffer\cf0 , ~subloops[i + 4]);\
						(\cf3 "loop at "\cf0  ++ i.asString ++ \cf3 " changed"\cf0 ).postln;\
						2.wait;\
					\}\
				\});\
				\cf3 "zone 1 loops change complete"\cf0 .postln;		\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf0 				\}).play\
			\},\
			\cf4 \\nim_rand\cf0 : \{  \
				\cf2 Routine\cf0 (\{\
\pard\pardeftab720\ql\qnatural
\cf0 				~subloops = ~loops.select(\{\cf2 |it|\cf0  it.path.contains(\cf3 "nimeloop"\cf0 ) \});\
				~z1synths.do(\{\cf2 |syn, i|\cf0 \
					if (syn.notNil)\
					\{\
						syn.src.set(\cf4 \\buffer\cf0 , ~subloops.choose);\
						(\cf3 "loop at "\cf0  ++ i.asString ++ \cf3 " changed"\cf0 ).postln;\
						2.wait;\
					\}\
				\});		\
				\cf3 "zone 1 loops change complete"\cf0 .postln;		\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf0 				\}).play\
			\},\
			\cf4 \\the_rand\cf0 : \{  \
				\cf2 Routine\cf0 (\{\
\pard\pardeftab720\ql\qnatural
\cf0 				~subloops = ~loops.select(\{\cf2 |it|\cf0  it.path.contains(\cf3 "tehisloop"\cf0 ) \});\
				~z1synths.do(\{\cf2 |syn, i|\cf0 \
					if (syn.notNil)\
					\{\
						syn.src.set(\cf4 \\buffer\cf0 , ~subloops.choose);\
						(\cf3 "loop at "\cf0  ++ i.asString ++ \cf3 " changed"\cf0 ).postln;\
						2.wait;\
					\}\
				\});		\
				\cf3 "zone 1 loops change complete"\cf0 .postln;		\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf0 				\}).play\
			\},\
			\cf4 \\fx_rand\cf0 : \{  \
				\cf2 Routine\cf0 (\{\
\pard\pardeftab720\ql\qnatural
\cf0 				~subloops = ~loops.select(\{\cf2 |it|\cf0  it.path.contains(\cf3 "fxloop"\cf0 ) \});\
				~z1synths.do(\{\cf2 |syn, i|\cf0 \
					if (syn.notNil)\
					\{\
						syn.src.set(\cf4 \\buffer\cf0 , ~subloops.choose);\
						(\cf3 "loop at "\cf0  ++ i.asString ++ \cf3 " changed"\cf0 ).postln;\
						2.wait;\
					\}\
				\});		\
				\cf3 "zone 1 loops change complete"\cf0 .postln;		\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf0 				\}).play\
			\}\
		);\
		\
		~z1pm = \cf2 SCPopUpMenu\cf0 (panel, \cf2 Rect\cf0 (5, 155, panel.bounds.width / 1.5 - 5, 25))\
			.background_(colors.steel)\
			.font_(fonts.lucida9)			\
			.stringColor_(colors.orange)\
			.items_(~z1items.keys(\cf2 Array\cf0 ).sort);\
		\
		\cf2 RoundButton\cf0 (panel, \cf2 Rect\cf0 (panel.bounds.width / 1.5 + 5, 155, panel.bounds.width / 3 - 10, 25))\
			.font_(fonts.lucida9)\
			.states_([[\cf3 "send"\cf0 , colors.orange, colors.steel]])\
			.action_(\{\
				~z1items[~z1pm.items[~z1pm.value].asSymbol].value\
			\});				\
\
		~z1smspecs = (\
			\cf4 \\rtime\cf0 : \cf2 LinearWarp\cf0 (\cf2 ControlSpec\cf0 (10.0, 20.0)),\
			\cf4 \\tail\cf0 : \cf2 LinearWarp\cf0 (\cf2 ControlSpec\cf0 (1.0, 2.0)),\
			\cf4 \\aamp\cf0 : \cf2 LinearWarp\cf0 (\cf2 ControlSpec\cf0 (1.0, 4.0)),\
			\cf4 \\line\cf0 : \cf2 LinearWarp\cf0 (\cf2 ControlSpec\cf0 (0.5, 3.0, default: 2.0))\
		);			\
				\
		\cf2 SmoothSlider\cf0 (panel, \cf2 Rect\cf0 (0 * 45 + 5, 215, panel.bounds.width / 4 - 5, 140))\
			.action_(\{\cf2 |sl|\cf0 \
				~z1globals[0].spec.minval = ~z1smspecs[\cf4 \\rtime\cf0 ].map(sl.value)\
			\});\
		\cf2 SmoothSlider\cf0 (panel, \cf2 Rect\cf0 (1 * 45 + 5, 215, panel.bounds.width / 4 - 5, 140))\
			.action_(\{\cf2 |sl|\cf0 \
				~z1globals[6].spec.minval = ~z1smspecs[\cf4 \\tail\cf0 ].map(sl.value)\
			\});\
		\cf2 SmoothSlider\cf0 (panel, \cf2 Rect\cf0 (2 * 45 + 5, 215, panel.bounds.width / 4 - 5, 140))\
			.action_(\{\cf2 |sl|\cf0 \
				~z1globals[7].spec.maxval = ~z1smspecs[\cf4 \\aamp\cf0 ].map(sl.value)\
			\});\
		\cf2 SmoothSlider\cf0 (panel, \cf2 Rect\cf0 (3 * 45 + 5, 215, panel.bounds.width / 4 - 5, 140))\
			.value_(~z1smspecs[\cf4 \\line\cf0 ].spec.unmap(~z1smspecs[\cf4 \\line\cf0 ].spec.default))\
			.action_(\{\cf2 |sl|\cf0 \
				~z1globals[8].spec.maxval = ~z1smspecs[\cf4 \\line\cf0 ].map(sl.value)\
			\});\
\
		[\cf3 "rtime"\cf0 , \cf3 "tail"\cf0 , \cf3 "amp"\cf0 , \cf3 "line"\cf0  ].do(\{\cf2 |txt, i|\cf0 \
			\cf2 SCStaticText\cf0 (panel, \cf2 Rect\cf0 (i * 45 + 5, 215, panel.bounds.width / 4 - 5, 25))\
				.font_(fonts.skia)\
				.stringColor_(colors.orange)\
				.align_(\cf4 \\center\cf0 )\
				.string_(txt)\
		\})\
			\
		\
\
\});\
\
~fx.perfGui.assignPanel(2, \{\cf2 |panel|\cf0 \
	\cf2 var\cf0  colors, fonts;\
	colors = (\
		\cf4 \\blue\cf0 : \cf2 Color\cf0 .new255(28, 134, 238),\
		\cf4 \\orange\cf0 : \cf2 Color\cf0 .new255(184, 134, 11),\
		\cf4 \\steel\cf0 : \cf2 Color\cf0 .new255(4, 50, 89)\
	);\
	fonts = (\
		\cf4 \\lucida9\cf0 : \cf2 Font\cf0 (\cf3 "Lucida Grande"\cf0 , 9),\
		\cf4 \\lucida11\cf0 : \cf2 Font\cf0 (\cf3 "Lucida Grande"\cf0 , 11),\
		\cf4 \\skia\cf0 : \cf2 Font\cf0 (\cf3 "Skia"\cf0 , 9) \
	);\
	\cf2 RoundButton\cf0 (panel, \cf2 Rect\cf0 (5, 5, panel.bounds.width - 10, 25))\
		.states_([[\cf3 "initialize"\cf0 , colors.orange, colors.steel ]])\
		.font_(fonts.lucida11)\
		.action_(\{\
			~loopind = (0..7);\
\
			~indices = (0..63).clump(2).clump(2).flop.flatten(2).clump(4).perfectShuffle\
					.clump(4).flop.flatten(2).clump(8).sort(\{\cf2 |a, b|\cf0  a[0] < b[0] \});\
			\
			~trigmap = [\
				(\cf4 \\on\cf0 : 0.1, \cf4 \\off\cf0 : 0.3, \cf4 \\last\cf0 : 0, \cf4 \\active\cf0 : \cf2 false\cf0  ),\
				(\cf4 \\on\cf0 : 0.2, \cf4 \\off\cf0 : 0.4, \cf4 \\last\cf0 : 0, \cf4 \\active\cf0 : \cf2 false\cf0  ),\
				(\cf4 \\on\cf0 : 0.3, \cf4 \\off\cf0 : 0.5, \cf4 \\last\cf0 : 0, \cf4 \\active\cf0 : \cf2 false\cf0  ),\
				(\cf4 \\on\cf0 : 0.4, \cf4 \\off\cf0 : 0.6, \cf4 \\last\cf0 : 0, \cf4 \\active\cf0 : \cf2 false\cf0  ),\
				(\cf4 \\on\cf0 : 0.9, \cf4 \\off\cf0 : 0.7, \cf4 \\last\cf0 : 0, \cf4 \\active\cf0 : \cf2 false\cf0  ),\
				(\cf4 \\on\cf0 : 0.8, \cf4 \\off\cf0 : 0.6, \cf4 \\last\cf0 : 0, \cf4 \\active\cf0 : \cf2 false\cf0  ),\
				(\cf4 \\on\cf0 : 0.7, \cf4 \\off\cf0 : 0.5, \cf4 \\last\cf0 : 0, \cf4 \\active\cf0 : \cf2 false\cf0  ),\
				(\cf4 \\on\cf0 : 0.6, \cf4 \\off\cf0 : 0.4, \cf4 \\last\cf0 : 0, \cf4 \\active\cf0 : \cf2 false\cf0  )\
			];\
\
			~z3synths = \cf2 Array\cf0 .newClear(8);\
\
			~z3map = (\
				\cf4 \\aamp\cf0 : \cf2 LinearWarp\cf0 (\cf2 ControlSpec\cf0 (0.5, 0.1)),\
				\cf4 \\str\cf0 : \cf2 LinearWarp\cf0 (\cf2 ControlSpec\cf0 (0, 0.5)),\
				\cf4 \\end\cf0 : \cf2 LinearWarp\cf0 (\cf2 ControlSpec\cf0 (0.5, 1.0)),\
				\cf4 \\wrp\cf0 : \cf2 LinearWarp\cf0 (\cf2 ControlSpec\cf0 (0.125/4 , 1.0/4, step: 2**(1/5) )),\
				\cf4 \\frq\cf0 : \cf2 LinearWarp\cf0 (\cf2 ControlSpec\cf0 (1.0, 1.0 )),\
				\cf4 \\wsz\cf0 : \cf2 LinearWarp\cf0 (\cf2 ControlSpec\cf0 (0.0625, 0.5, step: 2**(1/5) )),\
				\cf4 \\dns\cf0 : \cf2 LinearWarp\cf0 (\cf2 ControlSpec\cf0 (4, 32, step: 2**(1/5) )),\
				\cf4 \\rnd\cf0 : \cf2 LinearWarp\cf0 (\cf2 ControlSpec\cf0 (0.1, 0.2)),\
				\cf4 \\xang\cf0 : \cf2 LinearWarp\cf0 (\cf2 ControlSpec\cf0 (pi, -pi, step: 2**(1/5) )),\
				\cf4 \\yang\cf0 : \cf2 LinearWarp\cf0 (\cf2 ControlSpec\cf0 (pi, -pi, step: 2**(1/5) )),\
				\cf4 \\zang\cf0 : \cf2 LinearWarp\cf0 (\cf2 ControlSpec\cf0 (pi, -pi, step: 2**(1/5) ))\
			);\
\
			~z3pmaps = (\
				\cf4 \\kck\cf0 : [\cf4 \\ou\cf0 , ~abus, \cf4 \\ef\cf0 , 99, \cf4 \\fr\cf0 , 50.0, \cf4 \\at\cf0 , 0.1, \cf4 \\dr\cf0 , 0.05, \cf4 \\cr\cf0 , -4, \cf4 \\ea\cf0 , 1, \
					\cf4 \\on\cf0 , 1, \cf4 \\am\cf0 , 1.0],\
				\cf4 \\snr\cf0 : [\cf4 \\ou\cf0 , ~abus, \cf4 \\fr\cf0 , 400, \cf4 \\at\cf0 , 0.008, \cf4 \\dr\cf0 , 0.05, \cf4 \\cr\cf0 , -6, \cf4 \\dc\cf0 , 2, \cf4 \\dl\cf0 , 0.125, \cf4 \\wt\cf0 , 3,\
					\cf4 \\am\cf0 , 12],\
				\cf4 \\hh\cf0 : [\cf4 \\ou\cf0 , ~abus, \cf4 \\dr\cf0 , 0.04, \cf4 \\fr\cf0 , 2500, \cf4 \\am\cf0 , 25.0],\
				\cf4 \\bss\cf0 : [\cf4 \\ou\cf0 , ~abus, \cf4 \\fr\cf0 , 60.0, \cf4 \\dr\cf0 , 0.05, \cf4 \\am\cf0 , 4.0],\
				\cf4 \\clck\cf0 : [\cf4 \\ou\cf0 , ~abus, \cf4 \\ef\cf0 , 99, \cf4 \\am\cf0 , 8.0, \cf4 \\dr\cf0 , 0.2, \cf4 \\bt\cf0 , 1, \cf4 \\ea\cf0 , 1],\
				\cf4 \\nzsnr\cf0 : [\cf4 \\ou\cf0 , ~abus, \cf4 \\am\cf0 , 4, \cf4 \\fr\cf0 , 700, \cf4 \\dr\cf0 , 0.2],\
				\cf4 \\pnk\cf0 : [\cf4 \\ou\cf0 , ~abus, \cf4 \\dr\cf0 , 0.05, \cf4 \\am\cf0 , 4.0],\
				\cf4 \\fmsnth\cf0 : [\cf4 \\ou\cf0 , ~abus, \cf4 \\ef\cf0 , 99, \cf4 \\dr\cf0 , 0.05, \cf4 \\gd\cf0 , 0.015, \cf4 \\cf\cf0 , 500, \cf4 \\mf\cf0 , 0.5, \cf4 \\in\cf0 , 12, \
					\cf4 \\on\cf0 , 1, \cf4 \\am\cf0 , 2]\
			);	\
			\
			~addSynth = \{\cf2 |index, invalues|\cf0 \
				\cf2 var\cf0  states = \cf2 Pseq\cf0 (invalues.states[~indices[index]], 2).asStream;\
				\cf2 Synth\cf0 .head(~agrp, ~z3defs[index].name, ~z3pmaps[~z3defs[index].name.asSymbol] \
					++ [\cf4 \\az\cf0 , [-pi, pi].asSpec.map(states.next)]);\
				~z3synths[index] = \cf2 Synth\cf0 .head(~agrp, \cf4 \\rwarpfldatk\cf0 , \
					[\cf4 \\out\cf0 , ~abus, \cf4 \\efx\cf0 , ~rbus, \cf4 \\gate\cf0 , 1.0, \cf4 \\amp\cf0 , 1.0,\
					\cf4 \\eamp\cf0 , 0.5, \cf4 \\maxdel\cf0 , 0.1, \cf4 \\dur\cf0 , 1, \cf4 \\buf\cf0 , ~loops[~loopind[index]]\
					] ++ ~z3map.collect(\{\cf2 |spec|\cf0  spec.map(states.next) \}).asKeyValuePairs )\
						.setn(\cf4 \\env\cf0 , \cf2 Env\cf0 ([1, 1, 0], [0.8, 0.2], \cf4 \\lin\cf0 , 2, 1).asArray)\
						.setn(\cf4 \\delays\cf0 , \cf2 Array\cf0 .geom(4, [0.005, 0.01].asSpec.map(states.next), 1.618 ))\
						.setn(\cf4 \\shifts\cf0 , [1, 0.5, 0.25, 1])\
						.setn(\cf4 \\wins\cf0 , \cf2 Array\cf0 .geom(4, [0.01, 0.05].asSpec.map(states.next), 1.618 ))\
						.setn(\cf4 \\amps\cf0 , \cf2 Array\cf0 .geom(4, 1.0, 8/13));\
			\};\
			\
			~release = -1.0;\
		\
			~removeSynth = \{\cf2 |index|\cf0 \
				~z3synths[index].set(\cf4 \\gate\cf0 , ~release);\
				~z3synths[index] = \cf2 nil\cf0 ;	\
			\};			\
			\
		\});\
		\
		\cf2 RoundButton\cf0 (panel, \cf2 Rect\cf0 (5, 35, panel.bounds.width / 2 - 5, 25))\
			.states_([[\cf3 "states OFF"\cf0 , colors.orange, colors.steel ], [\cf3 "states ON"\cf0 , colors.steel, colors.orange ]])\
			.font_(fonts.lucida9)\
			.action_(\{\cf2 |bt|\cf0 \
				if (bt.value == 1)\
				\{\
					~fx.addStatesFunction(\cf4 \\zone3\cf0 , \{\cf2 |invalues|\cf0 \
						~indices.do(\{ \cf2 |index, i|\cf0 \
							\cf2 var\cf0  map, states, params = invalues.states[index];\
							map = ~trigmap[i];\
							\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf5 //							if (~z3synths[i].notNil)\cf0 \
\cf5 //							\{\cf0 \
\cf5 //								states = Pseq(invalues.states[~indices[i]], 2).asStream;\cf0 \
\cf5 //								~z3synths[i].set(*~z3map.collect(\{|spec| spec.map(states.next) \}).asKeyValuePairs)\cf0 \
\cf5 //							\};\cf0 \
							\
							if (map.on > map.off) \{\
								if ((map.active.not).and(params[0] > map.off).and(params[0] < map.on))\
								\{\
									~addSynth.value(i, invalues);\
									map.active = \cf2 true\cf0 ;\
								\};\
								if ((map.active).and((params[0] < map.off).or(params[0] > map.on) ))\
								\{\
									~removeSynth.value(i);\
									map.active = \cf2 false\cf0 ;\
								\}\
							\}\
							\{\
								if ((map.active.not).and(params[0] < map.off).and(params[0] > map.on))\
								\{\
									~addSynth.value(i, invalues);\
									map.active = \cf2 true\cf0 ;\
								\};\
								if ((map.active).and((params[0] > map.off).or(params[0] < map.on) ))\
								\{\
									~removeSynth.value(i);\
									map.active = \cf2 false\cf0 ;\
								\}\
							\
							\}	\
						\})\
\pard\pardeftab720\ql\qnatural
\cf0 			 	\})\
			 \}\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf0 				\{\
					~fx.removeStatesFunction(\cf4 \\zone3\cf0 )	\
				\}\
			\});\
\
		~z3items = (\
			\cf4 \\det_0_7\cf0 : \{  \
				\cf2 Routine\cf0 (\{				\
					(0..7).do(\{\cf2 |ind, i|\cf0 \
						~loopind[i] = ind;\
						4.wait;\
					\})\
				\}).play\
			\},\
			\cf4 \\det_8_15\cf0 : \{  \
				\cf2 Routine\cf0 (\{\
					(8..15).do(\{\cf2 |ind, i|\cf0 \
						~loopind[i] = ind;\
						4.wait;\
					\})\
				\}).play\
			\},\
			\cf4 \\fx_0_7\cf0 : \{  \
				\cf2 Routine\cf0 (\{\
					(21..28).do(\{\cf2 |ind, i|\cf0 \
						~loopind[i] = ind;\
						4.wait;\
					\})\
				\}).play\
			\},\
			\cf4 \\mem_last\cf0 : \{  \
				\cf2 Routine\cf0 (\{\
					(68..75).do(\{\cf2 |ind, i|\cf0 \
						~loopind[i] = ind;\
						4.wait;\
					\})\
				\}).play\
			\},\
			\cf4 \\misc_0_4\cf0 : \{  \
				\cf2 Routine\cf0 (\{\
					(76..79).do(\{\cf2 |ind, i|\cf0 \
						~loopind[i] = ind;\
						4.wait;\
					\})\
				\}).play\
			\},\
			\cf4 \\oop\cf0 : \{  \
				\cf2 Routine\cf0 (\{\
					(104..111).do(\{\cf2 |ind, i|\cf0 \
						~loopind[i] = ind;\
						4.wait;\
					\})\
				\}).play\
			\},\
			\cf4 \\nim\cf0 : \{\
				\cf2 Routine\cf0 (\{\
					(150..157).do(\{\cf2 |ind, i|\cf0 \
						~loopind[i] = ind;\
						4.wait;\
					\})\
				\}).play			\
			\},\
			\cf4 \\sum\cf0 : \{\
				\cf2 Routine\cf0 (\{\
					(188..195).do(\{\cf2 |ind, i|\cf0 \
						~loopind[i] = ind;\
						4.wait;\
					\})\
				\}).play			\
			\},\
			\cf4 \\teh\cf0 : \{\
				\cf2 Routine\cf0 (\{\
					(230..237).do(\{\cf2 |ind, i|\cf0 \
						~loopind[i] = ind;\
						4.wait;\
					\})\
				\}).play			\
			\}\
			\
		);\
		\
		~z3pm = \cf2 SCPopUpMenu\cf0 (panel, \cf2 Rect\cf0 (5, 155, panel.bounds.width / 1.5 - 5, 25))\
			.background_(colors.steel)\
			.font_(fonts.lucida9)			\
			.stringColor_(colors.orange)\
			.items_(~z3items.keys(\cf2 Array\cf0 ).sort);\
		\
		\cf2 RoundButton\cf0 (panel, \cf2 Rect\cf0 (panel.bounds.width / 1.5 + 5, 155, panel.bounds.width / 3 - 10, 25))\
			.font_(fonts.lucida9)\
			.states_([[\cf3 "send"\cf0 , colors.orange, colors.steel]])\
			.action_(\{\
				~z3items[~z3pm.items[~z3pm.value].asSymbol].value\
			\});	\
			\
		~z3smspecs = (\
			\cf4 \\aamp\cf0 : \cf2 ControlSpec\cf0 (1.0, 2.0),\
			\cf4 \\wrp\cf0 : \cf2 ControlSpec\cf0 (1/4, 1, step: 2**(1/5) ),\
			\cf4 \\wsz\cf0 : \cf2 ControlSpec\cf0 (0.5, 0.125, step: 2**(1/5) )\
		);					\
\
		\cf2 SmoothSlider\cf0 (panel, \cf2 Rect\cf0 (0 * 45 + 5, 215, panel.bounds.width / 4 - 5, 140))\
			.action_(\{\cf2 |sl|\cf0 \
				~release = [-1.0, -4.0].asSpec.map(sl.value)\
			\});\
		\cf2 SmoothSlider\cf0 (panel, \cf2 Rect\cf0 (1 * 45 + 5, 215, panel.bounds.width / 4 - 5, 140))\
			.action_(\{\cf2 |sl|\cf0 \
				~z3map[\cf4 \\aamp\cf0 ].spec.minval = ~z3smspecs[\cf4 \\aamp\cf0 ].map(sl.value)\
			\});\
		\cf2 SmoothSlider\cf0 (panel, \cf2 Rect\cf0 (2 * 45 + 5, 215, panel.bounds.width / 4 - 5, 140))\
			.action_(\{\cf2 |sl|\cf0 \
				~z3map[\cf4 \\wrp\cf0 ].spec.maxval = ~z3smspecs[\cf4 \\wrp\cf0 ].map(sl.value)\
			\});\
		\cf2 SmoothSlider\cf0 (panel, \cf2 Rect\cf0 (3 * 45 + 5, 215, panel.bounds.width / 4 - 5, 140))\
			.action_(\{\cf2 |sl|\cf0 \
				~z3map[\cf4 \\wsz\cf0 ].spec.maxval = ~z3smspecs[\cf4 \\wsz\cf0 ].map(sl.value)\
			\});\
\
		[\cf3 "reltime"\cf0 , \cf3 "aamp"\cf0 , \cf3 "wrp"\cf0 , \cf3 "wsz"\cf0  ].do(\{\cf2 |txt, i|\cf0 \
			\cf2 SCStaticText\cf0 (panel, \cf2 Rect\cf0 (i * 45 + 5, 215, panel.bounds.width / 4 - 5, 25))\
				.font_(fonts.skia)\
				.stringColor_(colors.orange)\
				.align_(\cf4 \\center\cf0 )\
				.string_(txt)\
		\})\
			\
		\
\
\})\
\
)\
}