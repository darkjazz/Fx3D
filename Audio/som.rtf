{\rtf1\ansi\ansicpg1252\cocoartf949\cocoasubrtf540
{\fonttbl\f0\fnil\fcharset238 Inconsolata;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue191;\red0\green0\blue0;\red96\green96\blue96;
\red191\green0\blue0;\red0\green115\blue0;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f0\fs24 \cf2 var\cf3  atspath = \cf4 "/Users/alo/sounds/ats/*"\cf3 ;\
\
~serv = \cf2 Server\cf3 .internal;\
\cf2 Server\cf3 .default = ~serv;\
\
~atsfiles = \cf2 Array\cf3 .newClear(atspath.pathMatch.size);\
~atsdata = \cf2 Array\cf3 ();\
\
\cf5 //~calcFlatness = \{|file|\cf3 \
\cf5 //\cf3 \
\cf5 //\};\cf3 \
\cf5 //\cf3 \
\cf5 //~calcCentroid = \{||\cf3 \
\cf5 //\cf3 \
\cf5 //\};\cf3 \
\
\cf2 Routine\cf3 (\{\
	\cf2 var\cf3  prog = \cf2 ProgBar\cf3 (atspath.pathMatch.size);\
	atspath.pathMatch.do(\{\cf2 |path, i|\cf3 \
		\cf2 var\cf3  af;\
		af = \cf2 AtsFile\cf3 (path, ~serv);\
		if (af.numPartials > 20)\
		\{ \
			af.loadToBuffer;\
			~serv.sync;\
			~atsfiles.put(i, af);\
			~atsdata = ~atsdata.add( \
				( \
				\cf6 \\buffer\cf3 : af.buffer, \
				\cf6 \\nparts\cf3 : af.numPartials, \
				\cf6 \\dur\cf3 : af.sndDur,\
				\cf6 \\file\cf3 : af.filename\
				)\
			);\
		\};\
		prog.next;\
		0.001.wait;\
	\});\
	prog.close;\
	prog = \cf2 nil\cf3 ;\
	\
\}).play(\cf2 AppClock\cf3 );\
\
\cf2 AtsView\cf3 (~atsfiles[7])\
\
\cf2 var\cf3  med = \cf2 Array\cf3 ();\
~atsfiles[1].bandNoi.flop.do(\{\cf2 |frame|\cf3 \
	med = med.add(frame.median)\
\});\
med.median\
\
\
(\
10.do(\{\cf2 |i|\cf3 \
	\cf2 var\cf3  ind, amps, freqs, sum, diff, noise, nsum, med, tsum;\
	ind = i;\
	amps = ~atsfiles[ind].amps.flop;\
	freqs = ~atsfiles[ind].freqs.flop;\
	noise = ~atsfiles[ind].bandNoi.flop;\
	tsum = 0;\
	sum = 0;\
	diff = 0;\
	nsum = 0;\
	med = \cf2 Array\cf3 ();\
	amps.do(\{\cf2 |frame, i|\cf3 \
		sum = sum + frame.sum;\
		diff = diff + (frame.maxItem - frame.minItem);\
		med = med.add(frame.median);\
	\});\
	noise.do(\{\cf2 |frame|\cf3 \
		nsum = nsum + frame.sum;\
	\});\
	[\
		~atsfiles[ind].numPartials.linlin(20, 400, 0.0, 1.0), \
		(sum / amps.size), \
		(diff / amps.size),\
		med.median,\
		(nsum / noise.size)\
	].postln \
\})\
)\
\
~atsfiles[7].amps.flop.do(\{\cf2 |frame|\cf3 \
	((frame.sum / frame.size) / \cf0 (frame.sum ** (1 / frame.size)\cf3 )).postln\
\});\
\
~atsfiles[0].amps;}