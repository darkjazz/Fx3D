{\rtf1\ansi\ansicpg1252\cocoartf949\cocoasubrtf540
{\fonttbl\f0\fnil\fcharset238 Inconsolata;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue191;\red0\green0\blue0;\red96\green96\blue96;
\red0\green115\blue0;\red191\green0\blue0;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f0\fs24 \cf2 var\cf3  atspath = \cf4 "/Users/alo/sounds/ats/*"\cf3 ;\
\cf2 var\cf3  bufpath = \cf4 "/Users/alo/sounds/fx_loops/*"\cf3 ;\
\
~serv = \cf2 Server\cf3 .internal;\
\cf2 Server\cf3 .default = ~serv;\
\
~bpm = 140.0;\
~bps = ~bpm / 60.0;\
\
~zonepath = \cf4 "/Users/alo/Development/Fx3D/Audio/zones/"\cf3 ;\
\
\cf2 Routine\cf3 (\{\
\
	~atsfiles = \cf2 Array\cf3 .newClear(atspath.pathMatch.size);\
	~loops = \cf2 Array\cf3 .newClear(bufpath.pathMatch.size);\
	~atsdata = \cf2 Array\cf3 ();\
	\cf2 Routine\cf3 (\{\
		\cf2 var\cf3  prog;\
		\
		if ((~loadAts.isNil).or(~loadAts))\
		\{\
			prog = \cf2 ProgBar\cf3 (atspath.pathMatch.size);\
			atspath.pathMatch.do(\{\cf2 |path, i|\cf3 \
				\cf2 var\cf3  af;\
				af = \cf2 AtsFile\cf3 (path, ~serv);\
				if (af.numPartials > 20)\
				\{ \
					af.loadToBuffer;\
					~serv.sync;\
					~atsfiles.put(i, af);\
					~atsdata = ~atsdata.add( \
						( \
						\cf5 \\buffer\cf3 : af.buffer, \
						\cf5 \\nparts\cf3 : af.numPartials, \
						\cf5 \\dur\cf3 : af.sndDur ,\
						\cf5 \\file\cf3 : af.path\
						) \
					);\
				\};\
				prog.next;\
				0.001.wait;\
			\});\
			~atsfiles.removeEvery([\cf2 nil\cf3 ]);\
			prog.close;\
			prog = \cf2 nil\cf3 ;\
		\};\
					\
		prog = \cf2 ProgBar\cf3 (bufpath.pathMatch.size);\
		bufpath.pathMatch.do(\{\cf2 |path, i|\cf3 \
			~loops = ~loops.add( \cf2 Buffer\cf3 .read(~serv, path) );\
			~serv.sync;\
			\cf2 Post\cf3  << path.basename << \cf4 " loaded to buffer.."\cf3  << \cf2 Char\cf3 .nl;\
			prog.next;\
			0.001.wait;\
		\});\
		prog.close;\
		prog = \cf2 nil\cf3 ;\
		\
		~loops = ~loops.select(\cf2 _\cf3 .notNil);\
		\
		~eq = \cf2 MasterEQ\cf3 (4);\
		\
		~eq.window.bounds = \cf2 Rect\cf3 (1000, 600, \
			~eq.window.bounds.width, ~eq.window.bounds.height);\
			\
		~fx = \cf2 Fx3D\cf3 ().makeOglGui;\
		\
		\cf6 // EFX\cf3 \
		\
		\cf2 SynthDef\cf3 (\cf5 \\verb\cf3 , \{\cf2 |out, in, rtime, damp, inbw, spr, dry, early, tail, amp, gamp|\cf3 \
			\cf2 var\cf3  sig, input, actr, fb;\
			input = \cf2 In\cf3 .ar(in);\
			fb = \cf2 LocalIn\cf3 .ar;\
			sig = \cf2 GVerb\cf3 .ar(input + fb, 1500, rtime, damp, inbw, spr, dry, early, tail, 1500);\
			\cf2 LocalOut\cf3 .ar(\cf2 Mix\cf3 (sig) * 0.01);\
			\cf2 Out\cf3 .ar(out, (sig ++ sig) * amp);\
			\cf2 Out\cf3 .ar(0, (sig ++ sig) * gamp)\
		\}).add;		\
		\
		\cf6 // DECODERS\cf3 \
		\
		~decoder = \cf2 Decoder\cf3 (~localDecoder ? \cf2 true\cf3 , ~stereoOutput ? \cf2 false\cf3 );\
				\
		~serv.sync;\
		\
		(~zonepath ++ \cf4 "start_synths.rtf"\cf3 ).load;\
					\
		\cf4 "Zones initialized..."\cf3 .inform;\
		\
	\}).play(\cf2 AppClock\cf3 )\
\
\}).play(\cf2 AppClock\cf3 );}