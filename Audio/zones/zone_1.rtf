{\rtf1\ansi\ansicpg1252\cocoartf949\cocoasubrtf540
{\fonttbl\f0\fnil\fcharset238 Inconsolata;}
{\colortbl;\red255\green255\blue255;\red191\green0\blue0;\red0\green0\blue191;\red96\green96\blue96;
\red0\green115\blue0;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f0\fs24 \cf2 //alo allik. f(x).\cf0 \
(\
~loadAts = \cf3 false\cf0 ;\
~localDecoder = \cf3 false\cf0 ;\
~stereoOutput = \cf3 true\cf0 ;\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf4 "/Users/alo/Development/Fx3D/Audio/zones/initiate_zones.rtf"\cf0 .loadPath;\
)\
\
(\
\
\
\cf3 SynthDef\cf0 (\cf5 \\point\cf0 , \{\cf3 |out, buf, tb, gate, amp, tfr, afr, sln, sfr, sam, rmp, rtm, doneAction|\cf0 \
	\cf3 var\cf0  sig = 0, trg, azm, elv, enc, dst, s_freqs, s_amps, s_sig, env, clk, atrg, rev;\
	env = \cf3 EnvControl\cf0 .kr(\cf5 \\env\cf0 );\
	dst = \cf3 LFTri\cf0 .kr(afr).range(1.0, 2.0);\
	azm = \cf3 Dseq\cf0 ([-0.25, 0.25] * pi, \cf3 inf\cf0 );\
	elv = \cf3 Dstutter\cf0 (2, \cf3 Dseq\cf0 ([0.25, -0.25], \cf3 inf\cf0 ));\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf2 //	trg = Impulse.ar(tfr);\cf0 \
	trg = \cf3 InTrig\cf0 .kr(tb);\
	atrg = \cf3 K2A\cf0 .ar(trg);\
	sig = \cf3 PlayBuf\cf0 .ar(1, buf, trigger: trg) ** dst;\
	clk = \cf3 Mix\cf0 (\
		\cf3 BPF\cf0 .ar(\
\pard\pardeftab720\ql\qnatural
\cf0 		\cf3 PinkNoise\cf0 .ar(\cf3 Decay\cf0 .ar(atrg, 0.001 * \cf3 LFNoise1\cf0 .ar(4).abs)),\
		15000,\'a0\
		0.9,\'a0\
		25 * \cf3 LFNoise1\cf0 .ar(8).range(0, 1)\'a0\
		).fold(-1, 1)\
     );	\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf0 	s_sig = \cf3 SinOsc\cf0 .ar(sfr, 0, sam) \
		* \cf3 EnvGen\cf0 .kr(\cf3 Env\cf0 ([0.001, 1.0, 1.0, 0.001], [0.0, 0.9, 0.1]), \
			\cf3 PulseDivider\cf0 .ar(trg, 2.0), timeScale: sln);\
	#sig, rev = \cf3 DistAmp\cf0 .ar(sig + s_sig + clk, dst, rmp);\
	sig = sig + \cf3 Reverb\cf0 .ar(rev, rtm);\
	enc = \cf3 BFEncode1\cf0 .ar(sig * amp, \cf3 Demand\cf0 .kr(trg, 0, azm), \cf3 Demand\cf0 .kr(trg, 0, elv) );\
	\cf3 Out\cf0 .ar(out, enc * \cf3 EnvGen\cf0 .kr(env, gate, doneAction: doneAction))\
\}).add;\
\
\cf3 SynthDef\cf0 (\cf5 \\line\cf0 , \{\cf3 |out, in, gate = 1.0, i_wrp = 0.1, frq, wsz, dns, rnd, amp|\cf0 \
	\cf3 var\cf0  bufs, recs, ptrs, phases, deltimes, output, trigs, input;\
	deltimes = [0, 1 / i_wrp * 0.5, 1 / i_wrp];\
	bufs = \cf3 Array\cf0 .fill(3, \{ \cf3 LocalBuf\cf0 (\cf3 SampleRate\cf0 .ir * 2) \});\
	ptrs = \cf3 Array\cf0 .fill(3, \{\cf3 |i|\cf0  \cf3 LFSaw\cf0 .kr(i_wrp, 0, 0.5, 0.5) \});\
	trigs = \cf3 Array\cf0 .fill(3, \{\cf3 |i|\cf0  \cf3 DelayN\cf0 .kr(\cf3 Impulse\cf0 .kr(i_wrp * (2 / 3)), deltimes@i, deltimes@i) \});\
	input = \cf3 In\cf0 .ar(in);\
	recs = \cf3 Mix\cf0 .fill(3, \{\cf3 |i|\cf0 \
		\cf3 RecordBuf\cf0 .ar(input, bufs@i, loop:0.0, trigger: trigs@i);\
	\});\
	output = \cf3 Mix\cf0 .fill(3, \{\cf3 |i|\cf0 \
		\cf3 Warp1\cf0 .ar(1, bufs@i, ptrs@i, frq, wsz, -1, dns, rnd)\
			* \cf3 EnvGen\cf0 .kr(\
				\cf3 Env\cf0 ([0.0,1.0,1.0,0.0],[0.3,0.4,0.3],\cf5 \\sine\cf0 , 0, 3),\
				trigs.rotate(-1)@i, timeScale: 1.0 / i_wrp\
			)\
	\}) * \cf3 EnvGen\cf0 .kr(\cf3 Env\cf0 ([0.001, 1.0, 1.0, 0.001], [0.3, 0.4, 0.3], \cf5 \\sine\cf0 , 2), gate, doneAction: 2);\
	\cf3 Out\cf0 .ar(out, \
		\cf3 A2B\cf0 .ar(\
			output,\
			\cf3 DelayN\cf0 .ar(output, 0.01, 0.01),\
			\cf3 DelayN\cf0 .ar(output, 0.02, 0.02),\
			\cf3 DelayN\cf0 .ar(output, 0.03, 0.03)\
		) * amp\
	)\
\}).add;\
\
\
\pard\pardeftab720\ql\qnatural
\cf0 \
\cf3 SynthDef\cf0 (\cf5 \\swarpfld\cf0 , \{\cf3 |out, efx, gate, aamp, eamp, dur, buf, str, end, wrp, frq, wsz, dns, rnd, doneAction = 2|\cf0 \
	\cf3 var\cf0  ptr, sig, env;\
	env = \cf3 EnvControl\cf0 .kr(\cf5 \\env\cf0 , 16);	\
	ptr = \cf3 LFSaw\cf0 .kr(wrp).range(str, end);\
	sig = \cf3 SndWarp\cf0 .ar(buf, ptr, frq, wsz, dns, rnd) * \
		\cf3 EnvGen\cf0 .kr(env, gate, timeScale: dur, doneAction: doneAction);\
	sig = \cf3 LeakDC\cf0 .ar(sig ** 0.5);\
	\cf3 Out\cf0 .ar(efx, sig * eamp);\
	\cf3 Out\cf0 .ar(out, sig * aamp);\
\}).add;\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\ql\qnatural\pardirnatural
\cf0 \
\pard\pardeftab720\ql\qnatural
\cf3 SynthDef\cf0 (\cf5 \\rwarpfld\cf0 , \{\cf3 |out, efx, gate, aamp, eamp, dur, buf, str, end, wrp, frq, wsz, dns, rnd, doneAction = 2|\cf0 \
	\cf3 var\cf0  ptr, sig, env, bf;\
	env = \cf3 EnvControl\cf0 .kr(\cf5 \\env\cf0 , 16);	\
	ptr = \cf3 LFSaw\cf0 .kr(wrp).range(str, end);\
	sig = \cf3 LeakDC\cf0 .ar(\cf3 Warp1\cf0 .ar(1, buf, ptr, frq, wsz, -1, dns, rnd)) * \
		\cf3 EnvGen\cf0 .kr(env, gate, timeScale: dur, doneAction: doneAction);\
	sig = \cf3 LeakDC\cf0 .ar(sig ** 0.5);\
	\cf3 Out\cf0 .ar(efx, sig * eamp);\
	\cf3 Out\cf0 .ar(out, sig * aamp)\
\}).add;\
\
\cf3 SynthDef\cf0 (\cf5 \\atkencodedel\cf0 , \{\cf3 |out, in|\cf0 \
	\cf3 var\cf0  src, del, azm, elv, sig, a, b, c, d;\
	src = \cf3 In\cf0 .ar(in);\
	del = \cf3 ArrayControl\cf0 .kr(\cf5 \\del\cf0 , 4, 1);\
	azm = \cf3 ArrayControl\cf0 .kr(\cf5 \\azm\cf0 , 4, 1);\
	elv = \cf3 ArrayControl\cf0 .kr(\cf5 \\elv\cf0 , 4, 1);\
	sig = \cf3 Array\cf0 .fill(4, \{\cf3 |i|\cf0 \
\pard\pardeftab720\ql\qnatural
\cf2 //		DelayC.ar(src, delaytime: SinOsc.kr(1, pi / 4 * i).range(0, del@i))\cf0 \
		\cf3 DelayC\cf0 .ar(src, delaytime: del@i)\
	\});\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf0 	 a = \cf3 BLowShelf\cf0 .ar(\cf3 AtkMonoToB\cf0 .ar(sig@0, azm@0, elv@0), 100.0, 0.65, 0.0);\
	 b = \cf3 BPeakEQ\cf0 .ar(\cf3 AtkMonoToB\cf0 .ar(sig@1, azm@1, elv@1), 600.0, 2.0, 0.0 );\
	 c = \cf3 BPeakEQ\cf0 .ar(\cf3 AtkMonoToB\cf0 .ar(sig@2, azm@2, elv@2), 2000.0, 2.0, 0.0 );\
	 d = \cf3 BHiShelf\cf0 .ar(\cf3 AtkMonoToB\cf0 .ar(sig@3, azm@3, elv@3), 7500.0, 1, 0.0 );\
	 \cf3 Out\cf0 .ar(out, a + b + c + d);\
\pard\pardeftab720\ql\qnatural
\cf0 \}).add;\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf0 \
\pard\pardeftab720\ql\qnatural
\cf3 SynthDef\cf0 (\cf5 \\atk_trans\cf0 , \{\cf3 |out, in, xang = 0.0, yang = 0.0, zang = 0.0, \
	zoom = 0.0, push = 0.0, focus = 0.0 |\cf0 \
	\cf3 var\cf0  w, x, y, z;\
	#w, x, y, z = \cf3 In\cf0 .ar(in, 4);\
	#w, x, y, z = \cf3 AtkTilt\cf0 .ar(w, x, y, z, xang );\
	#w, x, y, z = \cf3 AtkTumble\cf0 .ar(w, x, y, z, yang );\
	#w, x, y, z = \cf3 AtkRotate\cf0 .ar(w, x, y, z, zang );\
\pard\pardeftab720\ql\qnatural
\cf2 //	#w, x, y, z = AtkZoom.ar(w, x, y, z, zoom, push, focus );\cf0 \
\cf2 //	#w, x, y, z = AtkPush.ar(w, x, y, z, push, focus, zoom );\cf0 \
\cf2 //	#w, x, y, z = AtkFocus.ar(w, x, y, z, focus, zoom, push );\cf0 \
	\cf3 Out\cf0 .ar(out, [w, x, y, z])\
\}).add;\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf0 \
)\
\
\
(\
	~invalues = \cf3 Event\cf0 ();\
\
	\
	~paramspecs = (\
		\cf5 \\aamp\cf0 : \cf3 Array\cf0 .fill(8, \{\cf3 |i|\cf0  \cf3 CyclicWarp\cf0 ([i * 0.03 + 0.2, 2.0 - (i * 0.1)].asSpec) \}).reverse,\
		\cf5 \\str\cf0 : \cf3 Array\cf0 .fill(8, \{\cf3 |i|\cf0  \cf3 CyclicWarp\cf0 ([0.0, 0.5].asSpec) \}),\
		\cf5 \\end\cf0 : \cf3 Array\cf0 .fill(8, \{\cf3 |i|\cf0  \cf3 CyclicWarp\cf0 ([0.5, 1.0].asSpec) \}),\
		\cf5 \\eamp\cf0 : \cf3 Array\cf0 .fill(8, \{\cf3 |i|\cf0  [4.0 - (i * 0.2), i * 0.1 + 0.2 ].asSpec \}),\
		\cf5 \\xang\cf0 : \cf3 Array\cf0 .fill(8, \{\cf3 |i|\cf0  \cf3 CyclicWarp\cf0 ([i*(pi/4.5)-pi, i*(pi/4.5)+(pi/2.25)-pi].asSpec) \}).scramble,\
		\cf5 \\yang\cf0 : \cf3 Array\cf0 .fill(8, \{\cf3 |i|\cf0  \cf3 CyclicWarp\cf0 ([i*(pi/4.5)-pi, i*(pi/4.5)+(pi/2.25)-pi].asSpec) \}).scramble,\
		\cf5 \\zang\cf0 : \cf3 Array\cf0 .fill(8, \{\cf3 |i|\cf0  \cf3 CyclicWarp\cf0 ([i*(pi/4.5)-pi, i*(pi/4.5)+(pi/2.25)-pi].asSpec) \}).scramble,\
  		\cf5 \\zoom\cf0 : \cf3 Array\cf0 .fill(8, \{\cf3 |i|\cf0  \cf3 CyclicWarp\cf0 ([i*(pi/8)-0.5pi, i*(pi/8)+(pi/8)-0.5pi].asSpec) \}).reverse,\
		\cf5 \\push\cf0 : \cf3 Array\cf0 .fill(8, \{\cf3 |i|\cf0  \cf3 CyclicWarp\cf0 ([i*(pi/8)-0.5pi, i*(pi/8)+(pi/8)-0.5pi].asSpec) \}),\
		\cf5 \\focus\cf0 : \cf3 Array\cf0 .fill(8, \{\cf3 |i|\cf0  \cf3 CyclicWarp\cf0 ([i + 1 / 8 * -0.49pi, i + 1 / 8 * 0.49pi].asSpec) \})\
	);\
	\
	~fxparams = \cf3 Array\cf0 .fill(8, \{\cf3 |i|\cf0 \
		[\
			\cf3 FxParam\cf0 (\cf5 \\aamp\cf0 , \cf5 \\aamp\cf0 , ~paramspecs[\cf5 \\aamp\cf0 ][i], \cf3 false\cf0 ),\
			\cf3 FxParam\cf0 (\cf5 \\str\cf0 , \cf5 \\str\cf0 , ~paramspecs[\cf5 \\str\cf0 ][i], \cf3 false\cf0 ),\
			\cf3 FxParam\cf0 (\cf5 \\end\cf0 , \cf5 \\end\cf0 , ~paramspecs[\cf5 \\end\cf0 ][i], \cf3 false\cf0 ),\
			\cf3 FxParam\cf0 (\cf5 \\eamp\cf0 , \cf5 \\eamp\cf0 , ~paramspecs[\cf5 \\eamp\cf0 ][i], \cf3 false\cf0 ),\
			\cf3 FxParam\cf0 (\cf5 \\xang\cf0 , \cf5 \\xsc\cf0 , ~paramspecs[\cf5 \\xang\cf0 ][i], \cf3 false\cf0 ),\
			\cf3 FxParam\cf0 (\cf5 \\yang\cf0 , \cf5 \\ysc\cf0 , ~paramspecs[\cf5 \\yang\cf0 ][i], \cf3 false\cf0 ),\
			\cf3 FxParam\cf0 (\cf5 \\zang\cf0 , \cf5 \\zsc\cf0 , ~paramspecs[\cf5 \\zang\cf0 ][i], \cf3 false\cf0 ),\
			\cf3 FxParam\cf0 (\cf5 \\zoom\cf0 , \cf5 \\zoom\cf0 , ~paramspecs[\cf5 \\zoom\cf0 ][i], \cf3 false\cf0 ),\
			\cf3 FxParam\cf0 (\cf5 \\push\cf0 , \cf5 \\push\cf0 , ~paramspecs[\cf5 \\push\cf0 ][i], \cf3 false\cf0 ),\
			\cf3 FxParam\cf0 (\cf5 \\focus\cf0 , \cf5 \\focus\cf0 , ~paramspecs[\cf5 \\focus\cf0 ][i], \cf3 false\cf0 )\
		];	\
	\});\
\
		\
	~fxglobals = [\
		\cf3 FxParam\cf0 (\cf5 \\rtime\cf0 , \cf5 \\rtime\cf0 , \cf3 ControlSpec\cf0 (10.0, 5.0), \cf3 false\cf0 ),\
		\cf3 FxParam\cf0 (\cf5 \\damp\cf0 , \cf5 \\damp\cf0 , \cf3 ControlSpec\cf0 (0.0, 1.0), \cf3 false\cf0 ),\
		\cf3 FxParam\cf0 (\cf5 \\inbw\cf0 , \cf5 \\inbw\cf0 , \cf3 ControlSpec\cf0 (0.0, 1.0), \cf3 false\cf0 ),\
		\cf3 FxParam\cf0 (\cf5 \\spr\cf0 , \cf5 \\spr\cf0 , \cf3 ControlSpec\cf0 (5, 20), \cf3 false\cf0 ),\
		\cf3 FxParam\cf0 (\cf5 \\dry\cf0 , \cf5 \\dry\cf0 , \cf3 ControlSpec\cf0 (0.0, 0.1), \cf3 false\cf0 ),\
		\cf3 FxParam\cf0 (\cf5 \\early\cf0 , \cf5 \\early\cf0 , \cf3 ControlSpec\cf0 (0.0, 0.1), \cf3 false\cf0 ),\
		\cf3 FxParam\cf0 (\cf5 \\tail\cf0 , \cf5 \\tail\cf0 , \cf3 ControlSpec\cf0 (1.0, 0.2), \cf3 false\cf0 ),\
		\cf3 FxParam\cf0 (\cf5 \\amp\cf0 , \cf5 \\amp\cf0 , \cf3 ControlSpec\cf0 (0.0, 1.0), \cf3 false\cf0 ),\
		\cf3 FxParam\cf0 (\cf5 \\line\cf0 , \cf5 \\line\cf0 , \cf3 ControlSpec\cf0 (0.4, 2.0, \cf5 'lin'\cf0 , 0.1), \cf3 false\cf0 )\
	];\
	\
	\
	\
	~mapParams = \{\
		\cf3 var\cf0  states;\
			\
		if (~activeSynths.notNil)\
		\{\
			states = ~invalues.states.clump(8);\
			~activeSynths.do(\{\cf3 |active, i|\cf0 \
				\cf3 var\cf0  map, params;\
				params = \cf3 Array\cf0 .newClear(~fxparams[0].size);\
				~fxparams[i].do(\{\cf3 |param, j|\cf0 \
					params[j] = (\
						name: ~fxparams[i].wrapAt(j).name, \
						pvalue: ~fxparams[i].wrapAt(j).mapValue(states.wrapAt(i).wrapAt(j))\
					)\
				\});\
				active.src.set(\
					params[0].name, params[0].pvalue,\
					params[1].name, params[1].pvalue,\
					params[2].name, params[2].pvalue,\
					params[3].name, params[3].pvalue\
				);\
				active.trn.set(\
					params[4].name, params[4].pvalue,\
					params[5].name, params[5].pvalue,\
					params[6].name, params[6].pvalue,\
					params[7].name, params[7].pvalue,\
					params[8].name, params[8].pvalue,\
					params[9].name, params[9].pvalue\
				)\
			\})\
		\}\
		\
	\};\
	\
	~mapGlobals = \{\
		~rev.set(\
			~fxglobals[0].name, ~fxglobals[0].mapValue(~invalues.avglbf),\
			~fxglobals[1].name, ~fxglobals[1].mapValue(~invalues.avgrbf),\
			~fxglobals[2].name, ~fxglobals[2].mapValue(~invalues.avgrbb),\
			~fxglobals[3].name, ~fxglobals[3].mapValue(~invalues.avglbb),\
			~fxglobals[4].name, ~fxglobals[4].mapValue(~invalues.avgltf),\
			~fxglobals[5].name, ~fxglobals[5].mapValue(~invalues.avgrtf),\
			~fxglobals[6].name, ~fxglobals[6].mapValue(~invalues.avgrtb),\
			~fxglobals[7].name, ~fxglobals[7].mapValue(~invalues.avgltb)\
		);\
		\
		~line.set(\cf5 \\amp\cf0 , ~fxglobals[8].mapValue(~invalues.avgstate) * 2);\
	\};	\
	\
	~counter = 0;\
		\
\
	~subloops = ~loops.select(\{\cf3 |loop|\cf0  loop.path.contains(\cf4 "detloop_"\cf0 ) \});\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf2 //	~subloops = ~loops.select(\{|loop| loop.path.contains("memor") \});\cf0 \
	~b_bus = \cf3 Array\cf0 .fill(8, \{ \cf3 Bus\cf0 .audio(~serv) \});\
	~t_bus = \cf3 Array\cf0 .fill(8, \{ \cf3 Bus\cf0 .audio(~serv, 4) \});\
	~tr = \cf3 Bus\cf0 .control(~serv);\
	\
	~pointbuf = \cf3 Buffer\cf0 .read(~serv, \cf4 "/Users/alo/sounds/zones/point_1.aif"\cf0 );\
	\
	~trigdefs = ~noisedefs.select(\{\cf3 |def|\cf0  def.asString.contains(\cf4 "dust"\cf0 ) \});	\
\
)\
\
~decode.set(\cf5 \\amp\cf0 , 1.0)\
\
\
\
~fx.startFx\
\
~nano = \cf3 FxNano\cf0 (~fx)\
\
\cf2 // PLAY \cf0 \
\
(\
	~stateresp = \cf3 OSCresponderNode\cf0 (\cf3 nil\cf0 , \cf5 '/fx/states'\cf0 , \{\cf3 |ti, re, ms|\cf0 \
		~invalues.states = ms[1].asFloatArray;\
		~mapParams.value;\
	\}).add;\
	\
	~glresp = \cf3 OSCresponderNode\cf0 (\cf3 nil\cf0 , \cf5 '/fx/globals'\cf0 , \{\cf3 |ti, re, ms|\cf0 \
\pard\tx480\pardeftab480\ql\qnatural\pardirnatural
\cf0 \CocoaLigature0 		\cf3 var\cf0  cmd, avg, sdev, albf, arbf, arbb, albb, altf, artf, artb, altb;\
					\CocoaLigature1 \
		#cmd, \CocoaLigature0 avg, sdev, albf, arbf, arbb, albb, altf, artf, artb, altb\CocoaLigature1  = ms;\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf0 		~invalues.avgstate = avg;\
		~invalues.stddev = sdev;\
	\
		~invalues.avglbf = albf;\
		~invalues.avgrbf = arbf;\
		~invalues.avgrbb = arbb;\
		~invalues.avglbb = albb;\
		~invalues.avgltf = altf;\
		~invalues.avgrtf = artf;\
		~invalues.avgrtb = artb;\
		~invalues.avgltb = altb;\
		\
		~mapGlobals.value;\
	\
	\}).add;\
\
	~trigdefs = ~noisedefs.select(\{\cf3 |def|\cf0  def.asString.contains(\cf4 "dust"\cf0 ) \});\
		\
	~freqs = \cf3 Array\cf0 .geom(8, 0.125, 1.5);\
	~dist = \cf3 Array\cf0 .series(8, 0.0, 0.375).reverse;\
\
	~activeSynths = \cf3 Array\cf0 .newClear(8);\
	\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf2 //	~point = Synth(\\point, [\\out, ~abus, \\buf, ~pointbuf, \\tb, ~tr, \\gate, 1.0, \\amp, 8.0, \cf0 \
\cf2 //		\\tfr, 4.0, \\afr, 0.05, \\sln, 0.2, \\sfr, 10000, \\sam, 0.5, \\doneAction, 2])\cf0 \
\cf2 //		.setn(\\env, Env([0.001, 1.0, 1.0, 0.001], [0.3, 0.4, 0.3], \\sine, 2, 1).asArray);\cf0 \
\
	~line = \cf3 Synth\cf0 .after(~rev, \cf5 \\line\cf0 , [\cf5 \\out\cf0 , 0, \cf5 \\in\cf0 , ~rout, \cf5 \\i_wrp\cf0 , 0.1, \cf5 \\frq\cf0 , 1.0, \cf5 \\wsz\cf0 , 0.1, \
		\cf5 \\dns\cf0 , 6, \cf5 \\rnd\cf0 , 0.05, \cf5 \\amp\cf0 , 0.5\
	]);\
	\
	~orient = \cf3 Orientation\cf0 ();\
	\
	\cf3 Routine\cf0 (\{\
	\
		8.do(\{\cf3 |i|\cf0 \
			\cf3 var\cf0  trans, grp, s_src, s_enc, s_trn, s_dst, buf;\
			grp = \cf3 Group\cf0 .tail(~agrp);\
			s_src = \cf3 Synth\cf0 .head(grp, \cf5 \\swarpfld\cf0 , [\cf5 \\out\cf0 , ~b_bus@i, \cf5 \\efx\cf0 , ~rbus, \cf5 \\gate\cf0 , 1.0, \cf5 \\aamp\cf0 , 0.5, \
				\cf5 \\eamp\cf0 , 0.1, \cf5 \\dur\cf0 , 1.0, \cf5 \\buf\cf0 , ~subloops[i], \cf5 \\str\cf0 , 0, \cf5 \\end\cf0 , 1.0, \cf5 \\wrp\cf0 , 0.001, \
				\cf5 \\frq\cf0 , ~freqs@i, \cf5 \\wsz\cf0 , 0.1, \cf5 \\dns\cf0 , rrand(2, 10), \cf5 \\rnd\cf0 , 0.01, \cf5 \\doneAction\cf0 , 14])\
				.setn(\cf5 \\env\cf0 , \cf3 Env\cf0 ([0.001, 1.0, 1.0, 0.001], [0.001, 1.0, 0.001], \cf5 \\sine\cf0 , 2, 1).asArray);\
			s_enc = \cf3 Synth\cf0 .tail(grp, \cf5 \\atkencodedel\cf0 , [\cf5 \\out\cf0 , ~t_bus@i, \cf5 \\in\cf0 , ~b_bus@i])\
				.setn(\cf5 \\del\cf0 , \cf3 Array\cf0 .geom(4, rrand(0.001, 0.003), 1.618))\
				.setn(\cf5 \\azm\cf0 , ~orient.azimuthArray)\
				.setn(\cf5 \\elv\cf0 , ~orient.elevationArray);\
			s_trn = \cf3 Synth\cf0 .tail(grp, \cf5 \\atk_trans\cf0 , [\cf5 \\out\cf0 , ~abus, \cf5 \\in\cf0 , ~t_bus@i, \cf5 \\dist\cf0 , ~dist@i]);\
			~activeSynths.put(i, (\cf5 \\src\cf0 : s_src, \cf5 \\enc\cf0 : s_enc, \cf5 \\trn\cf0 : s_trn, \cf5 \\grp\cf0 : grp));\
		\});\
\
	\}).play\
\
)\
\
(\cf2 // KILL SYNTHS\cf0 \
\
~activeSynths.do(\{\cf3 |ev|\cf0 \
	ev.src.set(\cf5 \\gate\cf0 , -30.0)\
\});\
\
~line.set(\cf5 \\gate\cf0 , -5.0);\
\
~stateresp.remove; \
\
~tresp.remove;\
\
~glresp.remove;\
\
~freqs = \cf3 nil\cf0 ;\
)\
\
\
\
~activeSynths.do(\{\cf3 |synth, i|\cf0  synth.src.set(\cf5 \\buf\cf0 , ~subloops.wrapAt(i + 2), \cf5 \\dns\cf0 , rrand(3, 5)) \})\
\
~subloops = ~loops.select(\{\cf3 |loop|\cf0  loop.path.contains(\cf4 "memor"\cf0 ) \});\
\
\
~line.set(\cf5 \\frq\cf0 , 1.618)\
\
~line.set(\cf5 \\amp\cf0 , 0.7)\
\
\cf2 // RECORD\cf0 \
\
~serv.prepareForRecord(\cf4 "/Users/alo/sounds/fx/zone_1.aif"\cf0 );\
\
~serv.record\
\
~serv.stopRecording\
\
~point.set(\cf5 \\amp\cf0 , 1.0)\
\
\
\
~serv.queryAllNodes\
\
}