{\rtf1\ansi\ansicpg1252\cocoartf949\cocoasubrtf540
{\fonttbl\f0\fnil\fcharset238 Inconsolata;}
{\colortbl;\red255\green255\blue255;\red191\green0\blue0;\red0\green0\blue191;\red0\green115\blue0;
}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\fs24 \cf2 // zone 0\cf0 \
\
\cf3 SynthDef\cf0 (\cf4 \\freeze\cf0 , \{\cf3 |out, gate, tgate, dur, maxdel, xang, yang, zang, aa, ab, ac, ad, \
		room = 1500, damp, inbw, spr, early, tail, doneAction|\cf0 \
	\cf3 var\cf0  sig, env, bw, fq, amp, trig, rt, gv, del, shift, a, b, c, d, w, x, y, z;\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf0 	env = \cf3 EnvGen\cf0 .kr(\cf3 EnvControl\cf0 .kr, gate, timeScale: dur, doneAction: doneAction);\
	del = \cf3 ArrayControl\cf0 .kr(\cf4 \\delays\cf0 , 4, 0);\
	shift = \cf3 ArrayControl\cf0 .kr(\cf4 \\shifts\cf0 , 4, 1);	\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 	trig = \cf3 Impulse\cf0 .kr(tgate);\
	bw = \cf3 EnvGen\cf0 .kr(\cf3 EnvControl\cf0 .kr(\cf4 \\bw\cf0 ), trig);\
	fq = \cf3 EnvGen\cf0 .kr(\cf3 EnvControl\cf0 .kr(\cf4 \\fq\cf0 ), trig);\
	amp = \cf3 EnvGen\cf0 .kr(\cf3 EnvControl\cf0 .kr(\cf4 \\amp\cf0 ), trig);\
	rt = \cf3 EnvGen\cf0 .kr(\cf3 EnvControl\cf0 .kr(\cf4 \\rt\cf0 ), trig);\
	sig = \cf3 SinOsc\cf0 .ar(\cf3 LFNoise2\cf0 .ar(10000, bw, fq).round(100)) * amp;\
	gv = sig + \cf3 DelayN\cf0 .ar(\cf3 GVerb\cf0 .ar(sig, room, rt, damp, inbw, spr, 0.0, early, tail, room), 4, 4);\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf0 	a = \cf3 PitchShift\cf0 .ar(\cf3 DelayN\cf0 .ar(gv@0, maxdel, del@0), shift@0) * aa;\
	b = \cf3 PitchShift\cf0 .ar(\cf3 DelayN\cf0 .ar(gv@1, maxdel, del@1), shift@1) * ab;\
	c = \cf3 PitchShift\cf0 .ar(\cf3 DelayN\cf0 .ar(gv@0, maxdel, del@2), shift@2) * ac;\
	d = \cf3 PitchShift\cf0 .ar(\cf3 DelayN\cf0 .ar(gv@1, maxdel, del@3), shift@3) * ad;\
	#w, x, y, z = \cf3 A2B\cf0 .ar(a, b, c, d) * env;\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 	\cf3 Out\cf0 .ar(out, \cf3 AtkRotateXYZ\cf0 .ar(w, x, y, z, xang, yang, zang))\
\}).add;\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf0 ~bfreqs = [ 20, 100, 200, 300, 400, 510, 630, 770, 920, 1080, 1270, 1480, 1720,\
	  2000, 2320, 2700, 3150, 3700, 4400, 5300, 6400, 7700, 9500, 12000, 15500, 20000 ];\
\
~cfreqs = \cf3 Array\cf0 .newClear(~bfreqs.size - 1);\
~cbands = \cf3 Array\cf0 .newClear(~bfreqs.size - 1);\
~bfreqs.doAdjacentPairs(\{\cf3 |lo, hi, i|\cf0 \
	~cfreqs.put(i, lo + (hi - lo / 2));\
	~cbands.put(i, hi - lo / 2 );\
\});\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 \
\pard\pardeftab720\ql\qnatural
\cf0 ~flt = (\
	\cf4 \\bpf\cf0 : \{\cf3 |src, freqs, rq, amps|\cf0  \cf3 BPF\cf0 .ar(src, freqs, rq, amps) \},\
	\cf4 \\eq\cf0 : \{\cf3 |src, freqs, rq, amps|\cf0  \cf3 MidEQ\cf0 .ar(src, freqs, rq, amps.ampdb) \},\
	\cf4 \\rhpf\cf0 : \{\cf3 |src, freqs, rq, amps|\cf0  \cf3 RHPF\cf0 .ar(src, freqs, rq, amps) \}\
);\
\
~nzw = (\
	\cf4 \\gray\cf0 : \{ \cf3 GrayNoise\cf0 .ar(0.001) \}, \
	\cf4 \\logistic\cf0 : \{\cf3 |freq|\cf0  \cf3 Logistic\cf0 .ar(freq.linlin(20.0, 8000.0, 3.5, 4.0, 3.99), freq, \
		freq.linlin(20.0, 8000.0, 0.2, 0.8, 0.8), 0.03) \},\
	\cf4 \\dust\cf0 : \{\cf3 |freq|\cf0  \cf3 Dust2\cf0 .ar(freq, 0.09) \},\
	\cf4 \\lfn\cf0 : \{\cf3 |freq|\cf0  \cf3 LFNoise2\cf0 .ar(freq, 0.1)\}\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\ql\qnatural\pardirnatural
\cf0 );\
\
\pard\pardeftab720\ql\qnatural
\cf0 ~ndef = \{\cf3 |name, nfunc, ffunc, bFreq = false|\cf0 \
	\cf3 SynthDef\cf0 (name, \{\cf3 |out, efx, aamp, eamp, samp, dur, rate, buffer, rq, clip, doneAction = 2|\cf0 \
		\cf3 var\cf0  env, sig, args, bf, pointer, nsrc, filt, noise, azm, elv, rho;\
		env = \cf3 Control\cf0 .names([\cf4 \\env\cf0 ]).kr(\cf3 Env\cf0 .newClear(8).asArray);\
		azm = \cf3 EnvGen\cf0 .kr(\cf3 Control\cf0 .names([\cf4 \\azm\cf0 ]).kr(\cf3 Env\cf0 .newClear(8).asArray), timeScale: dur);\
		elv = \cf3 EnvGen\cf0 .kr(\cf3 Control\cf0 .names([\cf4 \\elv\cf0 ]).kr(\cf3 Env\cf0 .newClear(8).asArray), timeScale: dur);\
		rho = \cf3 EnvGen\cf0 .kr(\cf3 Control\cf0 .names([\cf4 \\rho\cf0 ]).kr(\cf3 Env\cf0 .newClear(8).asArray), timeScale: dur);\
		pointer = \cf3 LFSaw\cf0 .kr(rate, 1, 0.5, 0.5);\
		noise = \cf3 AtsNoise\cf0 .kr(buffer, (0..24), pointer);\
		if (bFreq)\
		\{\
			nsrc = \cf3 SynthDef\cf0 .wrap(nfunc, \cf3 nil\cf0 , ~cfreqs) * samp;\
		\}\
		\{\
			nsrc = \cf3 SynthDef\cf0 .wrap(nfunc) * samp;\
		\};\
		filt = \cf3 Mix\cf0 (\cf3 SynthDef\cf0 .wrap(ffunc, \cf3 nil\cf0 , [nsrc, ~cfreqs, ~cbands / ~cfreqs, noise]));\
		sig = (filt ** 0.5).clip2(clip) \
			* \cf3 EnvGen\cf0 .kr(env, timeScale: dur, doneAction: doneAction);\
		\cf3 Out\cf0 .ar(efx, sig * eamp);\
		bf = \cf3 BFEncode1\cf0 .ar(sig, azm, elv, rho);\
		\cf3 Out\cf0 .ar(out, bf * aamp);\
	\}).add;\
\};\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\ql\qnatural\pardirnatural
\cf0 ~nzw.keysValuesDo(\{\cf3 |skey, sfnc|\cf0 \
	~flt.keysValuesDo(\{\cf3 |fkey, ffnc|\cf0 \
		~noisedefs = ~noisedefs.add((fkey ++ skey).asSymbol);\
		~ndef.value((fkey ++ skey).asSymbol, sfnc, ffnc, skey == \cf4 \\dust\cf0 );\
	\})\
\});\
\
\cf3 SynthDef\cf0 (\cf4 \\zone0_grain\cf0 , \{\cf3 |out, efx, aamp, gate, dur, buffer, maxdel, tfrq, tdev, gdur, pos, brate, \
		envA, envB, envf|\cf0 \
	\cf3 var\cf0  trig, sig, del, shift, a, b, c, d, env;\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf0 	env = \cf3 EnvGen\cf0 .kr(\cf3 EnvControl\cf0 .kr, gate, timeScale: dur, doneAction: 2);\
	del = \cf3 ArrayControl\cf0 .kr(\cf4 \\delays\cf0 , 4, 0);\
	shift = \cf3 ArrayControl\cf0 .kr(\cf4 \\shifts\cf0 , 4, 1);\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\ql\qnatural\pardirnatural
\cf0 	trig = \cf3 DelayN\cf0 .ar(\cf3 Impulse\cf0 .ar(tfrq), 0.1, \cf3 TRand\cf0 .ar(0.0, tdev, \cf3 Impulse\cf0 .ar(tfrq)));\
	sig = \cf3 BufGrainI\cf0 .ar(trig, gdur, buffer, brate, pos, envA, envB, envf, 1) * env;\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf0 	#a, b, c, d = \cf3 Array\cf0 .fill(4, \{\cf3 |i|\cf0 \
		\cf3 PitchShift\cf0 .ar(\cf3 DelayN\cf0 .ar(sig, maxdel, del[i]), shift[i]) * aamp;\
	\});\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\ql\qnatural\pardirnatural
\cf0 	\cf3 Out\cf0 .ar(out, \cf3 A2B\cf0 .ar(a, b, c, d))\
\}).add;\
\pard\pardeftab720\ql\qnatural
\cf0 \
\cf3 SynthDef\cf0 (\cf4 \\atk_zone0\cf0 , \{\cf3 |out, in, rX=0, rY=0, rZ=0, fX=0, fY=0, fZ=0 |\cf0 \
	\cf3 var\cf0  w, x, y, z;\
	#w, x, y, z = \cf3 In\cf0 .ar(in, 4);\
	#w, x, y, z = \cf3 AtkRotateXYZ\cf0 .ar(w, x, y, z, rX, rY, rZ );\
	\cf3 Out\cf0 .ar(out, \cf3 Array\cf0 .with(w, x, y, z))\
\}).add;\
\
\
\cf2 // zone 1\cf0 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf3 SynthDef\cf0 (\cf4 \\line\cf0 , \{\cf3 |out, in, gate = 1.0, i_wrp = 0.1, frq, wsz, dns, rnd, amp|\cf0 \
	\cf3 var\cf0  bufs, recs, ptrs, phases, deltimes, output, trigs, input;\
	deltimes = [0, 1 / i_wrp * 0.5, 1 / i_wrp];\
	bufs = \cf3 Array\cf0 .fill(3, \{ \cf3 LocalBuf\cf0 (\cf3 SampleRate\cf0 .ir * 2) \});\
	ptrs = \cf3 Array\cf0 .fill(3, \{\cf3 |i|\cf0  \cf3 LFSaw\cf0 .kr(i_wrp, 0, 0.5, 0.5) \});\
	trigs = \cf3 Array\cf0 .fill(3, \{\cf3 |i|\cf0  \cf3 DelayN\cf0 .kr(\cf3 Impulse\cf0 .kr(i_wrp * (2 / 3)), deltimes@i, deltimes@i) \});\
	input = \cf3 In\cf0 .ar(in);\
	recs = \cf3 Mix\cf0 .fill(3, \{\cf3 |i|\cf0 \
		\cf3 RecordBuf\cf0 .ar(input, bufs@i, loop:0.0, trigger: trigs@i);\
	\});\
	output = \cf3 Mix\cf0 .fill(3, \{\cf3 |i|\cf0 \
		\cf3 Warp1\cf0 .ar(1, bufs@i, ptrs@i, frq, wsz, -1, dns, rnd)\
			* \cf3 EnvGen\cf0 .kr(\
				\cf3 Env\cf0 ([0.0,1.0,1.0,0.0],[0.3,0.4,0.3],\cf4 \\sine\cf0 , 0, 3),\
				trigs.rotate(-1)@i, timeScale: 1.0 / i_wrp\
			)\
	\}) * \cf3 EnvGen\cf0 .kr(\cf3 Env\cf0 ([0.001, 1.0, 1.0, 0.001], [0.3, 0.4, 0.3], \cf4 \\sine\cf0 , 2), gate, doneAction: 2);\
	\cf3 Out\cf0 .ar(out, \
		\cf3 A2B\cf0 .ar(\
			output,\
			\cf3 DelayN\cf0 .ar(output, 0.01, 0.01),\
			\cf3 DelayN\cf0 .ar(output, 0.02, 0.02),\
			\cf3 DelayN\cf0 .ar(output, 0.03, 0.03)\
		) * amp\
	)\
\}).add;\
\pard\pardeftab720\ql\qnatural
\cf0 \
\cf3 SynthDef\cf0 (\cf4 \\swarpfld\cf0 , \{\cf3 |out, efx, gate, aamp, eamp, dur, buf, str, end, wrp, frq, wsz, dns, rnd, \
		doneAction = 2|\cf0 \
	\cf3 var\cf0  ptr, sig, env;\
	env = \cf3 EnvControl\cf0 .kr(\cf4 \\env\cf0 , 16);	\
	ptr = \cf3 LFSaw\cf0 .kr(wrp).range(str, end);\
	sig = \cf3 SndWarp\cf0 .ar(buf, ptr, frq, wsz, dns, rnd) * \
		\cf3 EnvGen\cf0 .kr(env, gate, timeScale: dur, doneAction: doneAction);\
	sig = \cf3 LeakDC\cf0 .ar(sig ** 0.5);\
	\cf3 Out\cf0 .ar(efx, sig * eamp);\
	\cf3 Out\cf0 .ar(out, sig * aamp);\
\}).add;\
\
\cf3 SynthDef\cf0 (\cf4 \\atkencodedel\cf0 , \{\cf3 |out, in|\cf0 \
	\cf3 var\cf0  src, del, azm, elv, sig, a, b, c, d;\
	src = \cf3 In\cf0 .ar(in);\
	del = \cf3 ArrayControl\cf0 .kr(\cf4 \\del\cf0 , 4, 1);\
	azm = \cf3 ArrayControl\cf0 .kr(\cf4 \\azm\cf0 , 4, 1);\
	elv = \cf3 ArrayControl\cf0 .kr(\cf4 \\elv\cf0 , 4, 1);\
	sig = \cf3 Array\cf0 .fill(4, \{\cf3 |i|\cf0 \
		\cf3 DelayC\cf0 .ar(src, delaytime: del@i)\
	\});\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\ql\qnatural\pardirnatural
\cf0 	 a = \cf3 BLowShelf\cf0 .ar(\cf3 AtkMonoToB\cf0 .ar(sig@0, azm@0, elv@0), 100.0, 0.65, 0.0);\
	 b = \cf3 BPeakEQ\cf0 .ar(\cf3 AtkMonoToB\cf0 .ar(sig@1, azm@1, elv@1), 600.0, 2.0, 0.0 );\
	 c = \cf3 BPeakEQ\cf0 .ar(\cf3 AtkMonoToB\cf0 .ar(sig@2, azm@2, elv@2), 2000.0, 2.0, 0.0 );\
	 d = \cf3 BHiShelf\cf0 .ar(\cf3 AtkMonoToB\cf0 .ar(sig@3, azm@3, elv@3), 7500.0, 1, 0.0 );\
	 \cf3 Out\cf0 .ar(out, a + b + c + d);\
\pard\pardeftab720\ql\qnatural
\cf0 \}).add;\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\ql\qnatural\pardirnatural
\cf0 \
\pard\pardeftab720\ql\qnatural
\cf3 SynthDef\cf0 (\cf4 \\atk_trans\cf0 , \{\cf3 |out, in, xang = 0.0, yang = 0.0, zang = 0.0, \
	zoom = 0.0, push = 0.0, focus = 0.0 |\cf0 \
	\cf3 var\cf0  w, x, y, z;\
	#w, x, y, z = \cf3 In\cf0 .ar(in, 4);\
	#w, x, y, z = \cf3 AtkTilt\cf0 .ar(w, x, y, z, xang );\
	#w, x, y, z = \cf3 AtkTumble\cf0 .ar(w, x, y, z, yang );\
	#w, x, y, z = \cf3 AtkRotate\cf0 .ar(w, x, y, z, zang );\
	\cf3 Out\cf0 .ar(out, [w, x, y, z])\
\}).add;\
\
\cf2 // zone 3\cf0 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf0 ~z3defs = [	\
	\cf3 SynthDef\cf0 (\cf4 \\kck\cf0 , \{\cf3 |ou, ef, fr, at, dr, cr, az, ea, on, am|\cf0 \
		\cf3 var\cf0  sig, env, bfr;\
		env = \cf3 Env\cf0 .perc(at, 1.0 - at, 1, cr);\
		sig = \cf3 BLowPass\cf0 .ar(\
			\cf3 Mix\cf0 (\
				\cf3 SinOsc\cf0 .ar(\
					\cf3 Array\cf0 .series(5, fr, 10) * \cf3 LFNoise0\cf0 .ar(1000.0).range(35/36, 36/35), \
					0.5pi \
				)\
			),\
			300.0,\
			1.0\
		) * \cf3 EnvGen\cf0 .kr(env, timeScale: dr, levelScale: am, doneAction: 2) * on;\
		\cf3 Out\cf0 .ar(ef, sig * ea);\
		bfr = \cf3 BFEncode1\cf0 .ar(sig, az, 0, 0.5);\
		\cf3 Out\cf0 .ar(ou, bfr)\
	\}),\
	\
	\
	\cf3 SynthDef\cf0 (\cf4 \\snr\cf0 , \{\cf3 |ou, fr, at, dr, cr, dc, dl, wt, az, am|\cf0 \
		\cf3 var\cf0  sig, env, bfr, nr;\
		nr = 5;\
		env = \cf3 Env\cf0 .perc(at, 1.0 - at, 1, cr);\
		sig = \cf3 Dust\cf0 .ar(fr, dc * 0.5) + \cf3 BPF\cf0 .ar(\cf3 WhiteNoise\cf0 .ar, \cf3 Line\cf0 .kr(fr*1.5, fr*0.667, dr), 0.5) \
			* \cf3 EnvGen\cf0 .kr(env, timeScale: dr, doneAction: 2);\
		bfr = \cf3 BFEncode1\cf0 .ar(sig, az, 0, 0.5);\
		\cf3 Out\cf0 .ar(ou, bfr * am)\
	\}),\
		\
	\cf3 SynthDef\cf0 (\cf4 \\hh\cf0 , \{\cf3 |ou, dr, fr, az, am|\cf0 \
		\cf3 var\cf0  sig, env, bfr;\
		env = \cf3 EnvGen\cf0 .kr(\cf3 Env\cf0 .perc(0.05, 0.95, 1, -16), timeScale: dr, doneAction: 2);\
		sig = \cf3 RHPF\cf0 .ar(\cf3 PinkNoise\cf0 .ar, fr, 0.3) * env;\
		bfr = \cf3 BFEncode1\cf0 .ar(sig, az, 0, 0.5);	\
		\cf3 Out\cf0 .ar(ou, bfr * am);\
	\}),\
	\
	\cf3 SynthDef\cf0 (\cf4 \\bss\cf0 , \{\cf3 |ou, fr, dr, az, am|\cf0 \
		\cf3 var\cf0  env, sig, bfr;\
		env = \cf3 Env\cf0 ([0.001, 1.0, 1.0, 0.001], [0.01, 0.8, 0.19], \cf4 \\sine\cf0 );\
		sig = \cf3 SinOsc\cf0 .ar(fr * \cf3 LFNoise2\cf0 .ar(\cf3 SinOsc\cf0 .ar(1, 0, 500, 10000)).range(15/16, 16/15), \
			\cf3 SinOsc\cf0 .kr(2.25, 0, pi, pi), 10).distort\
			* \cf3 EnvGen\cf0 .kr(env, timeScale: dr, doneAction: 2);\
		sig = \cf3 Reverb\cf0 .ar(sig * 0.1, 3) + sig;\
		sig = \cf3 Compander\cf0 .ar(sig, sig, 0.2, 1.0, 0.01);\
		bfr = \cf3 BFEncode1\cf0 .ar(sig, az, 0, 0.5);\
		\cf3 Out\cf0 .ar(ou, bfr * am)\
	\}),\
	\
	\cf3 SynthDef\cf0 (\cf4 \\clck\cf0 , \{\cf3 |ou, ef, am, az, dr, bt, ea|\cf0 \
		\cf3 var\cf0  sig, bfr;\
		sig = \cf3 BPF\cf0 .ar(\
			\cf3 VarSaw\cf0 .ar(15000, 0.0, 0.1, \cf3 Decay\cf0 .ar(\cf3 Impulse\cf0 .ar(bt), 0.001)),\
			15000,\
			0.9,\
			25 * \cf3 LFNoise1\cf0 .ar(8).range(0, 1)\
		).fold(-1, 1);\
		sig = sig * \cf3 EnvGen\cf0 .kr(\cf3 Env\cf0 ([0, 1, 1, 0], [0, 1, 0]), timeScale: dr, doneAction: 2);\
		\cf3 Out\cf0 .ar(ef, sig * ea);\
		bfr = \cf3 BFEncode1\cf0 .ar(sig, az, 0, 0.5);\
		\cf3 Out\cf0 .ar(ou, bfr * am)\
	\}),\
			\
	\cf3 SynthDef\cf0 (\cf4 \\nzsnr\cf0 , \{\cf3 |ou, am, az, fr, dr|\cf0 \
		\cf3 var\cf0  sig, env, bfr;\
		env = \cf3 EnvGen\cf0 .kr(\cf3 Env\cf0 .perc(0.05, 0.95, 1, -16), timeScale: dr, doneAction: 2);\
		sig = \cf3 Dust\cf0 .ar(fr) * \cf3 SinOsc\cf0 .ar(fr) * env;\
		bfr = \cf3 BFEncode1\cf0 .ar(sig, az, 0, 0.5);\
		\cf3 Out\cf0 .ar(ou, bfr * am);\
	\}),\
	\
	\cf3 SynthDef\cf0 (\cf4 \\pnk\cf0 , \{\cf3 |ou, az, dr, am|\cf0 \
		\cf3 var\cf0  sig, env, bfr;\
		env = \cf3 EnvGen\cf0 .kr(\cf3 Env\cf0 .perc(0.05, 0.95, 1, -16), timeScale: dr, doneAction: 2);\
		sig = \cf3 PinkNoise\cf0 .ar * env;\
		bfr = \cf3 BFEncode1\cf0 .ar(sig, az, 0, 0.5);\
		\cf3 Out\cf0 .ar(ou, bfr * am)\
	\}),\
	\
	\cf3 SynthDef\cf0 (\cf4 \\fmsnth\cf0 , \{\cf3 |ou, ef, dr, gd, cf, mf, in, az, on, am|\cf0 \
		\
		\cf3 var\cf0  sig, env, bfr, trg, dev, amps, n = 7;\
		trg = \cf3 Impulse\cf0 .kr(gd.reciprocal);\
		env = \cf3 Env\cf0 ([0.001, 1.0, 1.0, 0.001], [0.1, 0.5, 0.4], [0, 0, 3]);\
		dev = \cf3 Array\cf0 .rand(n, 0.5, 2.0).round(1 - (2**(1/24)));\
		amps = \cf3 Array\cf0 .geom(n, 1.0, 13 / 21);\
		sig = \cf3 Mix\cf0 .fill(n, \{\cf3 |i|\cf0 \
			\cf3 var\cf0  frq = cf * dev[i];\
			\cf3 DelayC\cf0 .ar(\cf3 FMGrain\cf0 .ar(trg, gd, frq, frq * mf, in, amps[i]), 0.1, \cf3 Rand\cf0 (0, 0.1))\
		\}) * \cf3 EnvGen\cf0 .kr(env, timeScale: dr, doneAction: 2);\
		bfr = \cf3 BFEncode1\cf0 .ar(sig * am, az, 0, 0.5);\
		\cf3 Out\cf0 .ar(ou, bfr)	\
	\}),\
	\
	\cf3 SynthDef\cf0 (\cf4 \\hgls\cf0 , \{\cf3 |ou, dr, fr, wd, ws, wr, gr, az, on, am|\cf0 \
		\
		\cf3 var\cf0  sig, env, bfr;\
		env = \cf3 Env\cf0 ([0.001, 1.0, 1.0, 0.001], [0.2, 0.5, 0.3], \cf4 \\sine\cf0 );\
		sig = \cf3 VarSaw\cf0 .ar(\cf3 XLine\cf0 .kr(fr, fr * 0.5, dr), 0, wd);\
		sig = \cf3 GrainIn\cf0 .ar(1, \cf3 Impulse\cf0 .kr(gr * \cf3 TRand\cf0 .kr(1-wr, 1+wr, \cf3 Impulse\cf0 .kr(gr))), ws, sig) * \
			\cf3 EnvGen\cf0 .kr(env, timeScale: dr, doneAction: 2);\
		bfr = \cf3 BFEncode1\cf0 .ar(sig * am, az, 0, 0.5);\
		\cf3 Out\cf0 .ar(ou, bfr)\
		\
	\}),\
\
	\cf3 SynthDef\cf0 (\cf4 \\dbkck\cf0 , \{\cf3 |ou, ef, dr, gd, az, ea, on, am|\cf0 \
		\cf3 var\cf0  sig, env, bfr, fr;\
		fr = \cf3 Array\cf0 .geom(24, 14.midicps, 2**(1/24)) * (1..4).stutter(6).reverse;\
		env = \cf3 Env\cf0 ([0.001, 8.0, 1.0, 0.001], [0.01, 0.1, 0.89], [0, 0, -16]);\
		sig = \cf3 Mix\cf0 (\cf3 SinGrain\cf0 .ar(\cf3 Impulse\cf0 .kr(gd.reciprocal * 4), gd, fr, 0.4)); \
		sig = sig * \cf3 EnvGen\cf0 .kr(env, timeScale: dr, doneAction: 2);\
		sig = sig.clip(-0.9, 0.9);\
		\cf3 Out\cf0 .ar(ef, sig * ea);\
		bfr = \cf3 BFEncode1\cf0 .ar(sig * am, az, 0, 0.5);\
		\cf3 Out\cf0 .ar(ou, bfr)\
	\
	\}),\
	\
	\cf3 SynthDef\cf0 (\cf4 \\dbclp\cf0 , \{\cf3 |ou, ef, at, dc, cr, dr, co, ds, az, ea, on, am|\cf0 \
		\cf3 var\cf0  sig, env, bfr;\
		env = \cf3 Env\cf0 .perc(at, dc, 1, cr);\
		sig = \cf3 Crackle\cf0 .ar(co, ds).clip(-0.9, 0.9) * \
			\cf3 EnvGen\cf0 .kr(env, timeScale: dr, doneAction: 2);\
		\cf3 Out\cf0 .ar(ef, sig * ea);\
		bfr = \cf3 BFEncode1\cf0 .ar(sig * am, az, 0, 0.5);\
		\cf3 Out\cf0 .ar(ou, bfr)\
	\})\
	\
];\
\
\pard\pardeftab720\ql\qnatural
\cf3 SynthDef\cf0 (\cf4 \\rwarpfldatk\cf0 , \{\cf3 |out, efx, gate, aamp, eamp, maxdel, dur, buf, str, end, wrp, frq, wsz, \
		dns, rnd, xang, yang, zang, doneAction = 2|\cf0 \
	\cf3 var\cf0  ptr, sig, bf, delays, shifts, wins, amps, a, b, c, d, w, x, y, z;\
	delays = \cf3 ArrayControl\cf0 .kr(\cf4 \\delays\cf0 , 4, 0);\
	shifts = \cf3 ArrayControl\cf0 .kr(\cf4 \\shifts\cf0 , 4, 1);\
	wins = \cf3 ArrayControl\cf0 .kr(\cf4 \\wins\cf0 , 4, 0.1);\
	amps = \cf3 ArrayControl\cf0 .kr(\cf4 \\amps\cf0 , 4, 1);\
	ptr = \cf3 LFSaw\cf0 .kr(wrp).range(str, end);\
	sig = \cf3 LeakDC\cf0 .ar(\cf3 Warp1\cf0 .ar(1, buf, ptr, frq, wsz, -1, dns, rnd)) * \
		\cf3 EnvGen\cf0 .kr(\cf3 EnvControl\cf0 .kr, gate, timeScale: dur, doneAction: doneAction);\
	sig = \cf3 LeakDC\cf0 .ar(sig ** 0.5 ** 1.5);\
	\cf3 Out\cf0 .ar(efx, sig * eamp);\
	#a, b, c, d = \cf3 Array\cf0 .fill(4, \{\cf3 |i|\cf0   \
		\cf3 DelayC\cf0 .ar(\cf3 PitchShift\cf0 .ar(sig, wins@i, shifts@i), maxdel, delays@i, amps@i);\
	\});\
	#w, x, y, z = \cf3 A2B\cf0 .ar(a, b, c, d) * aamp;\
	\cf3 Out\cf0 .ar(out, \cf3 AtkRotateXYZ\cf0 .ar(w, x, y, z, xang, yang, zang))\
\}).add;\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf0 \
~z3defs.do(\cf3 _\cf0 .add);\
}